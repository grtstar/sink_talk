
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF0003D                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        192001CE                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0920FE18                 r0 = Null + M[0xfffe18];
0x00001D        FD0000FF D1523A7F        r3 = M[r0 + -50561];
0x00001F        01E00080                 rFlags = Null + 128;
0x000020        E420002F                 r0 = Null + 1;
0x000021        09000AA5                 Null = Null + M[$interrupt.block_count];
0x000022        00200001                 if NE r0 = Null + Null;
0x000023        1920FE12                 M[0xfffe12] = r0 + Null;
0x000024        E005000F                 call r3;
0x000025        01E00000                 rFlags = Null + 0;
0x000026        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000027        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000028        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000029        1940FE44                 M[0xfffe44] = r2 + Null;
0x00002A        85334000                 r1 = r1 OR 0x4000;
0x00002B        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002C        FD0000FF 09303AA5        r1 = Null + M[$interrupt.total_time];
0x00002E        293301CE                 r1 = r1 - M[$interrupt.start_time];
0x00002F        0933FE71                 r1 = r1 + M[0xfffe71];
0x000030        FD0000FF 19303AA5        M[$interrupt.total_time] = r1 + Null;
0x000032        F104000C                 popm <r0, r1>;
0x000033        1930FE93                 M[0xfffe93] = r1 + Null;
0x000034        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000035        F104001C                 popm <r0, r1, r2>;
0x000036        DC0E000F                 rti;

 <$flash.init_pm>
0x000037        FD0000FF 092039E0        r0 = Null + M[$flash.code.address];
0x000039        1920FE83                 M[0xfffe83] = r0 + Null;
0x00003A        FD000004 85200000        r0 = Null OR 0x40000;
0x00003C        1920FE84                 M[0xfffe84] = r0 + Null;
0x00003D        DC0D000F                 rts;

 <$pre_main>
0x00003E        E1F0FFF9                 call $flash.init_pm;
0x00003F        DDF00D0D                 jump $main;
...

 <$frame_sync.usb_in_stereo_audio_copy>
0x000121        F3D00000                 push rLink;
0x000122        D50A0009                 M[r8 + 9] = Null;

 <$frame_sync.usb_in_stereo_audio_copy_retry>
0x000123        D12A0000                 r0 = M[r8 + 0];
0x000124        8182000F                 r6 = r0 AND 0xf;
0x000125        0068000F                 r4 = r6 + Null;
0x000126        01400062                 r2 = Null + 98;
0x000127        01500005                 r3 = Null + 5;
0x000128        65080007                 Null = 7 - r6;
0x000129        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.lower_port;
0x00012A        0068004F                 r4 = r6 + r2;
0x00012B        03850000                 r6 = r6 + r3;

 <$M.frame_sync.usb_in_stereo_audio_copy.lower_port>
0x00012C        5148FE2B                 I4 = r6 + -469;
0x00012D        D13A0007                 r1 = M[r8 + 7];
0x00012E        D1230A88                 r0 = M[r1 + 2696];
0x00012F        DC02000F                 jump r0;

 <$M.frame_sync.usb_in_stereo_audio_copy.idle>
0x000130        D50A0008                 M[r8 + 8] = Null;
0x000131        E420002F                 r0 = Null + 1;
0x000132        D13A0006                 r1 = M[r8 + 6];
0x000133        00230001                 if NE r0 = r1 + Null;
0x000134        D52A0006                 M[r8 + 6] = r0;
0x000135        D506FE7B                 M[r4 + -389] = Null;
0x000136        D12A0000                 r0 = M[r8 + 0];
0x000137        E1F00B77                 call $cbuffer.calc_amount_data;
0x000138        00C3000F                 r10 = r1 + Null;
0x000139        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.empty_loop;
0x00013A        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.empty_loop>
0x00013B        0900FE33                 Null = Null + M[0xfffe33];
0x00013C        D12A0000                 r0 = M[r8 + 0];
0x00013D        E1F00B71                 call $cbuffer.calc_amount_data;
0x00013E        0003000F                 Null = r1 + Null;
0x00013F        DD10004E                 if NE jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x000140        E420002F                 r0 = Null + 1;
0x000141        D52A0007                 M[r8 + 7] = r0;
0x000142        DDF0004B                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.syncing_a>
0x000143        D12A0000                 r0 = M[r8 + 0];
0x000144        E1F00B6A                 call $cbuffer.calc_amount_data;
0x000145        D12A0003                 r0 = M[r8 + 3];
0x000146        21C20004                 r10 = r0 - 4;
0x000147        E422002F                 r0 = r0 + 1;
0x000148        2003002F                 Null = r1 - r0;
0x000149        DD400044                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x00014A        D13A0005                 r1 = M[r8 + 5];
0x00014B        E433002F                 r1 = r1 + 1;
0x00014C        8133007F                 r1 = r1 AND 0x7f;
0x00014D        03000020                 Null = Null + Null, r0 = M[I4,0];
0x00014E        D14A0007                 r2 = M[r8 + 7];
0x00014F        01500002                 r3 = Null + 2;
0x000150        D55A0007                 M[r8 + 7] = r3;
0x000151        E404003F                 Null = r2 - 1;
0x000152        DD000014                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x000153        2003002F                 Null = r1 - r0;
0x000154        DD000012                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x000155        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000156        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000157        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000158        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000159        2003002F                 Null = r1 - r0;
0x00015A        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.large_packet;
0x00015B        01200000                 r0 = Null + 0;
0x00015C        D52A0007                 M[r8 + 7] = r0;
0x00015D        DDF00030                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.large_packet>
0x00015E        D13A0006                 r1 = M[r8 + 6];
0x00015F        21330002                 r1 = r1 - 2;
0x000160        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.skip_all_large;
0x000161        01300000                 r1 = Null + 0;
0x000162        01CC0004                 r10 = r10 + 4;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_all_large>
0x000163        D53A0008                 M[r8 + 8] = r1;
0x000164        01300003                 r1 = Null + 3;
0x000165        D53A0007                 M[r8 + 7] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_and_update>
0x000166        D52A0005                 M[r8 + 5] = r0;
0x000167        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.skip_loop;
0x000168        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_loop>
0x000169        D12A0000                 r0 = M[r8 + 0];
0x00016A        4430004F                 r1 = Null + I4;
0x00016B        E1F00B78                 call $cbuffer.set_read_address;
0x00016C        DDF00021                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.synced>
0x00016D        D12A0001                 r0 = M[r8 + 1];
0x00016E        E1F00B30                 call $cbuffer.calc_amount_space;
0x00016F        0052000F                 r3 = r0 + Null;
0x000170        D12A0002                 r0 = M[r8 + 2];
0x000171        E1F00B2D                 call $cbuffer.calc_amount_space;
0x000172        2005002F                 Null = r3 - r0;
0x000173        00520005                 if POS r3 = r0 + Null;
0x000174        D19A0003                 r7 = M[r8 + 3];
0x000175        9199007E                 r7 = r7 ASHIFT -2;
0x000176        2005009F                 Null = r3 - r7;
0x000177        DD400016                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x000178        0900FE33                 Null = Null + M[0xfffe33];
0x000179        D12A0000                 r0 = M[r8 + 0];
0x00017A        E1F00B34                 call $cbuffer.calc_amount_data;
0x00017B        01C0FFFC                 r10 = Null + -4;
0x00017C        D15A0008                 r3 = M[r8 + 8];
0x00017D        20CC00C0                 if EQ r10 = r10 - r10;
0x00017E        D12A0003                 r0 = M[r8 + 3];
0x00017F        032C0000                 r0 = r0 + r10;
0x000180        8DC2007E                 r10 = r0 LSHIFT -2;
0x000181        E422002F                 r0 = r0 + 1;
0x000182        2003002F                 Null = r1 - r0;
0x000183        DD40000A                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x000184        D13A0006                 r1 = M[r8 + 6];
0x000185        E433003F                 r1 = r1 - 1;
0x000186        E425003F                 r0 = r3 - 1;
0x000187        00230004                 if NEG r0 = r1 + Null;
0x000188        D52A0008                 M[r8 + 8] = r0;
0x000189        E1F00007                 call $M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper;
0x00018A        E420002F                 r0 = Null + 1;
0x00018B        D52A0009                 M[r8 + 9] = r0;
0x00018C        DDF0FF97                 jump $frame_sync.usb_in_stereo_audio_copy_retry;

 <$M.frame_sync.usb_in_stereo_audio_copy.exit>
0x00018D        51C00000                 L0 = Null + 0;
0x00018E        51F00000                 L5 = Null + 0;
0x00018F        DDF00B60                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper>
0x000190        F3D00000                 push rLink;
0x000191        D13A0005                 r1 = M[r8 + 5];
0x000192        E433002F                 r1 = r1 + 1;
0x000193        8133007F                 r1 = r1 AND 0x7f;
0x000194        D506FE7B                 M[r4 + -389] = Null;
0x000195        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000196        D52A0005                 M[r8 + 5] = r0;
0x000197        2003002F                 Null = r1 - r0;
0x000198        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.copy_data;
0x000199        01200000                 r0 = Null + 0;
0x00019A        D52A0007                 M[r8 + 7] = r0;
0x00019B        DDF0001B                 jump $M.frame_sync.usb_in_stereo_audio_copy.lexit;

 <$M.frame_sync.usb_in_stereo_audio_copy.copy_data>
0x00019C        E420002F                 r0 = Null + 1;
0x00019D        D526FE7B                 M[r4 + -389] = r0;
0x00019E        D12A0001                 r0 = M[r8 + 1];
0x00019F        E1F00B3A                 call $_cbuffer_get_write_address;
0x0001A0        5000002F                 I0 = Null + r0;
0x0001A1        50C0003F                 L0 = Null + r1;
0x0001A2        D12A0002                 r0 = M[r8 + 2];
0x0001A3        E1F00B36                 call $_cbuffer_get_write_address;
0x0001A4        5050002F                 I5 = Null + r0;
0x0001A5        50F0003F                 L5 = Null + r1;
0x0001A6        D15A0004                 r3 = M[r8 + 4];
0x0001A7        E5F00006                 do $M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop;
0x0001A8        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0001A9        93250000                 r0 = r0 ASHIFT r3;
0x0001AA        03000030                 Null = Null + Null, r1 = M[I4,0];
0x0001AB        93350000                 r1 = r1 ASHIFT r3;
0x0001AC        0300A1B5                 Null = Null + Null, M[I0,1] = r0, M[I5,1] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop>
0x0001AD        D12A0000                 r0 = M[r8 + 0];
0x0001AE        4430004F                 r1 = Null + I4;
0x0001AF        E1F00B34                 call $cbuffer.set_read_address;
0x0001B0        D12A0001                 r0 = M[r8 + 1];
0x0001B1        4430000F                 r1 = Null + I0;
0x0001B2        E1F00B35                 call $cbuffer.set_write_address;
0x0001B3        D12A0002                 r0 = M[r8 + 2];
0x0001B4        4430005F                 r1 = Null + I5;
0x0001B5        E1F00B32                 call $cbuffer.set_write_address;

 <$M.frame_sync.usb_in_stereo_audio_copy.lexit>
0x0001B6        DDF00B39                 jump $pop_rLink_and_rts;

 <$sbc.calc_bit_allocation>
0x0001B7        F3D00000                 push rLink;
0x0001B8        51900001                 M1 = Null + 1;
0x0001B9        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_chan_loop>
0x0001BA        D1CB0021                 r10 = M[r9 + 33];
0x0001BB        983200CF                 r1 = r0 * r10 (int);
0x0001BC        D16B0018                 r4 = M[r9 + 24];
0x0001BD        5013006F                 I1 = r1 + r4;
0x0001BE        D16B001A                 r4 = M[r9 + 26];
0x0001BF        5023006F                 I2 = r1 + r4;
0x0001C0        E460003F                 r4 = Null - 1;
0x0001C1        D13B001C                 r1 = M[r9 + 28];
0x0001C2        9B3C0000                 r1 = r1 * r10 (int);
0x0001C3        D14B0017                 r2 = M[r9 + 23];
0x0001C4        5040004F                 I4 = Null + r2;
0x0001C5        5433004F                 I3 = r1 + I4;
0x0001C6        E5F00008                 do $M.sbc.calc_bit_allocation.md_loudness_loop;
0x0001C7        0140FFFB                 r2 = Null + -5;
0x0001C8        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0001C9        03035D00                 Null = Null + r1, r3 = M[I3,1];
0x0001CA        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness_endif;
0x0001CB        2043005F                 r2 = r1 - r3;
0x0001CC        90440065                 if POS r2 = r2 ASHIFT r4;

 <$M.sbc.calc_bit_allocation.md_loudness_endif>
0x0001CD        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.sbc.calc_bit_allocation.md_loudness_loop>
0x0001CE        D1CB0021                 r10 = M[r9 + 33];
0x0001CF        983200CF                 r1 = r0 * r10 (int);
0x0001D0        D14B001A                 r2 = M[r9 + 26];
0x0001D1        5023004F                 I2 = r1 + r2;
0x0001D2        E1F00035                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.md_findbitslice_loop1>
0x0001D3        D1CB0021                 r10 = M[r9 + 33];
0x0001D4        983200CF                 r1 = r0 * r10 (int);
0x0001D5        D17B001A                 r5 = M[r9 + 26];
0x0001D6        5023007F                 I2 = r1 + r5;
0x0001D7        E1F00039                 call $M.sbc.calc_bit_allocation.share_code_2;
0x0001D8        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.md_findbitslice_loop1;
0x0001D9        D1CB0021                 r10 = M[r9 + 33];
0x0001DA        983200CF                 r1 = r0 * r10 (int);
0x0001DB        D1CB001B                 r10 = M[r9 + 27];
0x0001DC        501300CF                 I1 = r1 + r10;
0x0001DD        D1CB001A                 r10 = M[r9 + 26];
0x0001DE        502300CF                 I2 = r1 + r10;
0x0001DF        D1CB0021                 r10 = M[r9 + 33];
0x0001E0        E1F00043                 call $M.sbc.calc_bit_allocation.share_code_3;
0x0001E1        D1CB0021                 r10 = M[r9 + 33];
0x0001E2        983200CF                 r1 = r0 * r10 (int);
0x0001E3        D16B001B                 r4 = M[r9 + 27];
0x0001E4        5013006F                 I1 = r1 + r4;
0x0001E5        D16B001A                 r4 = M[r9 + 26];
0x0001E6        5023006F                 I2 = r1 + r4;
0x0001E7        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_loop>
0x0001E8        D13B0022                 r1 = M[r9 + 34];
0x0001E9        2005003F                 Null = r3 - r1;
0x0001EA        DD500005                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_end;
0x0001EB        E1F00048                 call $M.sbc.calc_bit_allocation.share_code_4;
0x0001EC        E466002F                 r4 = r4 + 1;
0x0001ED        200600CF                 Null = r4 - r10;
0x0001EE        DD10FFFA                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_end>
0x0001EF        983200CF                 r1 = r0 * r10 (int);
0x0001F0        D16B001B                 r4 = M[r9 + 27];
0x0001F1        5013006F                 I1 = r1 + r4;
0x0001F2        D16B001A                 r4 = M[r9 + 26];
0x0001F3        5023006F                 I2 = r1 + r4;
0x0001F4        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_loop>
0x0001F5        D13B0022                 r1 = M[r9 + 34];
0x0001F6        2005003F                 Null = r3 - r1;
0x0001F7        DD50000B                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_end;
0x0001F8        03003400                 Null = Null + Null, r1 = M[I1,0];
0x0001F9        03007900                 Null = Null + Null, r5 = M[I2,1];
0x0001FA        21030010                 Null = r1 - 16;
0x0001FB        DD500003                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_endif;
0x0001FC        E433002F                 r1 = r1 + 1;
0x0001FD        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_endif>
0x0001FE        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0001FF        E466002F                 r4 = r4 + 1;
0x000200        200600CF                 Null = r4 - r10;
0x000201        DD10FFF4                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_end>
0x000202        E422002F                 r0 = r0 + 1;
0x000203        D13B001F                 r1 = M[r9 + 31];
0x000204        2002003F                 Null = r0 - r1;
0x000205        DD10FFB5                 if NE jump $M.sbc.calc_bit_allocation.md_chan_loop;
0x000206        DDF00AE9                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.share_code_1>
0x000207        01400000                 r2 = Null + 0;
0x000208        E5F00004                 do $M.sbc.calc_bit_allocation.maxbitneed_loop;
0x000209        03003900                 Null = Null + Null, r1 = M[I2,1];
0x00020A        2004003F                 Null = r2 - r1;
0x00020B        00430004                 if NEG r2 = r1 + Null;

 <$M.sbc.calc_bit_allocation.maxbitneed_loop>
0x00020C        01500000                 r3 = Null + 0;
0x00020D        01600000                 r4 = Null + 0;
0x00020E        E444002F                 r2 = r2 + 1;
0x00020F        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_2>
0x000210        E444003F                 r2 = r2 - 1;
0x000211        03560000                 r3 = r3 + r4;
0x000212        01600000                 r4 = Null + 0;
0x000213        E5F0000C                 do $M.sbc.calc_bit_allocation.findbitslice_loop2;
0x000214        03003900                 Null = Null + Null, r1 = M[I2,1];
0x000215        2073004F                 r5 = r1 - r2;
0x000216        21070002                 Null = r5 - 2;
0x000217        DD400004                 if NEG jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x000218        21070010                 Null = r5 - 16;
0x000219        DD500002                 if POS jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x00021A        E466002F                 r4 = r4 + 1;

 <$M.sbc.calc_bit_allocation.findbitslice_elseif1>
0x00021B        E407003F                 Null = r5 - 1;
0x00021C        DD100002                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif1;
0x00021D        01660002                 r4 = r4 + 2;

 <$M.sbc.calc_bit_allocation.findbitslice_endif1>
0x00021E        03000000                 Null = Null + Null;

 <$M.sbc.calc_bit_allocation.findbitslice_loop2>
0x00021F        0075006F                 r5 = r3 + r4;
0x000220        D1CB0022                 r10 = M[r9 + 34];
0x000221        200700CF                 Null = r5 - r10;
0x000222        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_3>
0x000223        D13B0022                 r1 = M[r9 + 34];
0x000224        2007003F                 Null = r5 - r1;
0x000225        DD100003                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif2;
0x000226        03560000                 r3 = r3 + r4;
0x000227        E444003F                 r2 = r2 - 1;

 <$M.sbc.calc_bit_allocation.findbitslice_endif2>
0x000228        E5F0000A                 do $M.sbc.calc_bit_allocation.distbits_loop;
0x000229        03003900                 Null = Null + Null, r1 = M[I2,1];
0x00022A        2073004F                 r5 = r1 - r2;
0x00022B        01300000                 r1 = Null + 0;
0x00022C        21070002                 Null = r5 - 2;
0x00022D        00370005                 if POS r1 = r5 + Null;
0x00022E        01700010                 r5 = Null + 16;
0x00022F        21030010                 Null = r1 - 16;
0x000230        00370005                 if POS r1 = r5 + Null;
0x000231        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbc.calc_bit_allocation.distbits_loop>
0x000232        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_4>
0x000233        03003400                 Null = Null + Null, r1 = M[I1,0];
0x000234        03007900                 Null = Null + Null, r5 = M[I2,1];
0x000235        21030002                 Null = r1 - 2;
0x000236        DD400006                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x000237        21030010                 Null = r1 - 16;
0x000238        DD500004                 if POS jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x000239        E433002F                 r1 = r1 + 1;
0x00023A        E455002F                 r3 = r3 + 1;
0x00023B        DDF0000A                 jump $M.sbc.calc_bit_allocation.remainingbits_endif;

 <$M.sbc.calc_bit_allocation.remainingbits_elseif>
0x00023C        23740000                 r5 = r5 - r2;
0x00023D        E407003F                 Null = r5 - 1;
0x00023E        DD100007                 if NE jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x00023F        D17B0022                 r5 = M[r9 + 34];
0x000240        23750000                 r5 = r5 - r3;
0x000241        21070002                 Null = r5 - 2;
0x000242        DD400003                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x000243        01300002                 r1 = Null + 2;
0x000244        01550002                 r3 = r3 + 2;

 <$M.sbc.calc_bit_allocation.remainingbits_endif>
0x000245        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x000246        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.corrupt_frame_error>
0x000247        E420002F                 r0 = Null + 1;
0x000248        D52B0036                 M[r9 + 54] = r0;
0x000249        DDF00AA6                 jump $pop_rLink_and_rts;

 <ulpN2ufYQYttgIBglrB//yDsfSzsQkGTAcU7vJN9SjY=>
0x00024A        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024B        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024C        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024D        E1F000E3                 call $cbops_multirate.GetTransferAndUpdateOutput;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024E        00C4000F                 r10 = r2 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024F        DDD00AA0                 if LE jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000250        F3900000                 push r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000251        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000252        E1F000F3                 call $cbops_multirate.GetBuffer;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000253        5040002F                 I4 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000254        50E0003F                 L4 = Null + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000255        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000256        E1F000EF                 call $cbops_multirate.GetBuffer;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000257        5050002F                 I5 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000258        50F0003F                 L5 = Null + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000259        D12A0003                 r0 = M[r8 + 3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025A        DD000003                 if EQ jump KK47+Ovm1NPwX6mGeSM12MiRUdca7UcuYOXUJNw6rxU=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025B        D1720009                 r5 = M[r0 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025C        DDF00013                 jump UPd1FZS+vKMntT6Kdv4jthEj40XadpJdaPYCq6JIQI4=;

 <KK47+Ovm1NPwX6mGeSM12MiRUdca7UcuYOXUJNw6rxU=>
0x00025D        D12A0007                 r0 = M[r8 + 7];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025E        D062000F                 r4 = M[r0 + Null];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025F        D17A0009                 r5 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000260        E430002F                 r1 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000261        2027006F                 r0 = r5 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000262        20200024                 if NEG r0 = Null - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000263        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000265        21023127                 Null = r0 - 12583;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000266        00430004                 if NEG r2 = r1 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000267        21340026                 r1 = r2 - 38;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000268        20440035                 if POS r2 = r2 - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000269        2037006F                 r1 = r5 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026A        2023004F                 r0 = r1 - r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026B        20330025                 if POS r1 = r1 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026C        0023004F                 r0 = r1 + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026D        20330024                 if NEG r1 = r1 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026E        23730000                 r5 = r5 - r1;

 <UPd1FZS+vKMntT6Kdv4jthEj40XadpJdaPYCq6JIQI4=>
0x00026F        D57A0009                 M[r8 + 9] = r5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000270        D12A0005                 r0 = M[r8 + 5];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000271        5000002F                 I0 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000272        51C0000C                 L0 = Null + 12;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000273        51D0000C                 L1 = Null + 12;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000274        D1BA0002                 r9 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000275        01800015                 r6 = Null + 21;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000276        51B00001                 M3 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000277        E1F0000C                 call gdFr9Y4VfOLrCKNzJ6XJMOsUwW89Z3IIa+HLKzzulW8=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000278        4430000F                 r1 = Null + I0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000279        D53A0005                 M[r8 + 5] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027A        51F00000                 L5 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027B        51E00000                 L4 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027C        51C00000                 L0 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027D        51D00000                 L1 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027E        F3940000                 pop r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027F        4430007F                 r1 = Null + I7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000280        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000281        E1F000B9                 call $cbops_multirate.SetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000282        DDF00A6D                 jump $pop_rLink_and_rts;

 <gdFr9Y4VfOLrCKNzJ6XJMOsUwW89Z3IIa+HLKzzulW8=>
0x000283        D12A0004                 r0 = M[r8 + 4];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000284        5132007E                 I3 = r0 + 126;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000285        D16A000A                 r4 = M[r8 + 10];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000286        512A000D                 I2 = r8 + 13;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000287        D17A0009                 r5 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000288        D16A000A                 r4 = M[r8 + 10];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000289        70A0008F                 M2 = Null - r6;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028A        5080008F                 M0 = Null + r6;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028B        CC16008F                 rMAC = r4 * r6 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028C        51700000                 I7 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028D        D12A000B                 r0 = M[r8 + 11];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028E        DD000003                 if EQ jump pY9sM++Lhx6PecJ+hprBw1MMQx26Bvigx/ufk6utw1s=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028F        03000031                 Null = Null + Null, r1 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000290        67CBB100                 r10 = r10 - M3, M[I0,1] = r1;

 <pY9sM++Lhx6PecJ+hprBw1MMQx26Bvigx/ufk6utw1s=>
0x000291        E5F00038                 do 3Yvpty6xuC4I4KpS1nXopKKxMJNrD58weJqbAqiElHE=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000292        8D510018                 r3 = rMAC LSHIFT 24;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000293        8D55007F                 r3 = r3 LSHIFT -1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000294        8D410000                 r2 = rMAC LSHIFT 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000295        5863004F                 I6 = I3 + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000296        6524FFEA                 r0 = -22 - r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000297        7092004F                 M1 = r0 - r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000298        5810000F                 I1 = I0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000299        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029A        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029E        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029F        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A0        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A1        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A2        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A3        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A4        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A5        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A6        79990002                 M1 = M1 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A7        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A8        DD400003                 if NEG jump 8XjNSGe2tsErWGPeBKGRq7kwTjnusV8EqRdPEWivC44=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A9        71980001                 M1 = r6 - 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AA        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <8XjNSGe2tsErWGPeBKGRq7kwTjnusV8EqRdPEWivC44=>
0x0002AB        5863004F                 I6 = I3 + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AC        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AD        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AE        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AF        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B0        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B1        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B3        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B5        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B6        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B7        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B8        AF233800                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B9        CF150051                 rMAC = rMAC * r3 (SS), r3 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BA        FD00007F BD13FFFF        rMAC = rMAC - r1 * 0.99999988079071045 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BC        903100BF                 r1 = rMAC ASHIFT r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BD        226700B7                 r4 = r4 - r5, M[I5,M3] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BE        DD40000A                 if NEG jump VrSYD+NSFnUEg06ARirBv7slJUukvubeAp3Rcak8iw4=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BF        FD000080 01660000        r4 = r4 + -8388608;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C1        0007000F                 Null = r5 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C2        DD400004                 if NEG jump qvNjMS5d0Di8w9y2NsG4QoAYwKO0vKnnLLzhTMX1FQs=;

 <SkTx1D7YTGMOdKH3njxMXwNU9PQA01pWkpb9weRioLs=>
0x0002C3        03005353                 Null = Null + Null, r3 = M[I0,-1], r3 = M[I4,-1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C4        47CB5000                 r10 = r10 + M3, r3 = M[I0,0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C5        DDF00003                 jump VrSYD+NSFnUEg06ARirBv7slJUukvubeAp3Rcak8iw4=;

 <qvNjMS5d0Di8w9y2NsG4QoAYwKO0vKnnLLzhTMX1FQs=>
0x0002C6        66CBD353                 r10 = r10 - M3, M[I0,M3] = r3, r3 = M[I4,M3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C7        DDD00007                 if LE jump zrINqEEone3BJG2dqpffznhhTEjIGkLtLkN76a8TtIw=;

 <VrSYD+NSFnUEg06ARirBv7slJUukvubeAp3Rcak8iw4=>
0x0002C8        CC16D38F                 rMAC = r4 * r6 (SS), M[I0,M3] = r3;

 <3Yvpty6xuC4I4KpS1nXopKKxMJNrD58weJqbAqiElHE=>
0x0002C9        D56A000A                 M[r8 + 10] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CA        509000CF                 M1 = Null + r10;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CB        6420319F                 r0 = Null - M1, r1 = M[I0,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CC        D52A000B                 M[r8 + 11] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CD        DC0D000F                 rts;

 <zrINqEEone3BJG2dqpffznhhTEjIGkLtLkN76a8TtIw=>
0x0002CE        66CBD300                 r10 = r10 - M3, M[I0,M3] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CF        DDF0FFFA                 jump 3Yvpty6xuC4I4KpS1nXopKKxMJNrD58weJqbAqiElHE=;

 <$cbops_multirate.copy>
0x0002D0        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D1        51900001                 M1 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D2        D19A0000                 r7 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D3        F3A00000                 push r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D4        F3900000                 push r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D5        5000009F                 I0 = Null + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D6        514A0003                 I4 = r8 + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D7        02000021                 Null = Null + Null, r0 = M[I4,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D8        00C2000F                 r10 = r0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D9        02000021                 Null = Null + Null, r0 = M[I4,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DA        E5F00007                 do X01z7QV+wLTkTUsDZv9z29y4A0AXaqdbsrPaLVBizXE=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DB        0300A000                 Null = Null + Null, M[I0,0] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DC        E1F009F8                 call $_cbuffer_get_read_address;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DD        0032210F                 r1 = r0 + Null, r0 = M[I0,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DE        0200B100                 Null = Null + Null, M[I0,M1] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DF        E1F009CF                 call $cbuffer.calc_amount_data;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E0        0200A121                 Null = Null + Null, M[I0,M1] = r0, r0 = M[I4,M1];

 <X01z7QV+wLTkTUsDZv9z29y4A0AXaqdbsrPaLVBizXE=>
0x0002E1        02C20021                 r10 = r10 + r0, r0 = M[I4,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E2        E5F00007                 do euyLoBJCoCIBM6lFAK6wf+YGSgaOac2a+shuLnayiug=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E3        0300A000                 Null = Null + Null, M[I0,0] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E4        E1F009F5                 call $_cbuffer_get_write_address;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E5        0032210F                 r1 = r0 + Null, r0 = M[I0,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E6        0200B100                 Null = Null + Null, M[I0,M1] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E7        E1F009B7                 call $cbuffer.calc_amount_space;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E8        0200A121                 Null = Null + Null, M[I0,M1] = r0, r0 = M[I4,M1];

 <euyLoBJCoCIBM6lFAK6wf+YGSgaOac2a+shuLnayiug=>
0x0002E9        02C20021                 r10 = r10 + r0, r0 = M[I4,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EA        E5F00008                 do wqnpQ3s/1MpNxxp9op/L4HtEmy7MsssrrqEK4IBAVFc=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EB        0200A100                 Null = Null + Null, M[I0,M1] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EC        D1320002                 r1 = M[r0 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002ED        D1520001                 r3 = M[r0 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EE        23530000                 r3 = r3 - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EF        0855002D                 if LE r3 = r3 + M[r0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F0        6659B100                 r3 = r3 - M1, M[I0,M1] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F1        0200D121                 Null = Null + Null, M[I0,M1] = r3, r0 = M[I4,M1];

 <wqnpQ3s/1MpNxxp9op/L4HtEmy7MsssrrqEK4IBAVFc=>
0x0002F2        D1AA0002                 r8 = M[r8 + 2];

 <GIWnVTmFJ6qK4N3gh+kG4hmkK86ArXW+SlmFOPRUqy4=>
0x0002F3        D12A0002                 r0 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F4        01AA0003                 r8 = r8 + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F5        F198FFFF                 r7 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F6        D1220001                 r0 = M[r0 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F7        E0020001                 if NE call r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F8        D1AAFFFD                 r8 = M[r8 + -3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F9        E40A002F                 Null = r8 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FA        DD10FFF9                 if NE jump GIWnVTmFJ6qK4N3gh+kG4hmkK86ArXW+SlmFOPRUqy4=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FB        F1A8FFFE                 r8 = M[SP + -0x2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FC        F109FFFF                 I0 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FD        D1CA0003                 r10 = M[r8 + 3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FE        59000002                 I0 = I0 + 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FF        51B00003                 M3 = Null + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000300        0070230F                 r5 = Null + Null, r0 = M[I0,M3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000301        E5F00003                 do jrFP+yzsyQx9OimC8F2imKFmXi3F/w3/UGK+K1UfZi4=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000302        2007002F                 Null = r5 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000303        00722304                 if NEG r5 = r0 + Null, r0 = M[I0,M3];

 <jrFP+yzsyQx9OimC8F2imKFmXi3F/w3/UGK+K1UfZi4=>
0x000304        0007000F                 Null = r5 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000305        DD00001C                 if EQ jump yH+eR/EdN+tJGM5lCCQrTbMUuKq1BERWta6MNc7SFuo=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000306        D1AA0001                 r8 = M[r8 + 1];

 <ZM8z/ZnC5BsyRA6Uk/CtdKqwyV0oKWSFXbOXUSlEH8k=>
0x000307        D12A0002                 r0 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000308        01AA0003                 r8 = r8 + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000309        F198FFFF                 r7 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030A        D1220002                 r0 = M[r0 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030B        E0020001                 if NE call r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030C        D1AAFFFE                 r8 = M[r8 + -2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030D        E40A002F                 Null = r8 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030E        DD10FFF9                 if NE jump ZM8z/ZnC5BsyRA6Uk/CtdKqwyV0oKWSFXbOXUSlEH8k=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030F        F1A8FFFE                 r8 = M[SP + -0x2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000310        F198FFFF                 r7 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000311        51900001                 M1 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000312        511A0003                 I1 = r8 + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000313        8ABB2500                 r9 = r9 XOR r9, r0 = M[I1,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000314        00C2250F                 r10 = r0 + Null, r0 = M[I1,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000315        E5F00005                 do nWysKSSo38pfeT4P9YdzTNIePSX40NUIGI/QNMFKNmc=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000316        002B000F                 r0 = r9 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000317        E1F0000D                 call 9c9yXqSRDOytjSWfSQ6+H8lKqADWCGjftay2J5CcTgo=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000318        E1F009CB                 call $cbuffer.set_read_address;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000319        46B92500                 r9 = r9 + M1, r0 = M[I1,M1];

 <nWysKSSo38pfeT4P9YdzTNIePSX40NUIGI/QNMFKNmc=>
0x00031A        00C2000F                 r10 = r0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031B        E5F00005                 do LfaW9GdKkRZP5wx3yhf9SJsUsTm3QR+wBzlX829rWSM=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031C        002B000F                 r0 = r9 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031D        E1F00007                 call 9c9yXqSRDOytjSWfSQ6+H8lKqADWCGjftay2J5CcTgo=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031E        E1F009C9                 call $cbuffer.set_write_address;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031F        47B90000                 r9 = r9 + M1;

 <LfaW9GdKkRZP5wx3yhf9SJsUsTm3QR+wBzlX829rWSM=>
0x000320        51C00000                 L0 = Null + 0;

 <yH+eR/EdN+tJGM5lCCQrTbMUuKq1BERWta6MNc7SFuo=>
0x000321        F3940000                 pop r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000322        F3A40000                 pop r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000323        DDF009CC                 jump $pop_rLink_and_rts;

 <9c9yXqSRDOytjSWfSQ6+H8lKqADWCGjftay2J5CcTgo=>
0x000324        99420003                 r2 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000325        5024009F                 I2 = r2 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000326        02002900                 Null = Null + Null, r0 = M[I2,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000327        D802000F                 Null = SIGNDET r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000328        DC0D0000                 if EQ rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000329        D1520000                 r3 = M[r0 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032A        50C0395F                 L0 = Null + r3, r1 = M[I2,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032B        5000493F                 I0 = Null + r1, r2 = M[I2,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032C        50A0004F                 M2 = Null + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032D        02004200                 Null = Null + Null, r2 = M[I0,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032E        4430000F                 r1 = Null + I0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032F        DC0D000F                 rts;

 <$cbops_multirate.GetTransferAndUpdateOutput>
0x000330        01590002                 r3 = r7 + 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000331        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000332        99330003                 r1 = r1 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000333        D045002F                 r2 = M[r3 + r0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000334        D445003F                 M[r3 + r1] = r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000335        DC0D000F                 rts;

 <$cbops_multirate.GetTransferAmount>
0x000336        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000337        03290000                 r0 = r0 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000338        D1220002                 r0 = M[r0 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000339        DC0D000F                 rts;

 <$cbops_multirate.SetTransferAmount>
0x00033A        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033B        03290000                 r0 = r0 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033C        D5320002                 M[r0 + 2] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033D        DC0D000F                 rts;

 <$cbops_multirate.SetMinimumTransferAmount>
0x00033E        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033F        03290000                 r0 = r0 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000340        D1520002                 r3 = M[r0 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000341        2003005F                 Null = r1 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000342        00350005                 if POS r1 = r3 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000343        D5320002                 M[r0 + 2] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000344        DC0D000F                 rts;

 <$cbops_multirate.GetBuffer>
0x000345        99420003                 r2 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000346        03490000                 r2 = r2 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000347        D1340000                 r1 = M[r2 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000348        D1240001                 r0 = M[r2 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000349        D803000F                 Null = SIGNDET r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034A        DD000003                 if EQ jump qZaZ7edDPtNdtCDq6v6d9Za+45cuvySlO6Cj6n/dNnA=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034B        D1330000                 r1 = M[r1 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034C        DC0D000F                 rts;

 <qZaZ7edDPtNdtCDq6v6d9Za+45cuvySlO6Cj6n/dNnA=>
0x00034D        E430002F                 r1 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034E        0040000F                 r2 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034F        DC0D000F                 rts;

 <UYGJyLlFDKQCmjDod/i1GJaYlEtzk0GPLUI8/aL1bXM=>
0x000350        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000351        D14A0009                 r2 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000352        DD400006                 if NEG jump U7rrsOAwuq9h+FfBq86fuBJAhL/+qpCUYAu8I1bA5VI=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000353        D12A000A                 r0 = M[r8 + 10];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000354        21020003                 Null = r0 - 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000355        DD50006F                 if POS jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000356        E422002F                 r0 = r0 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000357        D52A000A                 M[r8 + 10] = r0;

 <U7rrsOAwuq9h+FfBq86fuBJAhL/+qpCUYAu8I1bA5VI=>
0x000358        E444002F                 r2 = r2 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000359        D54A0009                 M[r8 + 9] = r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035A        DDF00995                 jump $pop_rLink_and_rts;

 <YQdP0mcT+xAc8QshpJiNxzxkIFzWjVDT0icj0nrGv4A=>
0x00035B        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035C        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035D        E1F0FFD9                 call $cbops_multirate.GetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035E        D1BA0008                 r9 = M[r8 + 8];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035F        0002000F                 Null = r0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000360        DDD00003                 if LE jump /tEqC1ITVpxP+jbBx4OQSFj1YKEk8hoSWXOulnBBdmE=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000361        03B20000                 r9 = r9 + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000362        D50A000A                 M[r8 + 10] = Null;

 </tEqC1ITVpxP+jbBx4OQSFj1YKEk8hoSWXOulnBBdmE=>
0x000363        D12A0009                 r0 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000364        DDD0098B                 if LE jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000365        D5BA0008                 M[r8 + 8] = r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000366        D14A0002                 r2 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000367        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000368        9B340000                 r1 = r1 * r2 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000369        2052003F                 r3 = r0 - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036A        DD400985                 if NEG jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036B        E430003F                 r1 = Null - 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036C        D16A0003                 r4 = M[r8 + 3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036D        9876004F                 r5 = r4 * r2 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036E        0005000F                 Null = r3 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036F        DD00000E                 if EQ jump j31cLDWJ9U34ua9a3WgiobyGL/FhrdiGlcCE9F0ibwk=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000370        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000371        D843000F                 r2 = SIGNDET r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000372        93340000                 r1 = r1 ASHIFT r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000373        FD000020 01100000        rMAC = Null + 2097152;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000375        D9030000                 Div = rMAC / r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000376        9B650000                 r4 = r4 * r3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000377        21440016                 r2 = r2 - 22;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000378        D9300001                 r1 = DivResult;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000379        97630000                 r4 = r4 * r1 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037A        93640000                 r4 = r4 ASHIFT r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037B        93340000                 r1 = r1 ASHIFT r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037C        03760000                 r5 = r5 + r4;

 <j31cLDWJ9U34ua9a3WgiobyGL/FhrdiGlcCE9F0ibwk=>
0x00037D        0067000F                 r4 = r5 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037E        D5BA000B                 M[r8 + 11] = r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037F        001B000F                 rMAC = r9 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000380        D851000F                 r3 = SIGNDET rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000381        21B50002                 r9 = r3 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000382        93EB0000                 rMAC = rMAC ASHIFT r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000383        93650000                 r4 = r4 ASHIFT r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000384        D9060000                 Div = rMAC / r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000385        D15A000C                 r3 = M[r8 + 12];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000386        D1B50A50                 r9 = M[r3 + 2640];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000387        E455002F                 r3 = r3 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000388        D16A0004                 r4 = M[r8 + 4];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000389        2005006F                 Null = r3 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038A        00560005                 if POS r3 = r4 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038B        D55A000C                 M[r8 + 12] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038C        FD00007F 0160FFFF        r4 = Null + 8388607;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038E        203600BF                 r1 = r4 - r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038F        D15A0005                 r3 = M[r8 + 5];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000390        D9200001                 r0 = DivResult;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000391        CC1B002F                 rMAC = r9 * r0 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000392        AC13005F                 rMAC = rMAC + r1 * r3 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000393        0061000F                 r4 = rMAC + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000394        D56A0005                 M[r8 + 5] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000395        2032006F                 r1 = r0 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000396        20300034                 if NEG r1 = Null - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000397        01501062                 r3 = Null + 4194;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000398        2003005F                 Null = r1 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000399        DD400008                 if NEG jump HuvYmuDxOjRX+/8MouEn6HLhGXntfu2sMd92bP51FTA=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039A        D50A000C                 M[r8 + 12] = Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039B        FD000040 01200000        r0 = Null + 4194304;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039D        D52A0005                 M[r8 + 5] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039E        D50A000E                 M[r8 + 14] = Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039F        D50A000D                 M[r8 + 13] = Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A0        DDF00024                 jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;

 <HuvYmuDxOjRX+/8MouEn6HLhGXntfu2sMd92bP51FTA=>
0x0003A1        FD000040 21660000        r4 = r4 - 4194304;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A3        91660001                 r4 = r4 ASHIFT 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A4        FD000006 01506666        r3 = Null + 419430;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A6        03060000                 Null = Null + r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A7        DD500004                 if POS jump 9uhotfq7DzlPwliFeWpFUYzdudHV2S/zUeIEWXM/9Ew=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A8        0006005F                 Null = r4 + r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A9        20600054                 if NEG r4 = Null - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AA        DDF00003                 jump lgWeBoPQ05q6D0DzRmYT+wfKKW4uKJ8BrMGZfwMr8F0=;

 <9uhotfq7DzlPwliFeWpFUYzdudHV2S/zUeIEWXM/9Ew=>
0x0003AB        2006005F                 Null = r4 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AC        00650005                 if POS r4 = r3 + Null;

 <lgWeBoPQ05q6D0DzRmYT+wfKKW4uKJ8BrMGZfwMr8F0=>
0x0003AD        D56A000D                 M[r8 + 13] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AE        9436006F                 r1 = r4 * r4 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AF        23360000                 r1 = r1 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B0        D53A000E                 M[r8 + 14] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B1        D15A000F                 r3 = M[r8 + 15];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B2        D16A0006                 r4 = M[r8 + 6];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B3        E455002F                 r3 = r3 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B4        2006005F                 Null = r4 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B5        DD40000F                 if NEG jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B6        D55A000F                 M[r8 + 15] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B7        81050001                 Null = r3 AND 0x1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B8        DD00000C                 if EQ jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B9        E450002F                 r3 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BA        D16A0005                 r4 = M[r8 + 5];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BB        817600FF                 r5 = r4 AND 0xff;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BC        8D660078                 r4 = r4 LSHIFT -8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BD        D18A000D                 r6 = M[r8 + 13];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BE        812800FF                 r0 = r6 AND 0xff;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BF        8D220008                 r0 = r0 LSHIFT 8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003C0        87720000                 r5 = r5 OR r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003C1        8D880078                 r6 = r6 LSHIFT -8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003C2        01401025                 r2 = Null + 4133;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003C3        E1F00781                 call $message.send_short;

 <DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=>
0x0003C4        D50A0008                 M[r8 + 8] = Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003C5        D12A0007                 r0 = M[r8 + 7];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003C6        65220000                 r0 = 0 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003C7        D52A0009                 M[r8 + 9] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003C8        DDF00927                 jump $pop_rLink_and_rts;

 <$cbops.rate_monitor_op.Initialize>
0x0003C9        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003CA        D53A0003                 M[r8 + 3] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003CB        01200003                 r0 = Null + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003CC        D52A000A                 M[r8 + 10] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003CD        DDF0FFF7                 jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;
...

 <$frame_sync.sco_decode>
0x00043D        F3D00000                 push rLink;

 <$M.frame_sync.sco_decode.jp_check_packet>
0x00043E        D1290002                 r0 = M[r7 + 2];
0x00043F        E1F0086F                 call $cbuffer.calc_amount_data;
0x000440        0002000F                 Null = r0 + Null;
0x000441        DD0008AE                 if EQ jump $pop_rLink_and_rts;
0x000442        D1290002                 r0 = M[r7 + 2];
0x000443        E1F00891                 call $_cbuffer_get_read_address;
0x000444        5000002F                 I0 = Null + r0;
0x000445        50C0003F                 L0 = Null + r1;
0x000446        51900001                 M1 = Null + 1;
0x000447        03007100                 Null = Null + Null, r5 = M[I0,1];
0x000448        4487419F                 r6 = r5 + M1, r2 = M[I0,M1];
0x000449        8D88007F                 r6 = r6 LSHIFT -1;
0x00044A        50B0218F                 M3 = Null + r6, r0 = M[I0,M1];
0x00044B        5840000F                 I4 = I0 + Null;
0x00044C        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x00044D        4420000F                 r0 = Null + I0;
0x00044E        5804000F                 I0 = I4 + Null;
0x00044F        19200AAC                 M[$next_packet_value] = r0 + Null;
0x000450        D5790007                 M[r7 + 7] = r5;
0x000451        81440003                 r2 = r2 AND 0x3;
0x000452        D549000C                 M[r7 + 12] = r2;
0x000453        D1290003                 r0 = M[r7 + 3];
0x000454        E1F0084A                 call $cbuffer.calc_amount_space;
0x000455        D1A90009                 r8 = M[r7 + 9];
0x000456        D13A0000                 r1 = M[r8 + 0];
0x000457        D1AA0003                 r8 = M[r8 + 3];
0x000458        00BA000F                 r9 = r8 + Null;
0x000459        E003000F                 call r1;
0x00045A        D5390008                 M[r7 + 8] = r1;
0x00045B        DD000045                 if EQ jump $M.frame_sync.sco_decode.jp_sco_no_decode;
0x00045C        D149000C                 r2 = M[r7 + 12];
0x00045D        D1A90009                 r8 = M[r7 + 9];
0x00045E        D13A0001                 r1 = M[r8 + 1];
0x00045F        D1AA0003                 r8 = M[r8 + 3];
0x000460        00BA000F                 r9 = r8 + Null;
0x000461        E003000F                 call r1;
0x000462        50C0000F                 L0 = Null + Null;
0x000463        D1290002                 r0 = M[r7 + 2];
0x000464        09300AAC                 r1 = Null + M[$next_packet_value];
0x000465        D5320001                 M[r0 + 1] = r1;
0x000466        D579000C                 M[r7 + 12] = r5;
0x000467        DD40FFD7                 if NEG jump $M.frame_sync.sco_decode.jp_check_packet;
0x000468        51900001                 M1 = Null + 1;
0x000469        D129000F                 r0 = M[r7 + 15];
0x00046A        47290000                 r0 = r0 + M1;
0x00046B        D1390010                 r1 = M[r7 + 16];
0x00046C        D109000C                 Null = M[r7 + 12];
0x00046D        44330091                 if NE r1 = r1 + M1;
0x00046E        D1490008                 r2 = M[r7 + 8];
0x00046F        9883004F                 r6 = r1 * r2 (int);
0x000470        9852004F                 r3 = r0 * r2 (int);
0x000471        D169000D                 r4 = M[r7 + 13];
0x000472        D149000E                 r2 = M[r7 + 14];
0x000473        D1790006                 r5 = M[r7 + 6];
0x000474        2005007F                 Null = r3 - r5;
0x000475        9C680045                 if POS r4 = r6 * r2 (int) (sat);
0x000476        00200005                 if POS r0 = Null + Null;
0x000477        00300005                 if POS r1 = Null + Null;
0x000478        D529000F                 M[r7 + 15] = r0;
0x000479        D5390010                 M[r7 + 16] = r1;
0x00047A        D569000D                 M[r7 + 13] = r4;
0x00047B        D1290005                 r0 = M[r7 + 5];
0x00047C        D1390004                 r1 = M[r7 + 4];
0x00047D        8002003F                 Null = r0 AND r1;
0x00047E        DD00000E                 if EQ jump $M.frame_sync.sco_decode.jp_no_plc;
0x00047F        D139000A                 r1 = M[r7 + 10];
0x000480        DD00FFBE                 if EQ jump $M.frame_sync.sco_decode.jp_check_packet;
0x000481        D1290003                 r0 = M[r7 + 3];
0x000482        D1490008                 r2 = M[r7 + 8];
0x000483        D159000C                 r3 = M[r7 + 12];
0x000484        F3900000                 push r7;
0x000485        D1990011                 r7 = M[r7 + 17];
0x000486        D5290003                 M[r7 + 3] = r0;
0x000487        D5490007                 M[r7 + 7] = r2;
0x000488        D5590008                 M[r7 + 8] = r3;
0x000489        E003000F                 call r1;
0x00048A        F3940000                 pop r7;
0x00048B        DDF0FFB3                 jump $M.frame_sync.sco_decode.jp_check_packet;

 <$M.frame_sync.sco_decode.jp_no_plc>
0x00048C        D1C90008                 r10 = M[r7 + 8];
0x00048D        D1290003                 r0 = M[r7 + 3];
0x00048E        E1F0084B                 call $_cbuffer_get_write_address;
0x00048F        5010002F                 I1 = Null + r0;
0x000490        50D0003F                 L1 = Null + r1;
0x000491        D139000C                 r1 = M[r7 + 12];
0x000492        81030002                 Null = r1 AND 0x2;
0x000493        DD100004                 if NE jump $M.frame_sync.sco_decode.jp_replace;
0x000494        509000CF                 M1 = Null + r10;
0x000495        02002500                 Null = Null + Null, r0 = M[I1,M1];
0x000496        DDF00005                 jump $M.frame_sync.sco_decode.jp_set_output;

 <$M.frame_sync.sco_decode.jp_replace>
0x000497        03002700                 Null = Null + Null, r0 = M[I1,-1];
0x000498        03004500                 Null = Null + Null, r2 = M[I1,1];
0x000499        E5F00002                 do $M.frame_sync.sco_decode.jp_set_output;
0x00049A        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.frame_sync.sco_decode.jp_set_output>
0x00049B        50D0000F                 L1 = Null + Null;
0x00049C        4430001F                 r1 = Null + I1;
0x00049D        D1290003                 r0 = M[r7 + 3];
0x00049E        E1F00849                 call $cbuffer.set_write_address;
0x00049F        DDF0FF9F                 jump $M.frame_sync.sco_decode.jp_check_packet;

 <$M.frame_sync.sco_decode.jp_sco_no_decode>
0x0004A0        50C0000F                 L0 = Null + Null;
0x0004A1        DDF0084E                 jump $pop_rLink_and_rts;

 <$frame_sync.usb_out_mono_copy>
0x0004A2        F3D00000                 push rLink;
0x0004A3        D12A0004                 r0 = M[r8 + 4];
0x0004A4        E452002F                 r3 = r0 + 1;
0x0004A5        00520000                 if EQ r3 = r0 + Null;
0x0004A6        D55A0004                 M[r8 + 4] = r3;
0x0004A7        D12A0001                 r0 = M[r8 + 1];
0x0004A8        8162001F                 r4 = r0 AND 0x1f;
0x0004A9        2166000C                 r4 = r4 - 12;
0x0004AA        0076000F                 r5 = r4 + Null;
0x0004AB        01300066                 r1 = Null + 102;
0x0004AC        01C00009                 r10 = Null + 9;
0x0004AD        65060007                 Null = 7 - r4;
0x0004AE        DD500003                 if POS jump $M.frame_sync.usb_out_mono_copy.lower_port;
0x0004AF        0076003F                 r5 = r4 + r1;
0x0004B0        036C0000                 r4 = r4 + r10;

 <$M.frame_sync.usb_out_mono_copy.lower_port>
0x0004B1        D13609F8                 r1 = M[r4 + 2552];
0x0004B2        01200009                 r0 = Null + 9;
0x0004B3        D527FE73                 M[r5 + -397] = r0;
0x0004B4        D3300000                 r1 = M[r1 + Null];
0x0004B5        09200AAE                 r0 = Null + M[$M.frame_sync.usb_out_mono_copy.last_limit];
0x0004B6        19300AAE                 M[$M.frame_sync.usb_out_mono_copy.last_limit] = r1 + Null;
0x0004B7        2003002F                 Null = r1 - r0;
0x0004B8        DD000003                 if EQ jump $M.frame_sync.usb_out_mono_copy.stall_detected;
0x0004B9        D50A0004                 M[r8 + 4] = Null;
0x0004BA        DDF0000A                 jump $M.frame_sync.usb_out_mono_copy.not_stalled;

 <$M.frame_sync.usb_out_mono_copy.stall_detected>
0x0004BB        21050007                 Null = r3 - 7;
0x0004BC        DD400008                 if NEG jump $M.frame_sync.usb_out_mono_copy.not_stalled;
0x0004BD        DD00002D                 if EQ jump $M.frame_sync.usb_out_mono_copy.purgeport;
0x0004BE        D12A0000                 r0 = M[r8 + 0];
0x0004BF        E1F0081A                 call $_cbuffer_get_write_address;
0x0004C0        0032000F                 r1 = r0 + Null;
0x0004C1        D12A0000                 r0 = M[r8 + 0];
0x0004C2        E1F00821                 call $cbuffer.set_read_address;
0x0004C3        DDF0082C                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_out_mono_copy.not_stalled>
0x0004C4        51800000                 M0 = Null + 0;
0x0004C5        FD0000FF 51003AAE        I0 = Null + -50514;
0x0004C7        D12A0001                 r0 = M[r8 + 1];
0x0004C8        E1F007D6                 call $cbuffer.calc_amount_space;
0x0004C9        8D44007F                 r2 = r2 LSHIFT -1;
0x0004CA        2024002F                 r0 = r2 - r0;
0x0004CB        E422003F                 r0 = r0 - 1;
0x0004CC        D1CA0003                 r10 = M[r8 + 3];
0x0004CD        200200CF                 Null = r0 - r10;
0x0004CE        DD500821                 if POS jump $pop_rLink_and_rts;
0x0004CF        D12A0000                 r0 = M[r8 + 0];
0x0004D0        E1F007DE                 call $cbuffer.calc_amount_data;
0x0004D1        200200CF                 Null = r0 - r10;
0x0004D2        DD40000A                 if NEG jump $M.frame_sync.usb_out_mono_copy.not_enough_buffer_data;
0x0004D3        09000AAF                 Null = Null + M[$M.frame_sync.usb_out_mono_copy.delay_buffer_read];
0x0004D4        DD000003                 if EQ jump $M.frame_sync.usb_out_mono_copy.setup_transfer;
0x0004D5        19000AAF                 M[$M.frame_sync.usb_out_mono_copy.delay_buffer_read] = Null + Null;
0x0004D6        DDF00006                 jump $M.frame_sync.usb_out_mono_copy.not_enough_buffer_data;

 <$M.frame_sync.usb_out_mono_copy.setup_transfer>
0x0004D7        D12A0000                 r0 = M[r8 + 0];
0x0004D8        E1F007FC                 call $_cbuffer_get_read_address;
0x0004D9        5000002F                 I0 = Null + r0;
0x0004DA        50C0003F                 L0 = Null + r1;
0x0004DB        51800001                 M0 = Null + 1;

 <$M.frame_sync.usb_out_mono_copy.not_enough_buffer_data>
0x0004DC        D15A0002                 r3 = M[r8 + 2];
0x0004DD        E5F00004                 do $M.frame_sync.usb_out_mono_copy.loop;
0x0004DE        02003000                 Null = Null + Null, r1 = M[I0,M0];
0x0004DF        93350000                 r1 = r1 ASHIFT r3;
0x0004E0        D536FE23                 M[r4 + -477] = r1;

 <$M.frame_sync.usb_out_mono_copy.loop>
0x0004E1        51C00000                 L0 = Null + 0;
0x0004E2        D12A0001                 r0 = M[r8 + 1];
0x0004E3        E1F00804                 call $cbuffer.set_write_address;
0x0004E4        47080000                 Null = Null + M0;
0x0004E5        DD00080A                 if EQ jump $pop_rLink_and_rts;
0x0004E6        D12A0000                 r0 = M[r8 + 0];
0x0004E7        4430000F                 r1 = Null + I0;
0x0004E8        E1F007FB                 call $cbuffer.set_read_address;
0x0004E9        DDF00806                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_out_mono_copy.purgeport>
0x0004EA        19A00AAF                 M[$M.frame_sync.usb_out_mono_copy.delay_buffer_read] = r8 + Null;
0x0004EB        0900FE33                 Null = Null + M[0xfffe33];
0x0004EC        D12A0001                 r0 = M[r8 + 1];
0x0004ED        E1F007B1                 call $cbuffer.calc_amount_space;
0x0004EE        E4C2002F                 r10 = r0 + 1;
0x0004EF        D12A0003                 r0 = M[r8 + 3];
0x0004F0        03C20000                 r10 = r10 + r0;
0x0004F1        01200000                 r0 = Null + 0;
0x0004F2        E5F00002                 do $M.frame_sync.usb_out_mono_copy.flushport;
0x0004F3        D526FE23                 M[r4 + -477] = r0;

 <$M.frame_sync.usb_out_mono_copy.flushport>
0x0004F4        D12A0001                 r0 = M[r8 + 1];
0x0004F5        E1F007F2                 call $cbuffer.set_write_address;
0x0004F6        DDF007F9                 jump $pop_rLink_and_rts;

 <$sco_timing.SyncClock>
0x0004F7        F3D00000                 push rLink;
0x0004F8        FD0000FF 09A03AAC        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x0004FA        D1730001                 r5 = M[r1 + 1];
0x0004FB        FD0000FF 09203A65        r0 = Null + M[0xff3a65];
0x0004FD        0082007F                 r6 = r0 + r5;
0x0004FE        D12A0017                 r0 = M[r8 + 23];
0x0004FF        23280000                 r0 = r0 - r6;
0x000500        01600271                 r4 = Null + 625;
0x000501        FD000000 CD12346E        rMAC = r0 * 0.0016000270843505859 (SS);
0x000503        8D410000                 r2 = rMAC LSHIFT 0;
0x000504        9B460000                 r2 = r2 * r4 (int);
0x000505        2042004F                 r2 = r0 - r2;
0x000506        91E20080                 rMAC = r0 ASHIFT 0 (LO);
0x000507        D12A0016                 r0 = M[r8 + 22];
0x000508        00400000                 if EQ r2 = Null + Null;
0x000509        D9020000                 Div = rMAC / r0;
0x00050A        21040138                 Null = r2 - 312;
0x00050B        2044006C                 if GT r2 = r2 - r4;
0x00050C        03460000                 r2 = r2 + r4;
0x00050D        03470000                 r2 = r2 + r5;
0x00050E        E1F0047F                 call $timer.schedule_event_at;
0x00050F        D12A0016                 r0 = M[r8 + 22];
0x000510        DD0007DF                 if EQ jump $pop_rLink_and_rts;
0x000511        FD0000FF 09003A65        Null = Null + M[0xff3a65];
0x000513        DD0007DC                 if EQ jump $pop_rLink_and_rts;
0x000514        D9600002                 r4 = DivRemainder;
0x000515        0006000F                 Null = r4 + Null;
0x000516        0066002D                 if LE r4 = r4 + r0;
0x000517        0038006F                 r1 = r6 + r4;
0x000518        D53A0017                 M[r8 + 23] = r1;
0x000519        01660138                 r4 = r4 + 312;
0x00051A        FD000000 CD16346E        rMAC = r4 * 0.0016000270843505859 (SS);
0x00051C        8D410000                 r2 = rMAC LSHIFT 0;
0x00051D        F3400000                 push r2;
0x00051E        29040AAD                 Null = r2 - M[$M.sco_timing.sco_rcv_trigger];
0x00051F        E10000FE                 if EQ call $frame_sync.sco_port_handler;
0x000520        F3440000                 pop r2;
0x000521        E404003F                 Null = r2 - 1;
0x000522        DD1007CD                 if NE jump $pop_rLink_and_rts;
0x000523        D12A0012                 r0 = M[r8 + 18];
0x000524        E1F0041A                 call $cbuffer.get_write_address_and_size.its_a_port;
0x000525        5040002F                 I4 = Null + r0;
0x000526        50E0003F                 L4 = Null + r1;
0x000527        D12A0014                 r0 = M[r8 + 20];
0x000528        E1F007AC                 call $_cbuffer_get_read_address;
0x000529        5000002F                 I0 = Null + r0;
0x00052A        50C0003F                 L0 = Null + r1;
0x00052B        D12A0014                 r0 = M[r8 + 20];
0x00052C        E1F00782                 call $cbuffer.calc_amount_data;
0x00052D        D1CA0015                 r10 = M[r8 + 21];
0x00052E        8D4C007F                 r2 = r10 LSHIFT -1;
0x00052F        D13A0012                 r1 = M[r8 + 18];
0x000530        FD00003C 81332000        r1 = r1 AND 0x3c2000;
0x000532        FD00003C 21032000        Null = r1 - 3940352;
0x000534        00C40000                 if EQ r10 = r2 + Null;
0x000535        200200CF                 Null = r0 - r10;
0x000536        00C20004                 if NEG r10 = r0 + Null;
0x000537        D13A0013                 r1 = M[r8 + 19];
0x000538        E5F00004                 do $M.sco_timing.SyncClock.lp_sco_xmit;
0x000539        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00053A        93230000                 r0 = r0 ASHIFT r1;
0x00053B        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.sco_timing.SyncClock.lp_sco_xmit>
0x00053C        D12A0014                 r0 = M[r8 + 20];
0x00053D        4430000F                 r1 = Null + I0;
0x00053E        E1F007A5                 call $cbuffer.set_read_address;
0x00053F        D12A0012                 r0 = M[r8 + 18];
0x000540        4430004F                 r1 = Null + I4;
0x000541        E1F007A6                 call $cbuffer.set_write_address;
0x000542        50C0000F                 L0 = Null + Null;
0x000543        50E0000F                 L4 = Null + Null;
0x000544        D10A0018                 Null = M[r8 + 24];
0x000545        18900001                 if NE M[r7] = Null + Null;
0x000546        D50A0018                 M[r8 + 24] = Null;
0x000547        DDF007A8                 jump $pop_rLink_and_rts;

 <$sbcenc.analysis_subband_filter>
0x000548        F3D00000                 push rLink;
0x000549        D15B0021                 r3 = M[r9 + 33];
0x00054A        5085005F                 M0 = r3 + r3;
0x00054B        51900001                 M1 = Null + 1;
0x00054C        7CA9008F                 M2 = M1 - M0;
0x00054D        99250008                 r0 = r3 * 8 (int);
0x00054E        78B9002F                 M3 = M1 - r0;
0x00054F        9825007F                 r0 = r3 * r5 (int);
0x000550        0008000F                 Null = r6 + Null;
0x000551        00200000                 if EQ r0 = Null + Null;
0x000552        D16B0014                 r4 = M[r9 + 20];
0x000553        5022006F                 I2 = r0 + r4;
0x000554        016B0011                 r4 = r9 + 17;
0x000555        D027006F                 r0 = M[r5 + r4];
0x000556        5060002F                 I6 = Null + r0;
0x000557        D16B001D                 r4 = M[r9 + 29];
0x000558        51E00050                 L4 = Null + 80;
0x000559        0140FFFC                 r2 = Null + -4;

 <$M.sbcenc.analysis_subband_filter.block_loop_M8>
0x00055A        D12B0015                 r0 = M[r9 + 21];
0x00055B        5000002F                 I0 = Null + r0;
0x00055C        D12B0001                 r0 = M[r9 + 1];
0x00055D        5050002F                 I5 = Null + r0;
0x00055E        5846000F                 I4 = I6 + Null;
0x00055F        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000560        93243500                 r0 = r0 ASHIFT r2, r1 = M[I1,1];
0x000561        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x000562        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x000563        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x000564        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x000565        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x000566        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x000567        933400A3                 r1 = r1 ASHIFT r2, M[I4,-1] = r0;
0x000568        030000B3                 Null = Null + Null, M[I4,-1] = r1;
0x000569        E1F0001B                 call $M.sbcenc.analysis_subband_filter.share_code;
0x00056A        E5F00012                 do $M.sbcenc.analysis_subband_filter.matrix_loop_M8;
0x00056B        CF232D35                 rMAC = r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00056C        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00056D        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00056E        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00056F        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000570        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000571        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000572        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000573        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000574        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000575        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000576        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000577        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000578        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000579        AE232E35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,M2], r1 = M[I5,M1];
0x00057A        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00057B        03009900                 Null = Null + Null, M[I2,1] = rMAC;

 <$M.sbcenc.analysis_subband_filter.matrix_loop_M8>
0x00057C        5B280000                 I2 = I2 + r6;
0x00057D        E466003F                 r4 = r4 - 1;
0x00057E        DD10FFDC                 if NE jump $M.sbcenc.analysis_subband_filter.block_loop_M8;
0x00057F        4420006F                 r0 = Null + I6;
0x000580        016B0011                 r4 = r9 + 17;
0x000581        D427006F                 M[r5 + r4] = r0;
0x000582        51E00000                 L4 = Null + 0;
0x000583        DDF0076C                 jump $pop_rLink_and_rts;

 <$M.sbcenc.analysis_subband_filter.share_code>
0x000584        5864000F                 I6 = I4 + Null;
0x000585        02000021                 Null = Null + Null, r0 = M[I4,M1];
0x000586        D12B0005                 r0 = M[r9 + 5];
0x000587        5030002F                 I3 = Null + r0;
0x000588        44C0008F                 r10 = Null + M0;
0x000589        02003020                 Null = Null + Null, r1 = M[I0,M0], r0 = M[I4,M0];
0x00058A        E5F00007                 do $M.sbcenc.analysis_subband_filter.window_calc_loop_M4;
0x00058B        CE233020                 rMAC = r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x00058C        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x00058D        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x00058E        AE233323                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M3], r0 = M[I4,M3];
0x00058F        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x000590        03009D00                 Null = Null + Null, M[I3,1] = rMAC;

 <$M.sbcenc.analysis_subband_filter.window_calc_loop_M4>
0x000591        D12B0005                 r0 = M[r9 + 5];
0x000592        5030002F                 I3 = Null + r0;
0x000593        00C5000F                 r10 = r3 + Null;
0x000594        03002D35                 Null = Null + Null, r0 = M[I3,1], r1 = M[I5,1];
0x000595        DC0D000F                 rts;

 <$wbsenc.process_frame>
0x000596        F3D00000                 push rLink;
0x000597        092001CF                 r0 = Null + M[$wbs_frame_encode.cbuf_in_ptr];
0x000598        E1F0073C                 call $_cbuffer_get_read_address;
0x000599        5010002F                 I1 = Null + r0;
0x00059A        50D0003F                 L1 = Null + r1;
0x00059B        FD0000FF 19003AAF        M[$wbs_frame_encode.can_idle] = Null + Null;
0x00059D        01800000                 r6 = Null + 0;
0x00059E        01700000                 r5 = Null + 0;
0x00059F        E1F0FFA9                 call $sbcenc.analysis_subband_filter;
0x0005A0        4430001F                 r1 = Null + I1;
0x0005A1        092001CF                 r0 = Null + M[$wbs_frame_encode.cbuf_in_ptr];
0x0005A2        E1F00741                 call $cbuffer.set_read_address;
0x0005A3        51D00000                 L1 = Null + 0;
0x0005A4        E1F00548                 call $sbc.calc_scale_factors;
0x0005A5        092001DC                 r0 = Null + M[$wbs_frame_encode.cbuf_out_ptr];
0x0005A6        E1F00733                 call $_cbuffer_get_write_address;
0x0005A7        5000002F                 I0 = Null + r0;
0x0005A8        50C0003F                 L0 = Null + r1;
0x0005A9        E1F005D6                 call $wbsenc.wbs_pre_proc_func;
0x0005AA        0120000F                 r0 = Null + 15;
0x0005AB        D52B0024                 M[r9 + 36] = r0;
0x0005AC        01200008                 r0 = Null + 8;
0x0005AD        013000AD                 r1 = Null + 173;
0x0005AE        E1F005BC                 call $sbcenc.putbits;
0x0005AF        01300000                 r1 = Null + 0;
0x0005B0        E1F005BA                 call $sbcenc.putbits;
0x0005B1        E1F006B3                 call $sbc.crc_calc;
0x0005B2        01300000                 r1 = Null + 0;
0x0005B3        E1F005B7                 call $sbcenc.putbits;
0x0005B4        E1F006B0                 call $sbc.crc_calc;
0x0005B5        D12B0018                 r0 = M[r9 + 24];
0x0005B6        5010002F                 I1 = Null + r0;
0x0005B7        D12B001F                 r0 = M[r9 + 31];
0x0005B8        D13B0021                 r1 = M[r9 + 33];
0x0005B9        9882003F                 r6 = r0 * r1 (int);
0x0005BA        01200004                 r0 = Null + 4;

 <$M.wbsenc.process_frame.scalefactor_loop>
0x0005BB        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0005BC        E1F006A8                 call $sbc.crc_calc;
0x0005BD        E488003F                 r6 = r6 - 1;
0x0005BE        DD10FFFD                 if NE jump $M.wbsenc.process_frame.scalefactor_loop;
0x0005BF        01200008                 r0 = Null + 8;
0x0005C0        D13B0024                 r1 = M[r9 + 36];
0x0005C1        813300FF                 r1 = r1 AND 0xff;
0x0005C2        E1F005A8                 call $sbcenc.putbits;
0x0005C3        E1F006AE                 call $sbcenc.write_scale_factors;
0x0005C4        E1F0FBF3                 call $sbc.calc_bit_allocation;
0x0005C5        E1F00350                 call $sbcenc.quantize_samples;
0x0005C6        E1F0061E                 call $sbcenc.write_audio_samples;
0x0005C7        01300000                 r1 = Null + 0;
0x0005C8        D12B0010                 r0 = M[r9 + 16];
0x0005C9        8122000F                 r0 = r0 AND 0xf;
0x0005CA        E11005A0                 if NE call $sbcenc.putbits;
0x0005CB        4430000F                 r1 = Null + I0;
0x0005CC        092001DC                 r0 = Null + M[$wbs_frame_encode.cbuf_out_ptr];
0x0005CD        E1F0071A                 call $cbuffer.set_write_address;
0x0005CE        51C00000                 L0 = Null + 0;
0x0005CF        DDF00720                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_downsample>
0x0005D0        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D1        5F380000                 I3 = I3 + M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D2        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D3        F3E20000                 push FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D4        F3A60000                 pop B0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D5        F107000A                 FP = FP + 10;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D6        F3E20000                 push FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D7        F3C60000                 pop B4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D8        F007003F                 FP = FP + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005D9        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005DA        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005DB        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005DC        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005DD        5060003F                 I6 = Null + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005DE        F3210000                 push I2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005DF        70A0386F                 M2 = Null - r4, r1 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E0        9946000A                 r2 = r4 * 10 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E1        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E2        5FB60000                 M3 = M3 + I6;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E3        5EB62800                 M3 = M3 + I6, r0 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E4        5000282F                 I0 = Null + r0, r0 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E5        5040002F                 I4 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E6        51C0000A                 L0 = Null + 10;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E7        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E8        2055005A                 if GE r3 = r3 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005E9        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005EA        004400B4                 if NEG r2 = r2 + r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005EB        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005EC        4422008C                 if GT r0 = r0 + M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005ED        0003000F                 Null = r1 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005EE        00230001                 if NE r0 = r1 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005EF        23C20000                 r10 = r10 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005F0        DD40001E                 if NEG jump dNAWiaSvW0h8ql+yguSATOTwqxKWhZK14MaLb+7V5/E=;

 <pV/Tcolux62ozXBOxxPY6KFjb/2KLZk92JPcn98rXk8=>
0x0005F1        9434006F                 r1 = r2 * r4 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005F2        5876003F                 I7 = I6 + r1;

 <F1zVBQI2iNJ4c1RfbsnxKUmVXv0VyyA1PwWaPI1VVSM=>
0x0005F3        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005F4        E007000F                 call r5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005F5        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005F6        DD10FFFD                 if NE jump F1zVBQI2iNJ4c1RfbsnxKUmVXv0VyyA1PwWaPI1VVSM=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005F7        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005F8        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005F9        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005FA        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005FB        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005FC        7C7B007F                 I7 = M3 - I7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005FD        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005FE        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0005FF        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000600        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000601        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000602        AC13004F                 rMAC = rMAC + r1 * r2 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000603        903100AF                 r1 = rMAC ASHIFT r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000604        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000605        79330003                 I3 = I3 - 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000606        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000607        2055005A                 if GE r3 = r3 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000608        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000609        004400B4                 if NEG r2 = r2 + r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060A        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060B        4422008C                 if GT r0 = r0 + M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060C        23C20000                 r10 = r10 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060D        DD50FFE4                 if POS jump pV/Tcolux62ozXBOxxPY6KFjb/2KLZk92JPcn98rXk8=;

 <dNAWiaSvW0h8ql+yguSATOTwqxKWhZK14MaLb+7V5/E=>
0x00060E        006200CF                 r4 = r0 + r10;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060F        DD000007                 if EQ jump fgB0EhgwLYj/DCF0nbGdHQnxgVX4c2yKGcAJGCOKvJg=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000610        0026000F                 r0 = r4 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000611        206000CF                 r4 = Null - r10;

 <HribFPfKLNG6yRgkSurHysNhCBhPScBalJqAqSpfTss=>
0x000612        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000613        E007000F                 call r5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000614        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000615        DD10FFFD                 if NE jump HribFPfKLNG6yRgkSurHysNhCBhPScBalJqAqSpfTss=;

 <fgB0EhgwLYj/DCF0nbGdHQnxgVX4c2yKGcAJGCOKvJg=>
0x000616        5832000F                 I3 = I2 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000617        F3250000                 pop I2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000618        50C0E80F                 L0 = Null + Null, M[I2,M0] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000619        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061A        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061B        50E0A80F                 L4 = Null + Null, M[I2,M0] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061C        DDF006D3                 jump $pop_rLink_and_rts;

 <$frame_sync.sco_port_handler>
0x00061D        F3D00000                 push rLink;

 <$M.frame_sync.sco_port_handler.jp_do_again>
0x00061E        D12A0000                 r0 = M[r8 + 0];
0x00061F        E1F0068F                 call $cbuffer.calc_amount_data;
0x000620        FD0000FF 19203AAB        M[$sco_port_data] = r0 + Null;
0x000622        DD0006CD                 if EQ jump $pop_rLink_and_rts;
0x000623        D12A0002                 r0 = M[r8 + 2];
0x000624        E1F0067A                 call $cbuffer.calc_amount_space;
0x000625        29020AAB                 Null = r0 - M[$sco_last_packet_size];
0x000626        DD4006C9                 if NEG jump $pop_rLink_and_rts;
0x000627        D12A0000                 r0 = M[r8 + 0];
0x000628        E1F0033E                 call $cbuffer.get_read_address_and_size.its_a_port;
0x000629        0082000F                 r6 = r0 + Null;
0x00062A        D12A0002                 r0 = M[r8 + 2];
0x00062B        E1F006AE                 call $_cbuffer_get_write_address;
0x00062C        5040002F                 I4 = Null + r0;
0x00062D        50E0003F                 L4 = Null + r1;
0x00062E        FD0000FF 09703AAB        r5 = Null + M[$sco_port_data];
0x000630        21070005                 Null = r5 - 5;
0x000631        DD400025                 if NEG jump $M.frame_sync.sco_port_handler.jp_purge;
0x000632        D028000F                 r0 = M[r6 + Null];
0x000633        D058000F                 r3 = M[r6 + Null];
0x000634        21770005                 r5 = r5 - 5;
0x000635        D038000F                 r1 = M[r6 + Null];
0x000636        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x000637        E4B3002F                 r9 = r1 + 1;
0x000638        D068000F                 r4 = M[r6 + Null];
0x000639        030000E1                 Null = Null + Null, M[I4,1] = r4;
0x00063A        D038000F                 r1 = M[r6 + Null];
0x00063B        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x00063C        21025C5C                 Null = r0 - 23644;
0x00063D        DD100019                 if NE jump $M.frame_sync.sco_port_handler.jp_purge;
0x00063E        21C50005                 r10 = r3 - 5;
0x00063F        200700CF                 Null = r5 - r10;
0x000640        DD400016                 if NEG jump $M.frame_sync.sco_port_handler.jp_purge;
0x000641        237C0000                 r5 = r5 - r10;
0x000642        E5F00003                 do $M.frame_sync.sco_port_handler.lp_skip_hdr;
0x000643        D028000F                 r0 = M[r6 + Null];
0x000644        03000000                 Null = Null + Null;

 <$M.frame_sync.sco_port_handler.lp_skip_hdr>
0x000645        91CB007F                 r10 = r9 ASHIFT -1;
0x000646        200700CF                 Null = r5 - r10;
0x000647        DD40000F                 if NEG jump $M.frame_sync.sco_port_handler.jp_purge;
0x000648        237C0000                 r5 = r5 - r10;
0x000649        D12A0001                 r0 = M[r8 + 1];
0x00064A        E1F0031C                 call $cbuffer.get_read_address_and_size.its_a_port;
0x00064B        012C0003                 r0 = r10 + 3;
0x00064C        19200AAB                 M[$sco_last_packet_size] = r0 + Null;
0x00064D        E5F00003                 do $M.frame_sync.sco_port_handler.lp_copy;
0x00064E        D038000F                 r1 = M[r6 + Null];
0x00064F        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.frame_sync.sco_port_handler.lp_copy>
0x000650        50E0000F                 L4 = Null + Null;
0x000651        D12A0002                 r0 = M[r8 + 2];
0x000652        4430004F                 r1 = Null + I4;
0x000653        E1F00694                 call $cbuffer.set_write_address;
0x000654        0900FE33                 Null = Null + M[0xfffe33];
0x000655        DDF0FFC9                 jump $M.frame_sync.sco_port_handler.jp_do_again;

 <$M.frame_sync.sco_port_handler.jp_purge>
0x000656        FD0000FF 09403AAB        r2 = Null + M[$sco_port_data];
0x000658        00C7000F                 r10 = r5 + Null;
0x000659        E5F00003                 do $M.frame_sync.sco_port_handler.lp_purge;
0x00065A        D038000F                 r1 = M[r6 + Null];
0x00065B        03000000                 Null = Null + Null;

 <$M.frame_sync.sco_port_handler.lp_purge>
0x00065C        50E0000F                 L4 = Null + Null;
0x00065D        0900FE33                 Null = Null + M[0xfffe33];
0x00065E        DDF00691                 jump $pop_rLink_and_rts;

 <zS7MSjF5Cle15fOEm2R/ce+d5gR1iFKBDUQ04JIAdGs=>
0x00065F        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000660        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000661        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000662        E1F0FCCE                 call $cbops_multirate.GetTransferAndUpdateOutput;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000663        00C4000F                 r10 = r2 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000664        DDD0068B                 if LE jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000665        F3E20000                 push FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000666        51800001                 M0 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000667        FD00007F 01B0FFFF        r9 = Null + 8388607;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000669        500000AF                 I0 = Null + r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00066A        F3900000                 push r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00066B        F2A02000                 push r8, r0 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00066C        E1F0FCD9                 call $cbops_multirate.GetBuffer;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00066D        5010202F                 I1 = Null + r0, r0 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00066E        50D0603F                 L1 = Null + r1, r4 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00066F        E1F0FCD6                 call $cbops_multirate.GetBuffer;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000670        5050402F                 I5 = Null + r0, r2 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000671        50F0703F                 L5 = Null + r1, r5 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000672        0056000F                 r3 = r4 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000673        DD000027                 if EQ jump LHzis9sSIyQNb4mEOGlzlSb+zK3DlVfnjRJiKM+A7Y0=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000674        016A0010                 r4 = r8 + 16;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000675        F3600000                 push r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000676        F3E60000                 pop FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000677        512A000B                 I2 = r8 + 11;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000678        51350005                 I3 = r3 + 5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000679        D1950004                 r7 = M[r3 + 4];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00067A        DD00000F                 if EQ jump JK96mGzT4IK8ZBzz0ggultS/C7BWL0VQHgJ5tV3VsuM=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00067B        D12A0005                 r0 = M[r8 + 5];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00067C        F1000084                 pushm <r0, r5>;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00067D        F1018020                 pushm <I5, L5>;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00067E        5050002F                 I5 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00067F        50F0000F                 L5 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000680        0070000F                 r5 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000681        512A0007                 I2 = r8 + 7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000682        E009000F                 call r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000683        50D0000F                 L1 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000684        00C9000F                 r10 = r7 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000685        0040000F                 r2 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000686        F1058020                 popm <I5, L5>;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000687        F1040084                 popm <r0, r5>;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000688        5010002F                 I1 = Null + r0;

 <JK96mGzT4IK8ZBzz0ggultS/C7BWL0VQHgJ5tV3VsuM=>
0x000689        02002C00                 Null = Null + Null, r0 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00068A        03000000                 Null = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00068B        E002000F                 call r0;

 <tZ2kzxBZkH5CP2eZaFm7j7MlIdDLpyykNJDMOfLqWd0=>
0x00068C        F3A40000                 pop r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00068D        0039000F                 r1 = r7 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00068E        F3940000                 pop r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00068F        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000690        E1F0FCAA                 call $cbops_multirate.SetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000691        50D0000F                 L1 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000692        50F0000F                 L5 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000693        F3000000                 push Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000694        F1AAFFFF                 B0 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000695        F1BAFFFF                 B1 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000696        F1CAFFFF                 B4 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000697        F3D60000                 pop B5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000698        F3E60000                 pop FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000699        DDF00656                 jump $pop_rLink_and_rts;

 <LHzis9sSIyQNb4mEOGlzlSb+zK3DlVfnjRJiKM+A7Y0=>
0x00069A        009C000F                 r7 = r10 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00069B        03470000                 r2 = r2 + r5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00069C        66C81400                 r10 = r10 - M0, rMAC = M[I1,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00069D        93E40000                 rMAC = rMAC ASHIFT r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00069E        E5F00003                 do 3BX3eEioKBZro9ok5U3oe9k9BIfisebGiGRHblXTbq0=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00069F        02001494                 Null = Null + Null, rMAC = M[I1,M0], M[I5,M0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0006A0        93E40000                 rMAC = rMAC ASHIFT r2;

 <3BX3eEioKBZro9ok5U3oe9k9BIfisebGiGRHblXTbq0=>
0x0006A1        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0006A2        DDF0FFEA                 jump tZ2kzxBZkH5CP2eZaFm7j7MlIdDLpyykNJDMOfLqWd0=;

 <$message.received_service_routine>
0x0006A3        F3D00000                 push rLink;
0x0006A4        51800000                 M0 = Null + 0;
0x0006A5        0920FE1D                 r0 = Null + M[0xfffe1d];
0x0006A6        8132FFF0                 r1 = r0 AND 0xfff0;
0x0006A7        8903FFF0                 Null = r1 XOR 0xfff0;
0x0006A8        DD10001B                 if NE jump $M.message.received_service_routine.non_long_message;
0x0006A9        81020001                 Null = r0 AND 0x1;
0x0006AA        DD000002                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x0006AB        19000AA8                 M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x0006AC        09300AA8                 r1 = Null + M[$message.long_message_size];
0x0006AD        21030052                 Null = r1 - 82;
0x0006AE        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x0006AF        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x0006B0        0940E006                 r2 = Null + M[0xffe006];
0x0006B1        D543097C                 M[r1 + 2428] = r2;
0x0006B2        0940E007                 r2 = Null + M[0xffe007];
0x0006B3        D543097D                 M[r1 + 2429] = r2;
0x0006B4        0940E008                 r2 = Null + M[0xffe008];
0x0006B5        D543097E                 M[r1 + 2430] = r2;
0x0006B6        0940E009                 r2 = Null + M[0xffe009];
0x0006B7        D543097F                 M[r1 + 2431] = r2;
0x0006B8        01330004                 r1 = r1 + 4;
0x0006B9        19300AA8                 M[$message.long_message_size] = r1 + Null;
0x0006BA        81020002                 Null = r0 AND 0x2;
0x0006BB        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x0006BC        0970E001                 r5 = Null + M[0xffe001];
0x0006BD        E477002F                 r5 = r5 + 1;
0x0006BE        1970E001                 M[0xffe001] = r5 + Null;
0x0006BF        DDF00630                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x0006C0        0920097C                 r0 = Null + M[$message.long_message_data];
0x0006C1        8122FFFF                 r0 = r0 AND 0xffff;
0x0006C2        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x0006C3        01C00032                 r10 = Null + 50;
0x0006C4        09300AA6                 r1 = Null + M[$message.last_addr];
0x0006C5        E5F00009                 do $M.message.received_service_routine.loop;
0x0006C6        E403002F                 Null = r1 + 1;
0x0006C7        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x0006C8        D1430003                 r2 = M[r1 + 3];
0x0006C9        8052004F                 r3 = r0 AND r2;
0x0006CA        D1430001                 r2 = M[r1 + 1];
0x0006CB        2005004F                 Null = r3 - r2;
0x0006CC        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x0006CD        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x0006CE        E1F008B3                 call $error;

 <$M.message.received_service_routine.no_handler>
0x0006CF        0970E001                 r5 = Null + M[0xffe001];
0x0006D0        E477002F                 r5 = r5 + 1;
0x0006D1        1970E001                 M[0xffe001] = r5 + Null;
0x0006D2        DDF0061D                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x0006D3        D1730002                 r5 = M[r1 + 2];
0x0006D4        F3700000                 push r5;
0x0006D5        47080000                 Null = Null + M0;
0x0006D6        DD000006                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x0006D7        0032000F                 r1 = r0 + Null;
0x0006D8        0940097D                 r2 = Null + M[0x97d];
0x0006D9        0150097E                 r3 = Null + 2430;
0x0006DA        0120FFFE                 r0 = Null + -2;
0x0006DB        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x0006DC        0930E006                 r1 = Null + M[0xffe006];
0x0006DD        0940E007                 r2 = Null + M[0xffe007];
0x0006DE        0950E008                 r3 = Null + M[0xffe008];
0x0006DF        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x0006E0        0970E001                 r5 = Null + M[0xffe001];
0x0006E1        E477002F                 r5 = r5 + 1;
0x0006E2        1970E001                 M[0xffe001] = r5 + Null;
0x0006E3        F3740000                 pop r5;
0x0006E4        E007000F                 call r5;
0x0006E5        DDF0060A                 jump $pop_rLink_and_rts;

 <$cbuffer.configure_port_message_handler>
0x0006E6        F3D00000                 push rLink;
0x0006E7        2103000C                 Null = r1 - 12;
0x0006E8        E150001F                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x0006E9        D55309EC                 M[r1 + 2540] = r3;
0x0006EA        FD0000FF D543375B        M[r1 + -51365] = r2;
0x0006EC        DD100005                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;

 <$M.cbuffer.configure_port_message_handler.read_port_disconnect>
0x0006ED        01200000                 r0 = Null + 0;
0x0006EE        09D00AA3                 rLink = Null + M[$cbuffer.read_port_disconnect_address];
0x0006EF        E00D0001                 if NE call rLink;
0x0006F0        DDF005FF                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x0006F1        0023000F                 r0 = r1 + Null;
0x0006F2        D144FFFF                 r2 = M[r2 + -1];
0x0006F3        01300040                 r1 = Null + 64;
0x0006F4        8D440078                 r2 = r2 LSHIFT -8;
0x0006F5        8C43004F                 r2 = r1 LSHIFT r2;
0x0006F6        D54209D4                 M[r0 + 2516] = r2;
0x0006F7        E430002F                 r1 = Null + 1;
0x0006F8        0140000D                 r2 = Null + 13;
0x0006F9        2105F000                 Null = r3 - -4096;
0x0006FA        00340004                 if NEG r1 = r2 + Null;
0x0006FB        F1000014                 pushm <r0, r2>;
0x0006FC        01400062                 r2 = Null + 98;
0x0006FD        65020007                 Null = 7 - r0;
0x0006FE        00220044                 if NEG r0 = r0 + r2;
0x0006FF        D532FE7B                 M[r0 + -389] = r1;
0x000700        F1040014                 popm <r0, r2>;
0x000701        0032000F                 r1 = r0 + Null;
0x000702        E420002F                 r0 = Null + 1;
0x000703        FD0000FF 09D03AA2        rLink = Null + M[$cbuffer.read_port_connect_address];
0x000705        E00D0001                 if NE call rLink;
0x000706        DDF005E9                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x000707        D55309EC                 M[r1 + 2540] = r3;
0x000708        FD0000FF D543375B        M[r1 + -51365] = r2;
0x00070A        DD100005                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;

 <$M.cbuffer.configure_port_message_handler.write_port_disconnect>
0x00070B        01200000                 r0 = Null + 0;
0x00070C        09D00AA2                 rLink = Null + M[$cbuffer.write_port_disconnect_address];
0x00070D        E00D0001                 if NE call rLink;
0x00070E        DDF005E1                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x00070F        0023000F                 r0 = r1 + Null;
0x000710        D144FFFF                 r2 = M[r2 + -1];
0x000711        01300040                 r1 = Null + 64;
0x000712        8D440078                 r2 = r2 LSHIFT -8;
0x000713        8C43004F                 r2 = r1 LSHIFT r2;
0x000714        D54209D4                 M[r0 + 2516] = r2;
0x000715        01300009                 r1 = Null + 9;
0x000716        01400005                 r2 = Null + 5;
0x000717        2105F000                 Null = r3 - -4096;
0x000718        00340004                 if NEG r1 = r2 + Null;
0x000719        F1000014                 pushm <r0, r2>;
0x00071A        2122000C                 r0 = r0 - 12;
0x00071B        01400066                 r2 = Null + 102;
0x00071C        65020007                 Null = 7 - r0;
0x00071D        00220044                 if NEG r0 = r0 + r2;
0x00071E        D532FE73                 M[r0 + -397] = r1;
0x00071F        F1040014                 popm <r0, r2>;
0x000720        0032000F                 r1 = r0 + Null;
0x000721        E420002F                 r0 = Null + 1;
0x000722        FD0000FF 09D03AA1        rLink = Null + M[$cbuffer.write_port_connect_address];
0x000724        E00D0001                 if NE call rLink;
0x000725        DDF005CA                 jump $pop_rLink_and_rts;

 <$sbcdec.synthesis_subband_filter>
0x000726        F3D00000                 push rLink;
0x000727        D13B0021                 r1 = M[r9 + 33];
0x000728        5080003F                 M0 = Null + r1;
0x000729        D14B001F                 r2 = M[r9 + 31];
0x00072A        9854003F                 r3 = r2 * r1 (int);
0x00072B        E455003F                 r3 = r3 - 1;
0x00072C        9823007F                 r0 = r1 * r5 (int);
0x00072D        E404003F                 Null = r2 - 1;
0x00072E        00200000                 if EQ r0 = Null + Null;
0x00072F        D16B0014                 r4 = M[r9 + 20];
0x000730        5022006F                 I2 = r0 + r4;
0x000731        012B003C                 r0 = r9 + 60;
0x000732        D027002F                 r0 = M[r5 + r0];
0x000733        5000002F                 I0 = Null + r0;
0x000734        D16B001D                 r4 = M[r9 + 29];
0x000735        51C000A0                 L0 = Null + 160;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M8>
0x000736        D12B0015                 r0 = M[r9 + 21];
0x000737        5040002F                 I4 = Null + r0;
0x000738        D12B002E                 r0 = M[r9 + 46];
0x000739        5050002F                 I5 = Null + r0;
0x00073A        51900001                 M1 = Null + 1;
0x00073B        51A0FFF0                 M2 = Null + -16;
0x00073C        51B0FFF9                 M3 = Null + -7;
0x00073D        4CC8008F                 r10 = M0 + M0;
0x00073E        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x00073F        E5F0000A                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M8;
0x000740        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x000741        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x000742        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x000743        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x000744        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x000745        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x000746        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x000747        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x000748        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M8>
0x000749        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x00074A        5B250000                 I2 = I2 + r3;
0x00074B        51900018                 M1 = Null + 24;
0x00074C        51A0FFB9                 M2 = Null + -71;
0x00074D        51B0FF69                 M3 = Null + -151;
0x00074E        E1F0000A                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x00074F        5190FFD0                 M1 = Null + -48;
0x000750        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x000751        E466003F                 r4 = r4 - 1;
0x000752        DD10FFE4                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M8;
0x000753        4420000F                 r0 = Null + I0;
0x000754        016B003C                 r4 = r9 + 60;
0x000755        D427006F                 M[r5 + r4] = r0;
0x000756        51C00000                 L0 = Null + 0;
0x000757        DDF00598                 jump $pop_rLink_and_rts;

 <$M.sbcdec.synthesis_subband_filter.output_code>
0x000758        44C0008F                 r10 = Null + M0;
0x000759        02002130                 Null = Null + Null, r0 = M[I0,M1], r1 = M[I4,M0];
0x00075A        E5F0000D                 do $M.sbcdec.synthesis_subband_filter.output_loop;
0x00075B        CE232030                 rMAC = r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x00075C        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x00075D        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x00075E        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x00075F        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x000760        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x000761        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x000762        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x000763        AE232332                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M3], r1 = M[I4,M2];
0x000764        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x000765        9D41FFFC                 r2 = rMAC * -4 (int) (sat);
0x000766        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcdec.synthesis_subband_filter.output_loop>
0x000767        DC0D000F                 rts;

 <$iir_2ndStage_upsample>
0x000768        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000769        5F380000                 I3 = I3 + M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00076A        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00076B        F3E20000                 push FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00076C        F3A60000                 pop B0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00076D        F107000A                 FP = FP + 10;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00076E        F3E20000                 push FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00076F        F3C60000                 pop B4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000770        F007003F                 FP = FP + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000771        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000772        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000773        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000774        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000775        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000776        70A0286F                 M2 = Null - r4, r0 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000777        9946000A                 r2 = r4 * 10 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000778        F3210000                 push I2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000779        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00077A        5EB63800                 M3 = M3 + I6, r1 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00077B        5EB64800                 M3 = M3 + I6, r2 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00077C        50002C3F                 I0 = Null + r1, r0 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00077D        50402C4F                 I4 = Null + r2, r0 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00077E        51C0000A                 L0 = Null + 10;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00077F        9845007F                 r2 = r3 * r5 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000780        004400B4                 if NEG r2 = r2 + r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000781        9434006F                 r1 = r2 * r4 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000782        E5F0001C                 do o1VjRmtKRIiwXMpdJpqQmlY5FU18H2M/cuaA5eklg2M=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000783        02001400                 Null = Null + Null, rMAC = M[I1,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000784        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <YNvFGxHdX1dq/xaOioSMs/dn5aFEFhGpJ41M/5Wli+Q=>
0x000785        5876003F                 I7 = I6 + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000786        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000787        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000788        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000789        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00078A        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00078B        7C7B007F                 I7 = M3 - I7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00078C        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00078D        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00078E        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00078F        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000790        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000791        AC13004F                 rMAC = rMAC + r1 * r2 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000792        5823000F                 I2 = I3 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000793        E002000F                 call r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000794        92EA0090                 rMAC = rMAC ASHIFT r8, M[I4,M0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000795        46980094                 r7 = r7 + M0, M[I5,M0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000796        2005006F                 Null = r3 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000797        2055005A                 if GE r3 = r3 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000798        9845007F                 r2 = r3 * r5 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000799        004400B4                 if NEG r2 = r2 + r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00079A        9434006F                 r1 = r2 * r4 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00079B        2007004F                 Null = r5 - r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00079C        DDD0FFE9                 if LE jump YNvFGxHdX1dq/xaOioSMs/dn5aFEFhGpJ41M/5Wli+Q=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00079D        03000000                 Null = Null + Null;

 <o1VjRmtKRIiwXMpdJpqQmlY5FU18H2M/cuaA5eklg2M=>
0x00079E        5832000F                 I3 = I2 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00079F        F3250000                 pop I2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0007A0        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0007A1        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0007A2        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0007A3        50E0000F                 L4 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0007A4        DDF0054B                 jump $pop_rLink_and_rts;

 <$frame_sync.task_scheduler_run>
0x0007A5        0930FE71                 r1 = Null + M[0xfffe71];
0x0007A6        FD0000FF 09603AA5        r4 = Null + M[$interrupt.total_time];
0x0007A8        0980FE4D                 r6 = Null + M[0xfffe4d];
0x0007A9        0120003F                 r0 = Null + 63;
0x0007AA        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.frame_sync.task_scheduler_run.jp_wait>
0x0007AB        D14A0008                 r2 = M[r8 + 8];
0x0007AC        DD00FFFF                 if EQ jump $M.frame_sync.task_scheduler_run.jp_wait;
0x0007AD        1980FE4D                 M[0xfffe4d] = r6 + Null;
0x0007AE        0950FE71                 r3 = Null + M[0xfffe71];
0x0007AF        D12A0005                 r0 = M[r8 + 5];
0x0007B0        2035003F                 r1 = r3 - r1;
0x0007B1        FD0000FF 29663AA5        r4 = r4 - M[$interrupt.total_time];
0x0007B3        03360000                 r1 = r1 + r4;
0x0007B4        03320000                 r1 = r1 + r0;
0x0007B5        D53A0005                 M[r8 + 5] = r1;
0x0007B6        D12A0007                 r0 = M[r8 + 7];
0x0007B7        2075002F                 r5 = r3 - r0;
0x0007B8        FD00000F 01104240        rMAC = Null + 1000000;
0x0007BA        2007001F                 Null = r5 - rMAC;
0x0007BB        DD400011                 if NEG jump $M.frame_sync.task_scheduler_run.jp_mips_done;
0x0007BC        91E1007F                 rMAC = rMAC ASHIFT -1 (MI);
0x0007BD        D9070000                 Div = rMAC / r5;
0x0007BE        2017003F                 rMAC = r5 - r1;
0x0007BF        D17A0006                 r5 = M[r8 + 6];
0x0007C0        D55A0007                 M[r8 + 7] = r3;
0x0007C1        D50A0005                 M[r8 + 5] = Null;
0x0007C2        D50A0006                 M[r8 + 6] = Null;
0x0007C3        D9500001                 r3 = DivResult;
0x0007C4        9415001F                 rMAC = r3 * rMAC (frac);
0x0007C5        9475007F                 r5 = r3 * r5 (frac);
0x0007C6        FD000001 01500625        r3 = Null + 67109;
0x0007C8        97150000                 rMAC = rMAC * r3 (frac);
0x0007C9        97750000                 r5 = r5 * r3 (frac);
0x0007CA        D51A0003                 M[r8 + 3] = rMAC;
0x0007CB        D57A0004                 M[r8 + 4] = r5;

 <$M.frame_sync.task_scheduler_run.jp_mips_done>
0x0007CC        D844000F                 r2 = SIGNDET r2;
0x0007CD        8D540001                 r3 = r2 LSHIFT 1;
0x0007CE        01550009                 r3 = r3 + 9;
0x0007CF        D05A005F                 r3 = M[r8 + r3];
0x0007D0        FD0000BF 0160FFFF        r4 = Null + -4194305;
0x0007D2        2040004F                 r2 = Null - r2;
0x0007D3        9046004F                 r2 = r4 ASHIFT r2;
0x0007D4        F3D00000                 push rLink;
0x0007D5        E1F004F1                 call $block_interrupts;
0x0007D6        D16A0008                 r4 = M[r8 + 8];
0x0007D7        83640000                 r4 = r4 AND r2;
0x0007D8        D56A0008                 M[r8 + 8] = r4;
0x0007D9        E1F004DD                 call $interrupt.unblock;
0x0007DA        E005000F                 call r3;
0x0007DB        DDF00514                 jump $pop_rLink_and_rts;

 <$sco_params_handler>
0x0007DC        51900001                 M1 = Null + 1;
0x0007DD        FD0000FF 09A03AAC        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x0007DF        D1350005                 r1 = M[r3 + 5];
0x0007E0        D1450006                 r2 = M[r3 + 6];
0x0007E1        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x0007E2        811100FF                 rMAC = rMAC AND 0xff;
0x0007E3        991104E2                 rMAC = rMAC * 1250 (int);
0x0007E4        8D330010                 r1 = r1 LSHIFT 16;
0x0007E5        8144FFFF                 r2 = r2 AND 0xffff;
0x0007E6        03430000                 r2 = r2 + r1;
0x0007E7        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x0007E9        8D810016                 r6 = rMAC LSHIFT 22;
0x0007EA        D1350007                 r1 = M[r3 + 7];
0x0007EB        23830000                 r6 = r6 - r1;
0x0007EC        D1450008                 r2 = M[r3 + 8];
0x0007ED        D1950001                 r7 = M[r3 + 1];
0x0007EE        03430000                 r2 = r2 + r1;
0x0007EF        FD000000 CD14346E        rMAC = r2 * 0.0016000270843505859 (SS);
0x0007F1        8D410000                 r2 = rMAC LSHIFT 0;
0x0007F2        2004009F                 Null = r2 - r7;
0x0007F3        20440095                 if POS r2 = r2 - r7;
0x0007F4        FD0000FF 19403AAD        M[$M.sco_timing.rcv_proc_trigger] = r2 + Null;
0x0007F6        20490041                 if NE r2 = r7 - r2;
0x0007F7        67490000                 r2 = r2 - M1;
0x0007F8        4440009D                 if LE r2 = Null + M1;
0x0007F9        19400AAD                 M[$M.sco_timing.sco_rcv_trigger] = r2 + Null;
0x0007FA        D1250003                 r0 = M[r3 + 3];
0x0007FB        D52A0015                 M[r8 + 21] = r0;
0x0007FC        D14A0019                 r2 = M[r8 + 25];
0x0007FD        18420001                 if NE M[r2] = r0 + Null;
0x0007FE        D17A0016                 r5 = M[r8 + 22];
0x0007FF        D1950001                 r7 = M[r3 + 1];
0x000800        99990271                 r7 = r7 * 625 (int);
0x000801        D59A0016                 M[r8 + 22] = r7;
0x000802        D13A0017                 r1 = M[r8 + 23];
0x000803        D58A0017                 M[r8 + 23] = r6;
0x000804        0007000F                 Null = r5 + Null;
0x000805        DD00000A                 if EQ jump $M.sco_timing.sco_params_handler.jp_force_reset;
0x000806        23380000                 r1 = r1 - r6;
0x000807        DC0D0000                 if EQ rts;
0x000808        91E30080                 rMAC = r1 ASHIFT 0 (LO);
0x000809        D9090000                 Div = rMAC / r7;
0x00080A        D9600002                 r4 = DivRemainder;
0x00080B        03000000                 Null = Null + Null;
0x00080C        20600064                 if NEG r4 = Null - r4;
0x00080D        21060138                 Null = r4 - 312;
0x00080E        DC0D0004                 if NEG rts;

 <$M.sco_timing.sco_params_handler.jp_force_reset>
0x00080F        D59A0018                 M[r8 + 24] = r7;
0x000810        DC0D000F                 rts;

 <$flash.copy_to_dm_24>
0x000811        F3D00000                 push rLink;
0x000812        0082000F                 r6 = r0 + Null;
0x000813        81730001                 r5 = r1 AND 0x1;
0x000814        9163007F                 r4 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.page_loop>
0x000815        0028000F                 r0 = r6 + Null;
0x000816        99360003                 r1 = r4 * 3 (int);
0x000817        F3300000                 push r1;
0x000818        E1F004A6                 call $flash.map_page_into_dm;
0x000819        5010002F                 I1 = Null + r0;
0x00081A        00C6000F                 r10 = r4 + Null;
0x00081B        F3240000                 pop r0;
0x00081C        2002003F                 Null = r0 - r1;
0x00081D        DD000005                 if EQ jump $M.flash.copy_to_dm_24.read_values;
0x00081E        99330002                 r1 = r1 * 2 (int);
0x00081F        FD00002A 9533AAAB        r1 = r1 * 0.33333337306976318 (frac);
0x000821        91C3007F                 r10 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.read_values>
0x000822        236C0000                 r4 = r4 - r10;
0x000823        992C0003                 r0 = r10 * 3 (int);
0x000824        03820000                 r6 = r6 + r0;
0x000825        E5F0000B                 do $M.flash.copy_to_dm_24.loop;
0x000826        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000827        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000828        8D220008                 r0 = r0 LSHIFT 8;
0x000829        8D530078                 r3 = r1 LSHIFT -8;
0x00082A        815500FF                 r3 = r3 AND 0xff;
0x00082B        87522500                 r3 = r3 OR r0, r0 = M[I1,1];
0x00082C        8122FFFF                 r0 = r0 AND 0xffff;
0x00082D        8D330010                 r1 = r1 LSHIFT 16;
0x00082E        0323D100                 r0 = r0 + r1, M[I0,1] = r3;
0x00082F        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm_24.loop>
0x000830        0006000F                 Null = r4 + Null;
0x000831        DD10FFE4                 if NE jump $M.flash.copy_to_dm_24.page_loop;
0x000832        0007000F                 Null = r5 + Null;
0x000833        DD0004BC                 if EQ jump $pop_rLink_and_rts;
0x000834        0028000F                 r0 = r6 + Null;
0x000835        01300002                 r1 = Null + 2;
0x000836        E1F00488                 call $flash.map_page_into_dm;
0x000837        5010002F                 I1 = Null + r0;
0x000838        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000839        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00083A        8D220008                 r0 = r0 LSHIFT 8;
0x00083B        8D330078                 r1 = r1 LSHIFT -8;
0x00083C        813300FF                 r1 = r1 AND 0xff;
0x00083D        8423002F                 r0 = r1 OR r0;
0x00083E        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x00083F        DDF004B0                 jump $pop_rLink_and_rts;

 <$wall_clock.message_handler>
0x000840        F3D00000                 push rLink;
0x000841        E455002F                 r3 = r3 + 1;
0x000842        01C00007                 r10 = Null + 7;
0x000843        FD0000FF 09803AAA        r6 = Null + M[$wall_clock.last_addr];
0x000845        E5F00014                 do $M.wall_clock.message_handler.loop;
0x000846        E408002F                 Null = r6 + 1;
0x000847        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x000848        D1280001                 r0 = M[r6 + 1];
0x000849        D135FFFF                 r1 = M[r3 + -1];
0x00084A        813300FF                 r1 = r1 AND 0xff;
0x00084B        2002003F                 Null = r0 - r1;
0x00084C        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x00084D        D1280002                 r0 = M[r6 + 2];
0x00084E        2802005F                 Null = r0 - M[r3];
0x00084F        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x000850        D1280003                 r0 = M[r6 + 3];
0x000851        D1350001                 r1 = M[r3 + 1];
0x000852        2002003F                 Null = r0 - r1;
0x000853        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x000854        D1280004                 r0 = M[r6 + 4];
0x000855        D1350002                 r1 = M[r3 + 2];
0x000856        2002003F                 Null = r0 - r1;
0x000857        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x000858        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x000859        E1F00728                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x00085A        DDF00495                 jump $pop_rLink_and_rts;

 <$M.wall_clock.message_handler.found>
0x00085B        D1350003                 r1 = M[r3 + 3];
0x00085C        D1450004                 r2 = M[r3 + 4];
0x00085D        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x00085E        811100FF                 rMAC = rMAC AND 0xff;
0x00085F        991104E2                 rMAC = rMAC * 1250 (int);
0x000860        8D330010                 r1 = r1 LSHIFT 16;
0x000861        8144FFFF                 r2 = r2 AND 0xffff;
0x000862        03430000                 r2 = r2 + r1;
0x000863        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x000865        8D410016                 r2 = rMAC LSHIFT 22;
0x000866        D1650006                 r4 = M[r3 + 6];
0x000867        D1550005                 r3 = M[r3 + 5];
0x000868        8D550010                 r3 = r3 LSHIFT 16;
0x000869        8166FFFF                 r4 = r4 AND 0xffff;
0x00086A        03650000                 r4 = r4 + r3;
0x00086B        23460000                 r2 = r2 - r4;
0x00086C        D5480005                 M[r6 + 5] = r2;
0x00086D        D1280006                 r0 = M[r6 + 6];
0x00086E        E0020001                 if NE call r0;
0x00086F        DDF00480                 jump $pop_rLink_and_rts;

 <$message.private.try_to_send_message>
0x000870        F3D00000                 push rLink;
0x000871        E1F00455                 call $block_interrupts;
0x000872        0920E000                 r0 = Null + M[0xffe000];
0x000873        FD0000FF 29223AA7        r0 = r0 - M[$message.last_seq_sent];
0x000875        8102FFFF                 Null = r0 AND 0xffff;
0x000876        DD100019                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x000877        FD0000FF 09303AA6        r1 = Null + M[$message.queue_read_ptr];
0x000879        D123090F                 r0 = M[r1 + 2319];
0x00087A        1920E002                 M[0xffe002] = r0 + Null;
0x00087B        D1230910                 r0 = M[r1 + 2320];
0x00087C        1920E003                 M[0xffe003] = r0 + Null;
0x00087D        D1230911                 r0 = M[r1 + 2321];
0x00087E        1920E004                 M[0xffe004] = r0 + Null;
0x00087F        D1230912                 r0 = M[r1 + 2322];
0x000880        1920E005                 M[0xffe005] = r0 + Null;
0x000881        FD0000FF 09203AA7        r0 = Null + M[$message.last_seq_sent];
0x000883        E422002F                 r0 = r0 + 1;
0x000884        FD0000FF 19203AA7        M[$message.last_seq_sent] = r0 + Null;
0x000886        D123090E                 r0 = M[r1 + 2318];
0x000887        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x000888        01330005                 r1 = r1 + 5;
0x000889        2103006E                 Null = r1 - 110;
0x00088A        00300000                 if EQ r1 = Null + Null;
0x00088B        FD0000FF 19303AA6        M[$message.queue_read_ptr] = r1 + Null;
0x00088D        29030AA7                 Null = r1 - M[$message.queue_write_ptr];
0x00088E        DD000009                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x00088F        FD0000FF 094035FF        r2 = Null + M[0xff35ff];
0x000891        E1F002C5                 call $timer.cancel_event;
0x000892        FD0000FF 013035FC        r1 = Null + -51716;
0x000894        014003E8                 r2 = Null + 1000;
0x000895        01500870                 r3 = Null + 2160;
0x000896        E1F00455                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x000897        E1F0041F                 call $interrupt.unblock;
0x000898        DDF00457                 jump $pop_rLink_and_rts;

 <$sbcdec.sample_reconstruction>
0x000899        01700080                 r5 = Null + 128;
0x00089A        D1AB0030                 r8 = M[r9 + 48];
0x00089B        21AA0002                 r8 = r8 - 2;
0x00089C        D13B0014                 r1 = M[r9 + 20];
0x00089D        5000003F                 I0 = Null + r1;
0x00089E        D13B001B                 r1 = M[r9 + 27];
0x00089F        5010003F                 I1 = Null + r1;
0x0008A0        D13B0018                 r1 = M[r9 + 24];
0x0008A1        5020003F                 I2 = Null + r1;
0x0008A2        D19B001F                 r7 = M[r9 + 31];
0x0008A3        D13B0021                 r1 = M[r9 + 33];
0x0008A4        9B390000                 r1 = r1 * r7 (int);
0x0008A5        5080003F                 M0 = Null + r1;
0x0008A6        70A0003F                 M2 = Null - r1;
0x0008A7        50B3003F                 M3 = r1 + r1;
0x0008A8        D14B001D                 r2 = M[r9 + 29];
0x0008A9        9843004F                 r2 = r1 * r2 (int);
0x0008AA        7090004F                 M1 = Null - r2;
0x0008AB        59990001                 M1 = M1 + 1;

 <$M.sbcdec.sample_reconstruction.chan_loop>
0x0008AC        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcdec.sample_reconstruction.subband_loop>
0x0008AD        D1CB001D                 r10 = M[r9 + 29];
0x0008AE        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0008AF        03034900                 Null = Null + r1, r2 = M[I2,1];
0x0008B0        DD00000F                 if EQ jump $M.sbcdec.sample_reconstruction.zero_sample;
0x0008B1        E444002F                 r2 = r2 + 1;
0x0008B2        D05A003F                 r3 = M[r8 + r1];
0x0008B3        2034003F                 r1 = r2 - r1;
0x0008B4        9067004F                 r4 = r5 ASHIFT r2;
0x0008B5        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0008B6        E5F00007                 do $M.sbcdec.sample_reconstruction.block_loop;
0x0008B7        8D220008                 r0 = r0 LSHIFT 8;
0x0008B8        01220080                 r0 = r0 + 128;
0x0008B9        C012005F                 rMAC = r0 * r3 (UU);
0x0008BA        8C21003F                 r0 = rMAC LSHIFT r1;
0x0008BB        2012226F                 rMAC = r0 - r4, r0 = M[I0,M2];
0x0008BC        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.sbcdec.sample_reconstruction.block_loop>
0x0008BD        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x0008BE        DDF00003                 jump $M.sbcdec.sample_reconstruction.done_block_loop;

 <$M.sbcdec.sample_reconstruction.zero_sample>
0x0008BF        E5F00002                 do $M.sbcdec.sample_reconstruction.done_block_loop;
0x0008C0        0200B000                 Null = Null + Null, M[I0,M0] = r1;

 <$M.sbcdec.sample_reconstruction.done_block_loop>
0x0008C1        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x0008C2        E488003F                 r6 = r6 - 1;
0x0008C3        DD10FFEA                 if NE jump $M.sbcdec.sample_reconstruction.subband_loop;
0x0008C4        E499003F                 r7 = r7 - 1;
0x0008C5        DD10FFE7                 if NE jump $M.sbcdec.sample_reconstruction.chan_loop;
0x0008C6        DC0D000F                 rts;

 <Cmhz3n9tB93fzfXyHcj55uhoUtWptgsBgyfYarBYbZ4=>
0x0008C7        D14A0002                 r2 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008C8        DD0003C0                 if EQ jump $cbops.copy_op.amount_to_use;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008C9        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008CA        51800001                 M0 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008CB        5020004F                 I2 = Null + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008CC        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008CD        E1F0FA69                 call $cbops_multirate.GetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008CE        8A446800                 r2 = r2 XOR r2, r4 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008CF        9816782F                 rMAC = r4 * r0 (int), r5 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D0        AC17002F                 rMAC = rMAC + r5 * r0 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D1        67180000                 rMAC = rMAC - M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D2        00100004                 if NEG rMAC = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D3        0031000F                 r1 = rMAC + Null;
0x0008D4        02002800                 Null = Null + Null, r0 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D5        D16A0006                 r4 = M[r8 + 6];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D6        9812586F                 rMAC = r0 * r4 (int), r3 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D7        AC15006F                 rMAC = rMAC + r3 * r4 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D8        DD000005                 if EQ jump wsTl3zJzPx5R8IdSEsvNfVSCTICdwYj70l0wKQUUwHM=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008D9        67180000                 rMAC = rMAC - M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008DA        00100004                 if NEG rMAC = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008DB        2003001F                 Null = r1 - rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008DC        00310005                 if POS r1 = rMAC + Null;

 <wsTl3zJzPx5R8IdSEsvNfVSCTICdwYj70l0wKQUUwHM=>
0x0008DD        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008DE        E1F0FA60                 call $cbops_multirate.SetMinimumTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008DF        D10A000F                 Null = M[r8 + 15];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E0        DD10040F                 if NE jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E1        D15A0002                 r3 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E2        D55A000F                 M[r8 + 15] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E3        016A0010                 r4 = r8 + 16;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E4        512A000B                 I2 = r8 + 11;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E5        51350005                 I3 = r3 + 5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E6        D1050004                 Null = M[r3 + 4];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E7        DD000003                 if EQ jump a1V4zT+6mStDGYX/CrTN8WNIOB9tzzPnTuLWTmFwUNA=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E8        512A0007                 I2 = r8 + 7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008E9        E1F0021B                 call $reset_iir_resampler;

 <a1V4zT+6mStDGYX/CrTN8WNIOB9tzzPnTuLWTmFwUNA=>
0x0008EA        5F380000                 I3 = I3 + M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008EB        E1F00219                 call $reset_iir_resampler;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008EC        50C0000F                 L0 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0008ED        DDF00402                 jump $pop_rLink_and_rts;

 <$sco_timing.PortConnected>
0x0008EE        FD0000FF 09A03AAC        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x0008F0        DC0D0000                 if EQ rts;
0x0008F1        D12A0012                 r0 = M[r8 + 18];
0x0008F2        8122001F                 r0 = r0 AND 0x1f;
0x0008F3        2003002F                 Null = r1 - r0;
0x0008F4        DC0D0001                 if NE rts;
0x0008F5        F3D00000                 push rLink;
0x0008F6        D50A0016                 M[r8 + 22] = Null;
0x0008F7        FD000000 01408018        r2 = Null + 32792;
0x0008F9        8153001F                 r3 = r1 AND 0x1f;
0x0008FA        F3500000                 push r3;
0x0008FB        E1F00249                 call $message.send_short;
0x0008FC        FD000000 01408014        r2 = Null + 32788;
0x0008FE        F3540000                 pop r3;
0x0008FF        E1F00245                 call $message.send_short;
0x000900        DDF003EF                 jump $pop_rLink_and_rts;

 <$sco_timing.PortDisConnected>
0x000901        FD0000FF 09A03AAC        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x000903        DC0D0000                 if EQ rts;
0x000904        D12A0012                 r0 = M[r8 + 18];
0x000905        8122001F                 r0 = r0 AND 0x1f;
0x000906        2003002F                 Null = r1 - r0;
0x000907        DC0D0001                 if NE rts;

 <$sco_timing.ScoDisconnect>
0x000908        F3D00000                 push rLink;
0x000909        FD0000FF 01303A60        r1 = Null + -50592;
0x00090B        D1030000                 Null = M[r1 + 0];
0x00090C        E1100187                 if NE call $wall_clock.disable;
0x00090D        FD0000FF 01303A60        r1 = Null + -50592;
0x00090F        D5030000                 M[r1 + 0] = Null;
0x000910        D5030005                 M[r1 + 5] = Null;
0x000911        FD0000FF 09A03AAC        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x000913        D50A0016                 M[r8 + 22] = Null;
0x000914        DDF003DB                 jump $pop_rLink_and_rts;

 <$sbcenc.quantize_samples>
0x000915        D14B0006                 r2 = M[r9 + 6];
0x000916        E444003F                 r2 = r2 - 1;
0x000917        D12B0014                 r0 = M[r9 + 20];
0x000918        5010002F                 I1 = Null + r0;
0x000919        D12B001B                 r0 = M[r9 + 27];
0x00091A        5020002F                 I2 = Null + r0;
0x00091B        D12B0018                 r0 = M[r9 + 24];
0x00091C        5030002F                 I3 = Null + r0;
0x00091D        D1AB001F                 r8 = M[r9 + 31];
0x00091E        D19B0021                 r7 = M[r9 + 33];
0x00091F        982A009F                 r0 = r8 * r7 (int);
0x000920        5080002F                 M0 = Null + r0;
0x000921        70A0002F                 M2 = Null - r0;
0x000922        50B2002F                 M3 = r0 + r0;
0x000923        D13B001D                 r1 = M[r9 + 29];
0x000924        9832003F                 r1 = r0 * r1 (int);
0x000925        75930001                 M1 = 1 - r1;

 <$M.sbcenc.quantize_samples.chan_loop>
0x000926        D19B0021                 r7 = M[r9 + 33];

 <$M.sbcenc.quantize_samples.subband_loop>
0x000927        D1CB001D                 r10 = M[r9 + 29];
0x000928        03002900                 Null = Null + Null, r0 = M[I2,1];
0x000929        03026D00                 Null = Null + r0, r4 = M[I3,1];
0x00092A        DD00000C                 if EQ jump $M.sbcenc.quantize_samples.zero_sample;
0x00092B        ED760080                 r5 = 0x80 ASHIFT r4;
0x00092C        65660008                 r4 = 8 - r4;
0x00092D        D084002F                 r6 = M[r2 + r0];
0x00092E        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x00092F        03370000                 r1 = r1 + r5;
0x000930        E5F00004                 do $M.sbcenc.quantize_samples.block_loop;
0x000931        CC13008F                 rMAC = r1 * r6 (SS);
0x000932        92E63600                 rMAC = rMAC ASHIFT r4, r1 = M[I1,M2];
0x000933        02379700                 r1 = r1 + r5, M[I1,M3] = rMAC;

 <$M.sbcenc.quantize_samples.block_loop>
0x000934        5F1A0000                 I1 = I1 + M2;
0x000935        DDF00003                 jump $M.sbcenc.quantize_samples.block_loop_done;

 <$M.sbcenc.quantize_samples.zero_sample>
0x000936        E5F00002                 do $M.sbcenc.quantize_samples.block_loop_done;
0x000937        0200A400                 Null = Null + Null, M[I1,M0] = r0;

 <$M.sbcenc.quantize_samples.block_loop_done>
0x000938        02002500                 Null = Null + Null, r0 = M[I1,M1];
0x000939        E499003F                 r7 = r7 - 1;
0x00093A        DD10FFED                 if NE jump $M.sbcenc.quantize_samples.subband_loop;
0x00093B        E4AA003F                 r8 = r8 - 1;
0x00093C        DD10FFEA                 if NE jump $M.sbcenc.quantize_samples.chan_loop;
0x00093D        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x00093E        8132001F                 r1 = r0 AND 0x1f;
0x00093F        2133000C                 r1 = r1 - 12;
0x000940        F1000030                 pushm <r2, r3>;
0x000941        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x000943        DD00001A                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x000944        01400066                 r2 = Null + 102;
0x000945        65030007                 Null = 7 - r1;
0x000946        00330044                 if NEG r1 = r1 + r2;
0x000947        D153FE73                 r3 = M[r1 + -397];
0x000948        FD000030 81420000        r2 = r0 AND 0x300000;
0x00094A        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x00094B        8155FFFB                 r3 = r3 AND 0xfffb;
0x00094C        8D44006B                 r2 = r2 LSHIFT -21;
0x00094D        8D440002                 r2 = r2 LSHIFT 2;
0x00094E        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x00094F        FD000003 81428000        r2 = r0 AND 0x38000;
0x000951        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x000952        8155FFFC                 r3 = r3 AND 0xfffc;
0x000953        8D440070                 r2 = r2 LSHIFT -16;
0x000954        8D440000                 r2 = r2 LSHIFT 0;
0x000955        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x000956        81426000                 r2 = r0 AND 0x6000;
0x000957        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x000958        8155FFF7                 r3 = r3 AND 0xfff7;
0x000959        8D440072                 r2 = r2 LSHIFT -14;
0x00095A        8D440003                 r2 = r2 LSHIFT 3;
0x00095B        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x00095C        D553FE73                 M[r1 + -397] = r3;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x00095D        8132001F                 r1 = r0 AND 0x1f;
0x00095E        2133000C                 r1 = r1 - 12;
0x00095F        01400009                 r2 = Null + 9;
0x000960        65030007                 Null = 7 - r1;
0x000961        00330044                 if NEG r1 = r1 + r2;
0x000962        F1040030                 popm <r2, r3>;
0x000963        0123FE23                 r0 = r1 + -477;
0x000964        E430002F                 r1 = Null + 1;
0x000965        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x000966        8132001F                 r1 = r0 AND 0x1f;
0x000967        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x000969        DD00001D                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x00096A        F1000030                 pushm <r2, r3>;
0x00096B        01400062                 r2 = Null + 98;
0x00096C        65030007                 Null = 7 - r1;
0x00096D        00330044                 if NEG r1 = r1 + r2;
0x00096E        D153FE7B                 r3 = M[r1 + -389];
0x00096F        FD000030 81420000        r2 = r0 AND 0x300000;
0x000971        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x000972        8155FFFB                 r3 = r3 AND 0xfffb;
0x000973        8D44006B                 r2 = r2 LSHIFT -21;
0x000974        8D440002                 r2 = r2 LSHIFT 2;
0x000975        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x000976        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x000978        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x000979        8155FFF7                 r3 = r3 AND 0xfff7;
0x00097A        8D44006D                 r2 = r2 LSHIFT -19;
0x00097B        8D440003                 r2 = r2 LSHIFT 3;
0x00097C        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x00097D        FD000003 81428000        r2 = r0 AND 0x38000;
0x00097F        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x000980        8155FFFC                 r3 = r3 AND 0xfffc;
0x000981        8D440070                 r2 = r2 LSHIFT -16;
0x000982        8D440000                 r2 = r2 LSHIFT 0;
0x000983        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x000984        D553FE7B                 M[r1 + -389] = r3;
0x000985        F1040030                 popm <r2, r3>;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x000986        8122001F                 r0 = r0 AND 0x1f;
0x000987        01300005                 r1 = Null + 5;
0x000988        65020007                 Null = 7 - r0;
0x000989        00220034                 if NEG r0 = r0 + r1;
0x00098A        0122FE2B                 r0 = r0 + -469;
0x00098B        E430002F                 r1 = Null + 1;
0x00098C        DC0D000F                 rts;

 <$timer.schedule_event_at>
0x00098D        F3D00000                 push rLink;
0x00098E        E1F00338                 call $block_interrupts;
0x00098F        01C00032                 r10 = Null + 50;
0x000990        01600AAA                 r4 = Null + 2730;
0x000991        09200AAA                 r0 = Null + M[$timer.last_addr];
0x000992        E5F00008                 do $M.timer.schedule_event_at.loop;
0x000993        E402002F                 Null = r0 + 1;
0x000994        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x000995        D1720001                 r5 = M[r0 + 1];
0x000996        2004007F                 Null = r2 - r5;
0x000997        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x000998        0062000F                 r4 = r0 + Null;
0x000999        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x00099A        E1F005E7                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x00099B        D5360000                 M[r4 + 0] = r1;
0x00099C        D5230000                 M[r1 + 0] = r0;
0x00099D        D5430001                 M[r1 + 1] = r2;
0x00099E        D5530002                 M[r1 + 2] = r3;
0x00099F        FD0000FF 09503AA9        r3 = Null + M[$timer.id];
0x0009A1        D5530003                 M[r1 + 3] = r3;
0x0009A2        E425002F                 r0 = r3 + 1;
0x0009A3        20200050                 if EQ r0 = Null - r3;
0x0009A4        FD0000FF 19203AA9        M[$timer.id] = r0 + Null;
0x0009A6        0900FE1F                 Null = Null + M[0xfffe1f];
0x0009A7        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x0009A8        2904FE21                 Null = r2 - M[0xfffe21];
0x0009A9        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x0009AA        1940FE21                 M[0xfffe21] = r2 + Null;
0x0009AB        E420002F                 r0 = Null + 1;
0x0009AC        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x0009AD        E1F00309                 call $interrupt.unblock;
0x0009AE        DDF00341                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x0009AF        8132001F                 r1 = r0 AND 0x1f;
0x0009B0        2133000C                 r1 = r1 - 12;
0x0009B1        D14309F8                 r2 = M[r1 + 2552];
0x0009B2        00200000                 if EQ r0 = Null + Null;
0x0009B3        DC0D0000                 if EQ rts;
0x0009B4        F3500000                 push r3;
0x0009B5        D054000F                 r3 = M[r2 + Null];
0x0009B6        FD0000FF D1433767        r2 = M[r1 + -51353];
0x0009B8        D3400000                 r2 = M[r2 + Null];
0x0009B9        23540000                 r3 = r3 - r2;
0x0009BA        D14309E0                 r2 = M[r1 + 2528];
0x0009BB        E434003F                 r1 = r2 - 1;
0x0009BC        8035003F                 r1 = r3 AND r1;
0x0009BD        00340000                 if EQ r1 = r2 + Null;
0x0009BE        E433003F                 r1 = r1 - 1;
0x0009BF        F3540000                 pop r3;
0x0009C0        FD000003 81228000        r0 = r0 AND 0x38000;
0x0009C2        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x0009C3        FD000001 21028000        Null = r0 - 98304;
0x0009C5        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x0009C6        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x0009C7        FD000002 21028000        Null = r0 - 163840;
0x0009C9        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x0009CA        9123007E                 r0 = r1 ASHIFT -2;
0x0009CB        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x0009CC        E423003F                 r0 = r1 - 1;
0x0009CD        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x0009CE        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x0009CF        0023000F                 r0 = r1 + Null;
0x0009D0        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x0009D1        9123007F                 r0 = r1 ASHIFT -1;
0x0009D2        DC0D000F                 rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x0009D3        8132001F                 r1 = r0 AND 0x1f;
0x0009D4        D14309EC                 r2 = M[r1 + 2540];
0x0009D5        00200000                 if EQ r0 = Null + Null;
0x0009D6        DC0D0000                 if EQ rts;
0x0009D7        F3200000                 push r0;
0x0009D8        D3400000                 r2 = M[r2 + Null];
0x0009D9        FD0000FF D123375B        r0 = M[r1 + -51365];
0x0009DB        D3200000                 r0 = M[r0 + Null];
0x0009DC        2024002F                 r0 = r2 - r0;
0x0009DD        D14309D4                 r2 = M[r1 + 2516];
0x0009DE        E434003F                 r1 = r2 - 1;
0x0009DF        8032003F                 r1 = r0 AND r1;

 <$cbuffer.calc_amount_data.convert_size>
0x0009E0        F3240000                 pop r0;

 <$M.cbuffer.calc_amount_data.its_a_port.convert>
0x0009E1        FD000003 81228000        r0 = r0 AND 0x38000;
0x0009E3        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x0009E4        FD000001 21028000        Null = r0 - 98304;
0x0009E6        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x0009E7        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x0009E8        FD000002 21028000        Null = r0 - 163840;
0x0009EA        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x0009EB        9123007E                 r0 = r1 ASHIFT -2;
0x0009EC        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x0009ED        E423003F                 r0 = r1 - 1;
0x0009EE        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x0009EF        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x0009F0        0023000F                 r0 = r1 + Null;
0x0009F1        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x0009F2        9123007F                 r0 = r1 ASHIFT -1;
0x0009F3        DC0D000F                 rts;
...

 <$pskey.result_message_handler>
0x000A14        FD000000 21028008        Null = r0 - 32776;
0x000A16        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x000A17        D035000F                 r1 = M[r3 + Null];
0x000A18        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x000A19        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x000A1A        FD0000FF 19003AA8        M[$pskey.request_in_progress] = Null + Null;
0x000A1C        01700AA9                 r5 = Null + 2729;
0x000A1D        09200AA9                 r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x000A1E        D1620001                 r4 = M[r0 + 1];
0x000A1F        2003006F                 Null = r1 - r4;
0x000A20        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x000A21        0072000F                 r5 = r0 + Null;
0x000A22        D1220000                 r0 = M[r0 + 0];
0x000A23        E402002F                 Null = r0 + 1;
0x000A24        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x000A25        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x000A26        F3D00000                 push rLink;
0x000A27        D1620000                 r4 = M[r0 + 0];
0x000A28        D5670000                 M[r5 + 0] = r4;
0x000A29        D1D20002                 rLink = M[r0 + 2];
0x000A2A        E00D000F                 call rLink;
0x000A2B        09300AA9                 r1 = Null + M[$pskey.last_addr];
0x000A2C        E403002F                 Null = r1 + 1;
0x000A2D        E110001F                 if NE call $pskey.private.send_request;
0x000A2E        DDF002C1                 jump $pop_rLink_and_rts;

 <7EcaOJ2/BhnxFBUb4clGQzy1iq1+aJGMeTYoePkdUgM=>
0x000A2F        01300019                 r1 = Null + 25;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A30        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3>
0x000A31        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A32        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A33        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A34        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A35        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A36        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A37        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A38        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A39        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A3A        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A3B        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A3C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A3D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A3E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A3F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A40        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A41        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A42        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A43        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A44        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A45        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A46        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A47        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A48        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A49        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A4A        93E30000                 rMAC = rMAC ASHIFT r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A4B        DC0D000F                 rts;

 <$pskey.private.send_request>
0x000A4C        FD0000FF 09003AA8        Null = Null + M[$pskey.request_in_progress];
0x000A4E        DC0D0001                 if NE rts;
0x000A4F        F3D00000                 push rLink;
0x000A50        09400A7F                 r2 = Null + M[0xa7f];
0x000A51        E1F00105                 call $timer.cancel_event;
0x000A52        E1F0027B                 call $message.send_queue_space;
0x000A53        21020005                 Null = r0 - 5;
0x000A54        DD400009                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x000A55        09300AA9                 r1 = Null + M[$pskey.last_addr];
0x000A56        85408006                 r2 = Null OR 0x8006;
0x000A57        D1530001                 r3 = M[r1 + 1];
0x000A58        E1F000EC                 call $message.send_short;
0x000A59        E420002F                 r0 = Null + 1;
0x000A5A        FD0000FF 19203AA8        M[$pskey.request_in_progress] = r0 + Null;
0x000A5C        DDF00293                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x000A5D        01300A7C                 r1 = Null + 2684;
0x000A5E        01402710                 r2 = Null + 10000;
0x000A5F        01500A4C                 r3 = Null + 2636;
0x000A60        E1F0028B                 call $timer.schedule_event_in;
0x000A61        DDF0028E                 jump $pop_rLink_and_rts;

 <$sbcdec.get1byte>
0x000A62        01200008                 r0 = Null + 8;
0x000A63        DDF00006                 jump $sbcdec.getbits;

 <$sbcdec.get4bits>
0x000A64        01200004                 r0 = Null + 4;
0x000A65        DDF00004                 jump $sbcdec.getbits;

 <$sbcdec.get2bits>
0x000A66        01200002                 r0 = Null + 2;
0x000A67        DDF00002                 jump $sbcdec.getbits;

 <$sbcdec.get1bit>
0x000A68        E420002F                 r0 = Null + 1;

 <$sbcdec.getbits>
0x000A69        D15B0031                 r3 = M[r9 + 49];
0x000A6A        D3520000                 r3 = M[r3 + r0];
0x000A6B        D14B003B                 r2 = M[r9 + 59];
0x000A6C        2042004F                 r2 = r0 - r2;
0x000A6D        DDC00007                 if GT jump $M.sbcdec.getbits.anotherword;
0x000A6E        03003000                 Null = Null + Null, r1 = M[I0,0];
0x000A6F        8F340000                 r1 = r1 LSHIFT r2;
0x000A70        83350000                 r1 = r1 AND r3;
0x000A71        2040004F                 r2 = Null - r2;
0x000A72        D54B003B                 M[r9 + 59] = r2;
0x000A73        DC0D000F                 rts;

 <$M.sbcdec.getbits.anotherword>
0x000A74        03003100                 Null = Null + Null, r1 = M[I0,1];
0x000A75        8F340000                 r1 = r1 LSHIFT r2;
0x000A76        83355000                 r1 = r1 AND r3, r3 = M[I0,0];
0x000A77        21440010                 r2 = r2 - 16;
0x000A78        8F540000                 r3 = r3 LSHIFT r2;
0x000A79        03350000                 r1 = r1 + r3;
0x000A7A        2040004F                 r2 = Null - r2;
0x000A7B        D54B003B                 M[r9 + 59] = r2;
0x000A7C        DC0D000F                 rts;

 <$frame_sync.sco_encode>
0x000A7D        F3D00000                 push rLink;
0x000A7E        FD0000FF 09303AAC        r1 = Null + M[$M.sco_timing.sco_data_ptr];
0x000A80        D193001A                 r7 = M[r1 + 26];
0x000A81        D1A30014                 r8 = M[r1 + 20];
0x000A82        D123001D                 r0 = M[r1 + 29];
0x000A83        E0020001                 if NE call r0;

 <$M.sco_encode.jp_repeat>
0x000A84        FD0000FF 09903AAC        r7 = Null + M[$M.sco_timing.sco_data_ptr];
0x000A86        D129001A                 r0 = M[r7 + 26];
0x000A87        E1F00227                 call $cbuffer.calc_amount_data;
0x000A88        D139001B                 r1 = M[r7 + 27];
0x000A89        2002003F                 Null = r0 - r1;
0x000A8A        DD400265                 if NEG jump $pop_rLink_and_rts;
0x000A8B        D1290014                 r0 = M[r7 + 20];
0x000A8C        E1F00212                 call $cbuffer.calc_amount_space;
0x000A8D        D139001C                 r1 = M[r7 + 28];
0x000A8E        2002003F                 Null = r0 - r1;
0x000A8F        DD400260                 if NEG jump $pop_rLink_and_rts;
0x000A90        D129001E                 r0 = M[r7 + 30];
0x000A91        E002000F                 call r0;
0x000A92        DDF0FFF2                 jump $M.sco_encode.jp_repeat;

 <$wall_clock.disable>
0x000A93        F3D00000                 push rLink;
0x000A94        E1F00232                 call $block_interrupts;
0x000A95        01C00007                 r10 = Null + 7;
0x000A96        FD0000FF 01203AAA        r0 = Null + -50518;
0x000A98        FD0000FF 09403AAA        r2 = Null + M[$wall_clock.last_addr];
0x000A9A        E5F00007                 do $M.wall_clock.disable.loop;
0x000A9B        E404002F                 Null = r2 + 1;
0x000A9C        DD000005                 if EQ jump $M.wall_clock.disable.loop;
0x000A9D        2004003F                 Null = r2 - r1;
0x000A9E        DD000004                 if EQ jump $M.wall_clock.disable.delete_this_entry;
0x000A9F        0024000F                 r0 = r2 + Null;
0x000AA0        D1440000                 r2 = M[r2 + 0];

 <$M.wall_clock.disable.loop>
0x000AA1        DDF00003                 jump $M.wall_clock.disable.entry_removed;

 <$M.wall_clock.disable.delete_this_entry>
0x000AA2        D1430000                 r2 = M[r1 + 0];
0x000AA3        D5420000                 M[r0 + 0] = r2;

 <$M.wall_clock.disable.entry_removed>
0x000AA4        D143000A                 r2 = M[r1 + 10];
0x000AA5        E1F000B1                 call $timer.cancel_event;
0x000AA6        E1F00210                 call $interrupt.unblock;
0x000AA7        DDF00248                 jump $pop_rLink_and_rts;

 <$frame_sync.update_streams_ind>
0x000AA8        F3D00000                 push rLink;
0x000AA9        51900001                 M1 = Null + 1;
0x000AAA        E1F0021C                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x000AAB        D0B9000F                 r9 = M[r7 + Null];
0x000AAC        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x000AAD        D14B0006                 r2 = M[r9 + 6];
0x000AAE        D12B0000                 r0 = M[r9 + 0];
0x000AAF        D1320000                 r1 = M[r0 + 0];
0x000AB0        D16B0003                 r4 = M[r9 + 3];
0x000AB1        50D0003F                 L1 = Null + r1;
0x000AB2        E004000F                 call r2;
0x000AB3        5080006F                 M0 = Null + r4;
0x000AB4        D042000F                 r2 = M[r0 + Null];
0x000AB5        5010004F                 I1 = Null + r2;
0x000AB6        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000AB7        4440001F                 r2 = Null + I1;
0x000AB8        1824000F                 M[r0] = r2 + Null;
0x000AB9        E499002F                 r7 = r7 + 1;
0x000ABA        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x000ABB        E1F001FB                 call $interrupt.unblock;
0x000ABC        50D0000F                 L1 = Null + Null;
0x000ABD        DDF00232                 jump $pop_rLink_and_rts;

 <$timer.service_routine>
0x000ABE        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x000ABF        09300AAA                 r1 = Null + M[$timer.last_addr];
0x000AC0        E403002F                 Null = r1 + 1;
0x000AC1        DD000011                 if EQ jump $M.timer.service_routine.no_more_timers;
0x000AC2        D1230001                 r0 = M[r1 + 1];
0x000AC3        2942FE71                 r2 = r0 - M[0xfffe71];
0x000AC4        21040000                 Null = r2 - 0;
0x000AC5        DDC00008                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x000AC6        D1D30002                 rLink = M[r1 + 2];
0x000AC7        D1230003                 r0 = M[r1 + 3];
0x000AC8        D5030003                 M[r1 + 3] = Null;
0x000AC9        D1430000                 r2 = M[r1 + 0];
0x000ACA        19400AAA                 M[$timer.last_addr] = r2 + Null;
0x000ACB        E00D000F                 call rLink;
0x000ACC        DDF0FFF3                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x000ACD        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000ACE        1920FE21                 M[0xfffe21] = r0 + Null;
0x000ACF        E450002F                 r3 = Null + 1;
0x000AD0        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x000AD1        DDF0021E                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x000AD2        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000AD3        DDF0021C                 jump $pop_rLink_and_rts;

 <$frame_sync.analyze_stream_ind>
0x000AD4        D5CB0008                 M[r9 + 8] = r10;
0x000AD5        D14B000A                 r2 = M[r9 + 10];
0x000AD6        200400CF                 Null = r2 - r10;
0x000AD7        004C0005                 if POS r2 = r10 + Null;
0x000AD8        D15B000B                 r3 = M[r9 + 11];
0x000AD9        200500CF                 Null = r3 - r10;
0x000ADA        005C0004                 if NEG r3 = r10 + Null;
0x000ADB        D1CB0007                 r10 = M[r9 + 7];
0x000ADC        67C90000                 r10 = r10 - M1;
0x000ADD        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x000ADE        D54B000A                 M[r9 + 10] = r2;
0x000ADF        D55B000B                 M[r9 + 11] = r3;
0x000AE0        D5CB0007                 M[r9 + 7] = r10;
0x000AE1        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x000AE2        D50B000B                 M[r9 + 11] = Null;
0x000AE3        D56B000A                 M[r9 + 10] = r4;
0x000AE4        D1CB0004                 r10 = M[r9 + 4];
0x000AE5        23540000                 r3 = r3 - r2;
0x000AE6        035C0000                 r3 = r3 + r10;
0x000AE7        00500004                 if NEG r3 = Null + Null;
0x000AE8        D55B0009                 M[r9 + 9] = r3;
0x000AE9        01C00078                 r10 = Null + 120;
0x000AEA        D5CB0007                 M[r9 + 7] = r10;
0x000AEB        DC0D000F                 rts;

 <$sbc.calc_scale_factors>
0x000AEC        D16B0018                 r4 = M[r9 + 24];
0x000AED        5010006F                 I1 = Null + r4;
0x000AEE        D16B0014                 r4 = M[r9 + 20];
0x000AEF        5000006F                 I0 = Null + r4;
0x000AF0        D16B001F                 r4 = M[r9 + 31];
0x000AF1        D17B0021                 r5 = M[r9 + 33];
0x000AF2        D18B001D                 r6 = M[r9 + 29];
0x000AF3        9B670000                 r4 = r4 * r5 (int);
0x000AF4        5080006F                 M0 = Null + r4;
0x000AF5        9826008F                 r0 = r4 * r6 (int);
0x000AF6        75920001                 M1 = 1 - r0;
0x000AF7        01400010                 r2 = Null + 16;
0x000AF8        E488003F                 r6 = r6 - 1;
0x000AF9        00C8000F                 r10 = r6 + Null;
0x000AFA        51A00001                 M2 = Null + 1;

 <$M.sbc.calc_scale_factors.chan_subband_loop>
0x000AFB        0034200F                 r1 = r2 + Null, r0 = M[I0,M0];
0x000AFC        E5F00002                 do $M.sbc.calc_scale_factors.block_loop;
0x000AFD        DA322000                 r1 = BLKSIGNDET r0, r0 = M[I0,M0];

 <$M.sbc.calc_scale_factors.block_loop>
0x000AFE        DB320000                 r1 = BLKSIGNDET r0;
0x000AFF        2034213F                 r1 = r2 - r1, r0 = M[I0,M1];
0x000B00        00C8B60F                 r10 = r6 + Null, M[I1,M2] = r1;
0x000B01        E466003F                 r4 = r4 - 1;
0x000B02        DD10FFF9                 if NE jump $M.sbc.calc_scale_factors.chan_subband_loop;
0x000B03        DC0D000F                 rts;

 <$reset_iir_resampler>
0x000B04        0200C800                 Null = Null + Null, M[I2,M0] = r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B05        02005C00                 Null = Null + Null, r3 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B06        02002C00                 Null = Null + Null, r0 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B07        0200C800                 Null = Null + Null, M[I2,M0] = r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B08        0200E800                 Null = Null + Null, M[I2,M0] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B09        5000006F                 I0 = Null + r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B0A        00C5000F                 r10 = r3 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B0B        03650000                 r4 = r4 + r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B0C        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B0D        03620000                 r4 = r4 + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B0E        E5F00002                 do MB6glZIH5Sapay5ynsJj0TsF8LY53+/z4ry0ORqo0Lc=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B0F        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <MB6glZIH5Sapay5ynsJj0TsF8LY53+/z4ry0ORqo0Lc=>
0x000B10        59330004                 I3 = I3 + 4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B11        00C2000F                 r10 = r0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B12        DC0D0000                 if EQ rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B13        59330002                 I3 = I3 + 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B14        F2D03C00                 push rLink, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B15        21330002                 r1 = r1 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B16        E003000F                 call r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B17        5B330000                 I3 = I3 + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B18        E5F00002                 do 03vUYV5czIhPHTLKF96SQC9J3H+LEgbvP+nQF+jFgCY=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B19        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <03vUYV5czIhPHTLKF96SQC9J3H+LEgbvP+nQF+jFgCY=>
0x000B1A        DDF001D5                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_streams_ind>
0x000B1B        F3D00000                 push rLink;
0x000B1C        E1F001AA                 call $block_interrupts;
0x000B1D        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x000B1E        D0B9000F                 r9 = M[r7 + Null];
0x000B1F        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x000B20        D15B0005                 r3 = M[r9 + 5];
0x000B21        D12B0000                 r0 = M[r9 + 0];
0x000B22        D1320000                 r1 = M[r0 + 0];
0x000B23        D1820001                 r6 = M[r0 + 1];
0x000B24        D1A20002                 r8 = M[r0 + 2];
0x000B25        50D0003F                 L1 = Null + r1;
0x000B26        D16B0003                 r4 = M[r9 + 3];
0x000B27        D56B0002                 M[r9 + 2] = r4;
0x000B28        E005000F                 call r3;
0x000B29        D58B0001                 M[r9 + 1] = r6;
0x000B2A        E499002F                 r7 = r7 + 1;
0x000B2B        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x000B2C        E1F0018A                 call $interrupt.unblock;
0x000B2D        50D0000F                 L1 = Null + Null;
0x000B2E        DDF001C1                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x000B2F        F3D00000                 push rLink;
0x000B30        D1820002                 r6 = M[r0 + 2];
0x000B31        D1A20001                 r8 = M[r0 + 1];
0x000B32        20C800AF                 r10 = r6 - r8;
0x000B33        00CC0034                 if NEG r10 = r10 + r1;
0x000B34        E1F0FFA0                 call $frame_sync.analyze_stream_ind;
0x000B35        D15B0008                 r3 = M[r9 + 8];
0x000B36        D14B0009                 r2 = M[r9 + 9];
0x000B37        23540000                 r3 = r3 - r2;
0x000B38        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x000B39        D14B0004                 r2 = M[r9 + 4];
0x000B3A        9144007F                 r2 = r2 ASHIFT -1;
0x000B3B        03540000                 r3 = r3 + r2;
0x000B3C        2006005F                 Null = r4 - r3;
0x000B3D        00560004                 if NEG r3 = r4 + Null;
0x000B3E        D14B000C                 r2 = M[r9 + 12];
0x000B3F        23450000                 r2 = r2 - r3;
0x000B40        D54B000C                 M[r9 + 12] = r2;
0x000B41        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x000B42        01220002                 r0 = r0 + 2;
0x000B43        DDF001AC                 jump $pop_rLink_and_rts;

 <$message.send_short>
0x000B44        F3D00000                 push rLink;
0x000B45        E1F00181                 call $block_interrupts;
0x000B46        09300AA7                 r1 = Null + M[$message.queue_write_ptr];
0x000B47        01230005                 r0 = r1 + 5;
0x000B48        2102006E                 Null = r0 - 110;
0x000B49        00200000                 if EQ r0 = Null + Null;
0x000B4A        FD0000FF 29023AA6        Null = r0 - M[$message.queue_read_ptr];
0x000B4C        DD000008                 if EQ jump $M.message.send_short.all_done;
0x000B4D        19200AA7                 M[$message.queue_write_ptr] = r0 + Null;
0x000B4E        D543090E                 M[r1 + 2318] = r2;
0x000B4F        D553090F                 M[r1 + 2319] = r3;
0x000B50        D5630910                 M[r1 + 2320] = r4;
0x000B51        D5730911                 M[r1 + 2321] = r5;
0x000B52        D5830912                 M[r1 + 2322] = r6;
0x000B53        E1F0FD1D                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x000B54        E1F00162                 call $interrupt.unblock;
0x000B55        DDF0019A                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x000B56        F3D00000                 push rLink;
0x000B57        E1F0016F                 call $block_interrupts;
0x000B58        01C00032                 r10 = Null + 50;
0x000B59        01600AAA                 r4 = Null + 2730;
0x000B5A        09200AAA                 r0 = Null + M[$timer.last_addr];
0x000B5B        E5F00008                 do $M.timer.cancel_event.loop;
0x000B5C        E402002F                 Null = r0 + 1;
0x000B5D        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x000B5E        D1720003                 r5 = M[r0 + 3];
0x000B5F        2004007F                 Null = r2 - r5;
0x000B60        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x000B61        0062000F                 r4 = r0 + Null;
0x000B62        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x000B63        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x000B64        D1320000                 r1 = M[r0 + 0];
0x000B65        D5360000                 M[r4 + 0] = r1;
0x000B66        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x000B67        E1F0014F                 call $interrupt.unblock;
0x000B68        DDF00187                 jump $pop_rLink_and_rts;

 <$sbcenc.putbits_external>
0x000B69        D1B70004                 r9 = M[r5 + 4];

 <$sbcenc.putbits>
0x000B6A        D14B0010                 r2 = M[r9 + 16];
0x000B6B        23420000                 r2 = r2 - r0;
0x000B6C        DDD00007                 if LE jump $M.sbcenc.putbits.anotherword;
0x000B6D        8C53004F                 r3 = r1 LSHIFT r2;
0x000B6E        D54B0010                 M[r9 + 16] = r2;
0x000B6F        D14B000F                 r2 = M[r9 + 15];
0x000B70        03540000                 r3 = r3 + r2;
0x000B71        D55B000F                 M[r9 + 15] = r3;
0x000B72        DC0D000F                 rts;

 <$M.sbcenc.putbits.anotherword>
0x000B73        F3200000                 push r0;
0x000B74        8C53004F                 r3 = r1 LSHIFT r2;
0x000B75        D12B000F                 r0 = M[r9 + 15];
0x000B76        03520000                 r3 = r3 + r0;
0x000B77        8155FFFF                 r3 = r3 AND 0xffff;
0x000B78        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x000B79        01440010                 r2 = r2 + 16;
0x000B7A        8C53004F                 r3 = r1 LSHIFT r2;
0x000B7B        D55B000F                 M[r9 + 15] = r3;
0x000B7C        D54B0010                 M[r9 + 16] = r2;
0x000B7D        F3240000                 pop r0;
0x000B7E        DC0D000F                 rts;

 <$wbsenc.wbs_pre_proc_func>
0x000B7F        F3D00000                 push rLink;
0x000B80        D16B0013                 r4 = M[r9 + 19];
0x000B81        81460002                 r2 = r4 AND 0x2;
0x000B82        8D540002                 r3 = r2 LSHIFT 2;
0x000B83        8D440001                 r2 = r2 LSHIFT 1;
0x000B84        87540000                 r3 = r3 OR r2;
0x000B85        81460001                 r2 = r4 AND 0x1;
0x000B86        8D340001                 r1 = r2 LSHIFT 1;
0x000B87        87340000                 r1 = r1 OR r2;
0x000B88        8443005F                 r2 = r1 OR r3;
0x000B89        8D440004                 r2 = r2 LSHIFT 4;
0x000B8A        01300108                 r1 = Null + 264;
0x000B8B        87340000                 r1 = r1 OR r2;
0x000B8C        01200010                 r0 = Null + 16;
0x000B8D        E1F0FFDD                 call $sbcenc.putbits;
0x000B8E        E466002F                 r4 = r4 + 1;
0x000B8F        81660003                 r4 = r4 AND 0x3;
0x000B90        D56B0013                 M[r9 + 19] = r4;
0x000B91        DDF0015E                 jump $pop_rLink_and_rts;

 <$wbsenc.set_up_frame_encode>
0x000B92        E420002F                 r0 = Null + 1;
0x000B93        FD0000FF 19203AAF        M[$wbs_frame_encode.can_idle] = r0 + Null;
0x000B95        199001CF                 M[$wbs_frame_encode.cbuf_in_ptr] = r7 + Null;
0x000B96        19A001DC                 M[$wbs_frame_encode.cbuf_out_ptr] = r8 + Null;
0x000B97        D50B001C                 M[r9 + 28] = Null;
0x000B98        0130000F                 r1 = Null + 15;
0x000B99        D53B001D                 M[r9 + 29] = r1;
0x000B9A        D50B001E                 M[r9 + 30] = Null;
0x000B9B        E430002F                 r1 = Null + 1;
0x000B9C        D53B001F                 M[r9 + 31] = r1;
0x000B9D        D50B0020                 M[r9 + 32] = Null;
0x000B9E        01300008                 r1 = Null + 8;
0x000B9F        D53B0021                 M[r9 + 33] = r1;
0x000BA0        0130001A                 r1 = Null + 26;
0x000BA1        D53B0022                 M[r9 + 34] = r1;
0x000BA2        E430002F                 r1 = Null + 1;
0x000BA3        D53B0025                 M[r9 + 37] = r1;
0x000BA4        DC0D000F                 rts;

 <$wall_clock.enable>
0x000BA5        F3D00000                 push rLink;
0x000BA6        E1F00120                 call $block_interrupts;
0x000BA7        FD0000FF 09203AAA        r0 = Null + M[$wall_clock.last_addr];
0x000BA9        D5230000                 M[r1 + 0] = r0;
0x000BAA        FD0000FF 19303AAA        M[$wall_clock.last_addr] = r1 + Null;
0x000BAC        01330007                 r1 = r1 + 7;
0x000BAD        01400000                 r2 = Null + 0;
0x000BAE        01500C12                 r3 = Null + 3090;
0x000BAF        E1F0013C                 call $timer.schedule_event_in;
0x000BB0        E1F00106                 call $interrupt.unblock;
0x000BB1        DDF0013E                 jump $pop_rLink_and_rts;

 <$frame_sync.task_scheduler_isr>
0x000BB2        D19A0000                 r7 = M[r8 + 0];
0x000BB3        D1CA0002                 r10 = M[r8 + 2];
0x000BB4        510A000A                 I0 = r8 + 10;
0x000BB5        FD000040 01300000        r1 = Null + 4194304;
0x000BB7        D14A0008                 r2 = M[r8 + 8];
0x000BB8        E5F00005                 do $M.frame_sync.task_scheduler_isr.lp_sched;
0x000BB9        03002200                 Null = Null + Null, r0 = M[I0,2];
0x000BBA        2002009F                 Null = r0 - r7;
0x000BBB        84440030                 if EQ r2 = r2 OR r1;
0x000BBC        8D33007F                 r1 = r1 LSHIFT -1;

 <$M.frame_sync.task_scheduler_isr.lp_sched>
0x000BBD        D54A0008                 M[r8 + 8] = r2;
0x000BBE        E429002F                 r0 = r7 + 1;
0x000BBF        D13A0001                 r1 = M[r8 + 1];
0x000BC0        2002003F                 Null = r0 - r1;
0x000BC1        00200005                 if POS r0 = Null + Null;
0x000BC2        D52A0000                 M[r8 + 0] = r0;
0x000BC3        DC0D000F                 rts;

 <$rm_bluetooth_address_handler>
0x000BC4        F3D00000                 push rLink;
0x000BC5        8D330078                 r1 = r1 LSHIFT -8;
0x000BC6        FD0000FF 19303A61        M[0xff3a61] = r1 + Null;
0x000BC8        FD0000FF 19403A62        M[0xff3a62] = r2 + Null;
0x000BCA        FD0000FF 19503A63        M[0xff3a63] = r3 + Null;
0x000BCC        FD0000FF 19603A64        M[0xff3a64] = r4 + Null;
0x000BCE        FD0000FF 01303A60        r1 = Null + -50592;
0x000BD0        D1030000                 Null = M[r1 + 0];
0x000BD1        E100FFD4                 if EQ call $wall_clock.enable;
0x000BD2        DDF0011D                 jump $pop_rLink_and_rts;

 <$sco_params_failed_handler>
0x000BD3        DC0D000F                 rts;

 <$sbcdec.read_audio_samples>
0x000BD4        F3D00000                 push rLink;
0x000BD5        D17B0014                 r5 = M[r9 + 20];
0x000BD6        5010007F                 I1 = Null + r5;
0x000BD7        D16B001D                 r4 = M[r9 + 29];

 <$M.sbcdec.read_audio_samples.blk_loop>
0x000BD8        D17B001F                 r5 = M[r9 + 31];
0x000BD9        D1CB001B                 r10 = M[r9 + 27];
0x000BDA        502000CF                 I2 = Null + r10;

 <$M.sbcdec.read_audio_samples.ch_loop>
0x000BDB        D1CB0021                 r10 = M[r9 + 33];
0x000BDC        E5F00005                 do $M.sbcdec.read_audio_samples.sb_loop;
0x000BDD        23332900                 r1 = r1 - r1, r0 = M[I2,1];
0x000BDE        0002000F                 Null = r0 + Null;
0x000BDF        E110FE8A                 if NE call $sbcdec.getbits;
0x000BE0        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbcdec.read_audio_samples.sb_loop>
0x000BE1        E466003F                 r4 = r4 - 1;
0x000BE2        DD10FFF6                 if NE jump $M.sbcdec.read_audio_samples.blk_loop;
0x000BE3        DDF0010C                 jump $pop_rLink_and_rts;

 <$sbcenc.write_audio_samples>
0x000BE4        F3D00000                 push rLink;
0x000BE5        D16B001D                 r4 = M[r9 + 29];
0x000BE6        D17B0014                 r5 = M[r9 + 20];
0x000BE7        5040007F                 I4 = Null + r5;
0x000BE8        D17B001F                 r5 = M[r9 + 31];
0x000BE9        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcenc.write_audio_samples.block_loop>
0x000BEA        98C8007F                 r10 = r6 * r5 (int);
0x000BEB        D12B001B                 r0 = M[r9 + 27];
0x000BEC        5020002F                 I2 = Null + r0;
0x000BED        E5F00004                 do $M.sbcenc.write_audio_samples.chan_subband_loop;
0x000BEE        03002931                 Null = Null + Null, r0 = M[I2,1], r1 = M[I4,1];
0x000BEF        0002000F                 Null = r0 + Null;
0x000BF0        E110FF7A                 if NE call $sbcenc.putbits;

 <$M.sbcenc.write_audio_samples.chan_subband_loop>
0x000BF1        E466003F                 r4 = r4 - 1;
0x000BF2        DD10FFF8                 if NE jump $M.sbcenc.write_audio_samples.block_loop;
0x000BF3        DDF000FC                 jump $pop_rLink_and_rts;

 <eU5PNvwblvA9dV4tAE5XanPExVJ9onEMg9OGSf7gy5w=>
0x000BF4        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BF5        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BF6        E1F0F740                 call $cbops_multirate.GetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BF7        D14A0009                 r2 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BF8        9464002F                 r4 = r2 * r0 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BF9        2062006F                 r4 = r0 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BFA        21660002                 r4 = r4 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BFB        00600004                 if NEG r4 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BFC        21320002                 r1 = r0 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BFD        00300004                 if NEG r1 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BFE        2006003F                 Null = r4 - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BFF        00360004                 if NEG r1 = r4 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C00        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C01        E1F0F73D                 call $cbops_multirate.SetMinimumTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C02        DDF000ED                 jump $pop_rLink_and_rts;

 <$flash.copy_to_dm>
0x000C03        F3D00000                 push rLink;
0x000C04        0062000F                 r4 = r0 + Null;
0x000C05        0073000F                 r5 = r1 + Null;

 <$M.flash.copy_to_dm.page_loop>
0x000C06        0026000F                 r0 = r4 + Null;
0x000C07        0037000F                 r1 = r5 + Null;
0x000C08        E1F000B6                 call $flash.map_page_into_dm;
0x000C09        00C3000F                 r10 = r1 + Null;
0x000C0A        5010002F                 I1 = Null + r0;
0x000C0B        E5F00003                 do $M.flash.copy_to_dm.loop;
0x000C0C        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000C0D        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm.loop>
0x000C0E        03630000                 r4 = r4 + r1;
0x000C0F        23730000                 r5 = r5 - r1;
0x000C10        DD10FFF6                 if NE jump $M.flash.copy_to_dm.page_loop;
0x000C11        DDF000DE                 jump $pop_rLink_and_rts;

 <$wall_clock.timer_handler>
0x000C12        F3D00000                 push rLink;
0x000C13        21830007                 r6 = r1 - 7;
0x000C14        03300000                 r1 = r1 + Null;
0x000C15        FD000001 014086A0        r2 = Null + 100000;
0x000C17        01500C12                 r3 = Null + 3090;
0x000C18        E1F000D3                 call $timer.schedule_event_in;
0x000C19        8540801B                 r2 = Null OR 0x801b;
0x000C1A        D1580001                 r3 = M[r6 + 1];
0x000C1B        D1680002                 r4 = M[r6 + 2];
0x000C1C        D1780003                 r5 = M[r6 + 3];
0x000C1D        D1880004                 r6 = M[r6 + 4];
0x000C1E        E1F0FF26                 call $message.send_short;
0x000C1F        DDF000D0                 jump $pop_rLink_and_rts;

 <$cbuffer.set_write_address.its_a_port>
0x000C20        F3D00000                 push rLink;
0x000C21        8122001F                 r0 = r0 AND 0x1f;
0x000C22        2122000C                 r0 = r0 - 12;
0x000C23        0900FE33                 Null = Null + M[0xfffe33];
0x000C24        FD0000FF 09003AA3        Null = Null + M[$cbuffer.auto_mcu_message];
0x000C26        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x000C27        D13209F8                 r1 = M[r0 + 2552];
0x000C28        2103F000                 Null = r1 - -4096;
0x000C29        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x000C2A        85408003                 r2 = Null OR 0x8003;
0x000C2B        ED520001                 r3 = 0x1 ASHIFT r0;
0x000C2C        E1F0FF18                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x000C2D        DDF000C2                 jump $pop_rLink_and_rts;

 <$sbcdec.read_scale_factors>
0x000C2E        F3D00000                 push rLink;
0x000C2F        D18B001F                 r6 = M[r9 + 31];
0x000C30        D19B0021                 r7 = M[r9 + 33];
0x000C31        9B890000                 r6 = r6 * r7 (int);
0x000C32        D12B0018                 r0 = M[r9 + 24];
0x000C33        5010002F                 I1 = Null + r0;
0x000C34        51900001                 M1 = Null + 1;
0x000C35        01200004                 r0 = Null + 4;

 <$M.sbcdec.read_scale_factors.loop>
0x000C36        E1F0FE33                 call $sbcdec.getbits;
0x000C37        E1F0002D                 call $sbc.crc_calc;
0x000C38        6689B500                 r6 = r6 - M1, M[I1,M1] = r1;
0x000C39        DD10FFFD                 if NE jump $M.sbcdec.read_scale_factors.loop;
0x000C3A        DDF000B5                 jump $pop_rLink_and_rts;

 <$cbuffer.set_read_address.its_a_port>
0x000C3B        F3D00000                 push rLink;
0x000C3C        8152001F                 r3 = r0 AND 0x1f;
0x000C3D        0900FE33                 Null = Null + M[0xfffe33];
0x000C3E        FD0000FF 09003AA3        Null = Null + M[$cbuffer.auto_mcu_message];
0x000C40        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x000C41        D13509EC                 r1 = M[r3 + 2540];
0x000C42        2103F000                 Null = r1 - -4096;
0x000C43        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x000C44        85408002                 r2 = Null OR 0x8002;
0x000C45        ED550001                 r3 = 0x1 ASHIFT r3;
0x000C46        E1F0FEFE                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x000C47        DDF000A8                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_read_insert_ind>
0x000C48        20C000CF                 r10 = Null - r10;
0x000C49        D14B0004                 r2 = M[r9 + 4];
0x000C4A        9144007F                 r2 = r2 ASHIFT -1;
0x000C4B        03C40000                 r10 = r10 + r2;
0x000C4C        D14B000C                 r2 = M[r9 + 12];
0x000C4D        034C0000                 r2 = r2 + r10;
0x000C4E        D54B000C                 M[r9 + 12] = r2;
0x000C4F        5010008F                 I1 = Null + r6;
0x000C50        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x000C51        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x000C52        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x000C53        03004500                 Null = Null + Null, r2 = M[I1,1];
0x000C54        4480001F                 r6 = Null + I1;
0x000C55        D5820001                 M[r0 + 1] = r6;
0x000C56        DC0D000F                 rts;

 <$frame_sync.update_input_streams_ind>
0x000C57        D15B0008                 r3 = M[r9 + 8];
0x000C58        D14B0009                 r2 = M[r9 + 9];
0x000C59        23540000                 r3 = r3 - r2;
0x000C5A        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x000C5B        D14B0004                 r2 = M[r9 + 4];
0x000C5C        9144007F                 r2 = r2 ASHIFT -1;
0x000C5D        03540000                 r3 = r3 + r2;
0x000C5E        D14B000C                 r2 = M[r9 + 12];
0x000C5F        23450000                 r2 = r2 - r3;
0x000C60        D54B000C                 M[r9 + 12] = r2;
0x000C61        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x000C62        E422002F                 r0 = r0 + 1;
0x000C63        DC0D000F                 rts;

 <$sbc.crc_calc>
0x000C64        D14B0024                 r2 = M[r9 + 36];
0x000C65        0170001D                 r5 = Null + 29;
0x000C66        65520008                 r3 = 8 - r0;
0x000C67        00C2000F                 r10 = r0 + Null;
0x000C68        8C53005F                 r3 = r1 LSHIFT r3;
0x000C69        E5F00006                 do $M.sbc.crc_calc.crc_loop;
0x000C6A        8865004F                 r4 = r3 XOR r2;
0x000C6B        8D440001                 r2 = r2 LSHIFT 1;
0x000C6C        81660080                 r4 = r4 AND 0x80;
0x000C6D        88440071                 if NE r2 = r2 XOR r5;
0x000C6E        8D550001                 r3 = r3 LSHIFT 1;

 <$M.sbc.crc_calc.crc_loop>
0x000C6F        D54B0024                 M[r9 + 36] = r2;
0x000C70        DC0D000F                 rts;

 <$sbcenc.write_scale_factors>
0x000C71        F3D00000                 push rLink;
0x000C72        D16B001F                 r4 = M[r9 + 31];
0x000C73        D17B0021                 r5 = M[r9 + 33];
0x000C74        D12B0018                 r0 = M[r9 + 24];
0x000C75        5010002F                 I1 = Null + r0;
0x000C76        98C6007F                 r10 = r4 * r5 (int);
0x000C77        01200004                 r0 = Null + 4;
0x000C78        E5F00003                 do $M.sbcenc.write_scale_factors.loop;
0x000C79        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000C7A        E1F0FEF0                 call $sbcenc.putbits;

 <$M.sbcenc.write_scale_factors.loop>
0x000C7B        DDF00074                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_output_stream_ind>
0x000C7C        501000AF                 I1 = Null + r8;
0x000C7D        238A0000                 r6 = r6 - r8;
0x000C7E        0088003D                 if LE r6 = r6 + r1;
0x000C7F        67890000                 r6 = r6 - M1;
0x000C80        70A8006F                 M2 = r6 - r4;
0x000C81        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x000C82        444000AF                 r2 = Null + M2;
0x000C83        D54B000C                 M[r9 + 12] = r2;
0x000C84        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x000C85        4480001F                 r6 = Null + I1;
0x000C86        D5820002                 M[r0 + 2] = r6;
0x000C87        DC0D000F                 rts;

 <$cbops.copy_op.amount_to_use>
0x000C88        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C89        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C8A        01990002                 r7 = r7 + 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C8B        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C8C        03290000                 r0 = r0 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C8D        99330003                 r1 = r1 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C8E        03390000                 r1 = r1 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C8F        D042000F                 r2 = M[r0 + Null];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C90        2804003F                 Null = r2 - M[r1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C91        D0430005                 if POS r2 = M[r1 + Null];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C92        1824000F                 M[r0] = r2 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000C93        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x000C94        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x000C95        D076000F                 r5 = M[r4 + Null];
0x000C96        DD000059                 if EQ jump $pop_rLink_and_rts;
0x000C97        D1960001                 r7 = M[r4 + 1];
0x000C98        D1A60002                 r8 = M[r4 + 2];
0x000C99        01660003                 r4 = r4 + 3;
0x000C9A        F3600000                 push r4;
0x000C9B        E007000F                 call r5;
0x000C9C        F3640000                 pop r4;
0x000C9D        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$cbuffer.calc_amount_space>
0x000C9E        D802000F                 Null = SIGNDET r0;
0x000C9F        DD00FD10                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x000CA0        D1420000                 r2 = M[r0 + 0];
0x000CA1        D1320002                 r1 = M[r0 + 2];
0x000CA2        D1220001                 r0 = M[r0 + 1];
0x000CA3        23230000                 r0 = r0 - r1;
0x000CA4        0022004D                 if LE r0 = r0 + r2;
0x000CA5        E422003F                 r0 = r0 - 1;
0x000CA6        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x000CA7        F3D00000                 push rLink;
0x000CA8        23A80000                 r8 = r8 - r6;
0x000CA9        00AA0034                 if NEG r8 = r8 + r1;
0x000CAA        20CA006F                 r10 = r8 - r4;
0x000CAB        E140FF9D                 if NEG call $frame_sync.distribute_read_insert_ind;
0x000CAC        E1F0FE28                 call $frame_sync.analyze_stream_ind;
0x000CAD        DDF00042                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data>
0x000CAE        D802000F                 Null = SIGNDET r0;
0x000CAF        DD00FD24                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x000CB0        D1420000                 r2 = M[r0 + 0];
0x000CB1        D1320002                 r1 = M[r0 + 2];
0x000CB2        D1220001                 r0 = M[r0 + 1];
0x000CB3        2023002F                 r0 = r1 - r0;
0x000CB4        00220044                 if NEG r0 = r0 + r2;
0x000CB5        DC0D000F                 rts;

 <$interrupt.unblock>
0x000CB6        09200AA5                 r0 = Null + M[$interrupt.block_count];
0x000CB7        E10002CA                 if EQ call $error;
0x000CB8        E422003F                 r0 = r0 - 1;
0x000CB9        19200AA5                 M[$interrupt.block_count] = r0 + Null;
0x000CBA        DC0D0001                 if NE rts;
0x000CBB        E420002F                 r0 = Null + 1;
0x000CBC        1920FE12                 M[0xfffe12] = r0 + Null;
0x000CBD        DC0D000F                 rts;

 <$flash.map_page_into_dm>
0x000CBE        9152007F                 r3 = r0 ASHIFT -1;
0x000CBF        1945FE5D                 M[0xfffe5d] = r2 + r3;
0x000CC0        81520001                 r3 = r0 AND 0x1;
0x000CC1        65251000                 r0 = 4096 - r3;
0x000CC2        2023002F                 r0 = r1 - r0;
0x000CC3        20330025                 if POS r1 = r1 - r0;
0x000CC4        0125D000                 r0 = r3 + -12288;
0x000CC5        DC0D000F                 rts;

 <$block_interrupts>
0x000CC6        09200AA5                 r0 = Null + M[$interrupt.block_count];
0x000CC7        E422002F                 r0 = r0 + 1;
0x000CC8        19200AA5                 M[$interrupt.block_count] = r0 + Null;
0x000CC9        1900FE12                 M[0xfffe12] = Null + Null;
0x000CCA        03000000                 Null = Null + Null;
0x000CCB        03000000                 Null = Null + Null;
0x000CCC        DC0D000F                 rts;

 <$message.send_queue_space>
0x000CCD        FD0000FF 09203AA6        r0 = Null + M[$message.queue_read_ptr];
0x000CCF        29220AA7                 r0 = r0 - M[$message.queue_write_ptr];
0x000CD0        E422003F                 r0 = r0 - 1;
0x000CD1        DC0D0005                 if POS rts;
0x000CD2        0122006E                 r0 = r0 + 110;
0x000CD3        DC0D000F                 rts;

 <$_cbuffer_get_read_address>
0x000CD4        D802000F                 Null = SIGNDET r0;
0x000CD5        DD00FC91                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x000CD6        D1320000                 r1 = M[r0 + 0];
0x000CD7        D1220001                 r0 = M[r0 + 1];
0x000CD8        DC0D000F                 rts;

 <$_cbuffer_get_write_address>
0x000CD9        D802000F                 Null = SIGNDET r0;
0x000CDA        DD00FC64                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x000CDB        D1320000                 r1 = M[r0 + 0];
0x000CDC        D1220002                 r0 = M[r0 + 2];
0x000CDD        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x000CDE        D1520002                 r3 = M[r0 + 2];
0x000CDF        D1420000                 r2 = M[r0 + 0];
0x000CE0        D1220001                 r0 = M[r0 + 1];
0x000CE1        D1340000                 r1 = M[r2 + 0];
0x000CE2        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x000CE3        D802000F                 Null = SIGNDET r0;
0x000CE4        DD00FF57                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x000CE5        D5320001                 M[r0 + 1] = r1;
0x000CE6        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x000CE7        D802000F                 Null = SIGNDET r0;
0x000CE8        DD00FF38                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x000CE9        D5320002                 M[r0 + 2] = r1;
0x000CEA        DC0D000F                 rts;

 <$timer.schedule_event_in>
0x000CEB        0944FE71                 r2 = r2 + M[0xfffe71];
0x000CEC        DDF0FCA1                 jump $timer.schedule_event_at;

 <$frmbuffer.set_frame_size>
0x000CED        D5520002                 M[r0 + 2] = r3;
0x000CEE        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x000CEF        F3D40000                 pop rLink;
0x000CF0        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x000CF1        DC0D000F                 rts;

 <$sco_decoder.wbs.process>
0x000CF2        F3D00000                 push rLink;
0x000CF3        D53B0044                 M[r9 + 68] = r1;
0x000CF4        D12B003F                 r0 = M[r9 + 63];
0x000CF5        DD00003F                 if EQ jump $M.sco_decoder.wbs.process.no_output;
0x000CF6        194003FF                 M[$scratch.s0] = r2 + Null;
0x000CF7        D12B0041                 r0 = M[r9 + 65];
0x000CF8        2002004F                 Null = r0 - r2;
0x000CF9        00240004                 if NEG r0 = r2 + Null;
0x000CFA        D52B0041                 M[r9 + 65] = r0;
0x000CFB        21040003                 Null = r2 - 3;
0x000CFC        DD000041                 if EQ jump $M.sco_decoder.wbs.process.lostsync;

 <$M.sco_decoder.wbs.process.buffer_decode_loop>
0x000CFD        51900001                 M1 = Null + 1;
0x000CFE        0140003C                 r2 = Null + 60;
0x000CFF        D12B003E                 r0 = M[r9 + 62];
0x000D00        5040002F                 I4 = Null + r0;
0x000D01        D12B0040                 r0 = M[r9 + 64];
0x000D02        D16B0042                 r4 = M[r9 + 66];
0x000D03        E1F000E7                 call $sco_decoder.wbs.copy_frame;
0x000D04        D52B0040                 M[r9 + 64] = r0;
0x000D05        D56B0042                 M[r9 + 66] = r4;
0x000D06        D13B0041                 r1 = M[r9 + 65];
0x000D07        DD10000F                 if NE jump $M.sco_decoder.wbs.process.skip_sync_check;
0x000D08        D13B0040                 r1 = M[r9 + 64];
0x000D09        21030004                 Null = r1 - 4;
0x000D0A        DD40000C                 if NEG jump $M.sco_decoder.wbs.process.skip_sync_check;
0x000D0B        E440003F                 r2 = Null - 1;
0x000D0C        D13B003E                 r1 = M[r9 + 62];
0x000D0D        D1530000                 r3 = M[r1 + 0];
0x000D0E        D1330001                 r1 = M[r1 + 1];
0x000D0F        8155FF0F                 r3 = r3 AND 0xff0f;
0x000D10        21050108                 Null = r3 - 264;
0x000D11        DD10002C                 if NE jump $M.sco_decoder.wbs.process.lostsync;
0x000D12        8133FF00                 r1 = r1 AND 0xff00;
0x000D13        FD000000 2103AD00        Null = r1 - 44288;
0x000D15        DD100028                 if NE jump $M.sco_decoder.wbs.process.lostsync;

 <$M.sco_decoder.wbs.process.skip_sync_check>
0x000D16        2102003C                 Null = r0 - 60;
0x000D17        DD100016                 if NE jump $M.sco_decoder.wbs.process.decode_done;
0x000D18        D50B0040                 M[r9 + 64] = Null;
0x000D19        F3010000                 push I0;
0x000D1A        F3C10000                 push L0;
0x000D1B        F3700000                 push r5;
0x000D1C        F3A00000                 push r8;
0x000D1D        F3900000                 push r7;
0x000D1E        D12B003E                 r0 = M[r9 + 62];
0x000D1F        5000002F                 I0 = Null + r0;
0x000D20        51C00000                 L0 = Null + 0;
0x000D21        D1290003                 r0 = M[r7 + 3];
0x000D22        E1F0006C                 call $sco_decoder.wbs.decode;
0x000D23        F3940000                 pop r7;
0x000D24        F3A40000                 pop r8;
0x000D25        F3740000                 pop r5;
0x000D26        F3C50000                 pop L0;
0x000D27        F3050000                 pop I0;
0x000D28        0002000F                 Null = r0 + Null;
0x000D29        DD00FFD4                 if EQ jump $M.sco_decoder.wbs.process.buffer_decode_loop;
0x000D2A        01200002                 r0 = Null + 2;
0x000D2B        D52B0041                 M[r9 + 65] = r0;
0x000D2C        DDF0FFD1                 jump $M.sco_decoder.wbs.process.buffer_decode_loop;

 <$M.sco_decoder.wbs.process.decode_done>
0x000D2D        D1290008                 r0 = M[r7 + 8];
0x000D2E        E402003F                 Null = r0 - 1;
0x000D2F        DD000005                 if EQ jump $M.sco_decoder.wbs.process.no_output;
0x000D30        D17B0041                 r5 = M[r9 + 65];
0x000D31        092003FF                 r0 = Null + M[$scratch.s0];
0x000D32        D52B0041                 M[r9 + 65] = r0;
0x000D33        DDF00011                 jump $M.sco_decoder.wbs.process.exit_with_output;

 <$M.sco_decoder.wbs.process.no_output>
0x000D34        E470003F                 r5 = Null - 1;
0x000D35        D14B0044                 r2 = M[r9 + 68];
0x000D36        D13B0043                 r1 = M[r9 + 67];
0x000D37        2024003F                 r0 = r2 - r1;
0x000D38        21020018                 Null = r0 - 24;
0x000D39        DD500002                 if POS jump $M.sco_decoder.wbs.process.output_fake_frame;
0x000D3A        DDF0000C                 jump $M.sco_decoder.wbs.process.exit;

 <$M.sco_decoder.wbs.process.output_fake_frame>
0x000D3B        0170FFFE                 r5 = Null + -2;
0x000D3C        DDF00008                 jump $M.sco_decoder.wbs.process.exit_with_output;

 <$M.sco_decoder.wbs.process.lostsync>
0x000D3D        D50B003F                 M[r9 + 63] = Null;
0x000D3E        D50B0041                 M[r9 + 65] = Null;
0x000D3F        D50B0040                 M[r9 + 64] = Null;
0x000D40        0074000F                 r5 = r2 + Null;
0x000D41        E407002F                 Null = r5 + 1;
0x000D42        DD00FFF2                 if EQ jump $M.sco_decoder.wbs.process.no_output;
0x000D43        DDF00003                 jump $M.sco_decoder.wbs.process.exit;

 <$M.sco_decoder.wbs.process.exit_with_output>
0x000D44        D13B0044                 r1 = M[r9 + 68];
0x000D45        D53B0043                 M[r9 + 67] = r1;

 <$M.sco_decoder.wbs.process.exit>
0x000D46        23070000                 Null = Null - r5;
0x000D47        DDA0FFA8                 if GE jump $pop_rLink_and_rts;
0x000D48        F3700000                 push r5;
0x000D49        E1F00225                 call $sbcdec.silence_decoder;
0x000D4A        F3740000                 pop r5;
0x000D4B        DDF0FFA4                 jump $pop_rLink_and_rts;

 <$main>
0x000D4C        E1F00208                 call $stack.initialise;
0x000D4D        E1F001FA                 call $interrupt.initialise;
0x000D4E        E1F0023D                 call $message.initialise;
0x000D4F        E1F00210                 call $cbuffer.initialise;
0x000D50        E1F001E0                 call $pskey.initialise;
0x000D51        E1F001EB                 call $wall_clock.initialise;
0x000D52        01A007E0                 r8 = Null + 2016;
0x000D53        E1F0018C                 call $sco_timing.initialize;
0x000D54        097007E9                 r5 = Null + M[0x7e9];
0x000D55        F3700000                 push r5;
0x000D56        E477003F                 r5 = r5 - 1;
0x000D57        E1F00112                 call $sbcenc.init_static_encoder;
0x000D58        F3740000                 pop r5;
0x000D59        0177FFFE                 r5 = r5 + -2;
0x000D5A        E1F000F6                 call $sbcdec.init_static_decoder;
0x000D5B        019007E0                 r7 = Null + 2016;
0x000D5C        E1F0019E                 call $frame_sync.sco_initialize;
0x000D5D        FD000000 01408000        r2 = Null + 32768;
0x000D5F        E1F0FDE5                 call $message.send_short;
0x000D60        FD0000FF 013035F8        r1 = Null + -51720;
0x000D62        01401026                 r2 = Null + 4134;
0x000D63        01500EA4                 r3 = Null + 3748;
0x000D64        E1F001C1                 call $message.register_handler;
0x000D65        FD0000FF 013033FB        r1 = Null + -52229;
0x000D67        01400271                 r2 = Null + 625;
0x000D68        01500E16                 r3 = Null + 3606;
0x000D69        E1F0FF82                 call $timer.schedule_event_in;

 <$M.main.main_loop>
0x000D6A        01A00A27                 r8 = Null + 2599;
0x000D6B        E1F0FA3A                 call $frame_sync.task_scheduler_run;
0x000D6C        DDF0FFFE                 jump $M.main.main_loop;

 <$main_housekeeping>
0x000D6D        F3D00000                 push rLink;
0x000D6E        DDF0FF81                 jump $pop_rLink_and_rts;

 <$main_receive>
0x000D6F        F3D00000                 push rLink;
0x000D70        09000AA1                 Null = Null + M[$one_mic_example.reinit];
0x000D71        E1100168                 if NE call $one_mic_example_reinitialize;
0x000D72        019007E0                 r7 = Null + 2016;
0x000D73        E1F0F6CA                 call ALrYtClmXhG4b8GdfG6yhcsEkwc5+93FLGi1D2oh5B0=;
0x000D74        FD0000FF 092033FF        r0 = Null + M[$one_mic_example.sys_mode];
0x000D76        FD0000FF D1623A9F        r4 = M[r0 + -50529];
0x000D78        E1F0FF1C                 call $frame_sync.run_function_table;
0x000D79        DDF0FF76                 jump $pop_rLink_and_rts;

 <$main_send>
0x000D7A        F3D00000                 push rLink;
0x000D7B        0920FE71                 r0 = Null + M[0xfffe71];
0x000D7C        F3200000                 push r0;
0x000D7D        1900FE93                 M[0xfffe93] = Null + Null;
0x000D7E        09000AA1                 Null = Null + M[$one_mic_example.reinit];
0x000D7F        E110015A                 if NE call $one_mic_example_reinitialize;
0x000D80        FD0000FF 092033FF        r0 = Null + M[$one_mic_example.sys_mode];
0x000D82        D16205FE                 r4 = M[r0 + 1534];
0x000D83        E1F0FF11                 call $frame_sync.run_function_table;
0x000D84        019007E0                 r7 = Null + 2016;
0x000D85        D1290009                 r0 = M[r7 + 9];
0x000D86        D1B20003                 r9 = M[r0 + 3];
0x000D87        E1F0FCF6                 call $frame_sync.sco_encode;
0x000D88        F3240000                 pop r0;
0x000D89        2922FE71                 r0 = r0 - M[0xfffe71];
0x000D8A        09300A2D                 r1 = Null + M[0xa2d];
0x000D8B        23320000                 r1 = r1 - r0;
0x000D8C        19300A2D                 M[0xa2d] = r1 + Null;
0x000D8D        DDF0FF62                 jump $pop_rLink_and_rts;

 <$sco_decoder.wbs.decode>
0x000D8E        F3D00000                 push rLink;
0x000D8F        192007FF                 M[$scratch.s2] = r0 + Null;
0x000D90        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000D91        01200010                 r0 = Null + 16;
0x000D92        D52B003B                 M[r9 + 59] = r0;
0x000D93        0120000F                 r0 = Null + 15;
0x000D94        D52B0024                 M[r9 + 36] = r0;
0x000D95        E1F0FCCD                 call $sbcdec.get1byte;
0x000D96        E1F0FCCC                 call $sbcdec.get1byte;
0x000D97        E1F0FECD                 call $sbc.crc_calc;
0x000D98        E1F0FCCA                 call $sbcdec.get1byte;
0x000D99        E1F0FECB                 call $sbc.crc_calc;
0x000D9A        E1F0FCC8                 call $sbcdec.get1byte;
0x000D9B        D53B0023                 M[r9 + 35] = r1;
0x000D9C        D50B001C                 M[r9 + 28] = Null;
0x000D9D        0130000F                 r1 = Null + 15;
0x000D9E        D53B001D                 M[r9 + 29] = r1;
0x000D9F        D50B001E                 M[r9 + 30] = Null;
0x000DA0        E430002F                 r1 = Null + 1;
0x000DA1        D53B001F                 M[r9 + 31] = r1;
0x000DA2        D50B0020                 M[r9 + 32] = Null;
0x000DA3        01300008                 r1 = Null + 8;
0x000DA4        D53B0021                 M[r9 + 33] = r1;
0x000DA5        0130001A                 r1 = Null + 26;
0x000DA6        D53B0022                 M[r9 + 34] = r1;
0x000DA7        01200039                 r0 = Null + 57;
0x000DA8        D52B0039                 M[r9 + 57] = r0;
0x000DA9        E1F0FE85                 call $sbcdec.read_scale_factors;
0x000DAA        01700002                 r5 = Null + 2;
0x000DAB        D12B0023                 r0 = M[r9 + 35];
0x000DAC        D13B0024                 r1 = M[r9 + 36];
0x000DAD        23230000                 r0 = r0 - r1;
0x000DAE        812200FF                 r0 = r0 AND 0xff;
0x000DAF        DD100011                 if NE jump $M.sco_decoder.wbs.decode.decode_failed;
0x000DB0        E1F0F407                 call $sbc.calc_bit_allocation;
0x000DB1        E1F0FE23                 call $sbcdec.read_audio_samples;
0x000DB2        D12B003B                 r0 = M[r9 + 59];
0x000DB3        21020010                 Null = r0 - 16;
0x000DB4        DD000002                 if EQ jump $M.sco_decoder.wbs.decode.skip_padding;
0x000DB5        E1F0FCB4                 call $sbcdec.getbits;

 <$M.sco_decoder.wbs.decode.skip_padding>
0x000DB6        E1F0FAE3                 call $sbcdec.sample_reconstruction;
0x000DB7        092007FF                 r0 = Null + M[$scratch.s2];
0x000DB8        E1F0FF21                 call $_cbuffer_get_write_address;
0x000DB9        5010002F                 I1 = Null + r0;
0x000DBA        50D0003F                 L1 = Null + r1;
0x000DBB        01700000                 r5 = Null + 0;
0x000DBC        E1F0F96A                 call $sbcdec.synthesis_subband_filter;
0x000DBD        51D00000                 L1 = Null + 0;
0x000DBE        01200000                 r0 = Null + 0;
0x000DBF        DDF0FF30                 jump $pop_rLink_and_rts;

 <$M.sco_decoder.wbs.decode.decode_failed>
0x000DC0        0027000F                 r0 = r5 + Null;
0x000DC1        DDF0FF2E                 jump $pop_rLink_and_rts;

 <$sco_decoder.wbs.validate>
0x000DC2        F3D00000                 push rLink;
0x000DC3        51900001                 M1 = Null + 1;
0x000DC4        0082000F                 r6 = r0 + Null;
0x000DC5        D50B0042                 M[r9 + 66] = Null;
0x000DC6        D12B003F                 r0 = M[r9 + 63];
0x000DC7        DD100017                 if NE jump $M.sco_decoder.wbs.validate.havesync;
0x000DC8        51A0FFFB                 M2 = Null + -5;
0x000DC9        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x000DCA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000DCB        51A00003                 M2 = Null + 3;
0x000DCC        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x000DCD        81070001                 Null = r5 AND 0x1;
0x000DCE        DD000006                 if EQ jump $M.sco_decoder.wbs.validate.insert_last_word;
0x000DCF        812200FF                 r0 = r0 AND 0xff;
0x000DD0        8D220008                 r0 = r0 LSHIFT 8;
0x000DD1        8D330078                 r1 = r1 LSHIFT -8;
0x000DD2        813300FF                 r1 = r1 AND 0xff;
0x000DD3        87320000                 r1 = r1 OR r0;

 <$M.sco_decoder.wbs.validate.insert_last_word>
0x000DD4        0300B000                 Null = Null + Null, M[I0,0] = r1;
0x000DD5        01770002                 r5 = r5 + 2;
0x000DD6        E1F00059                 call $sco_decoder.wbs.findsync;
0x000DD7        0073000F                 r5 = r1 + Null;
0x000DD8        5801000F                 I0 = I1 + Null;
0x000DD9        D56B0042                 M[r9 + 66] = r4;
0x000DDA        D54B003F                 M[r9 + 63] = r2;
0x000DDB        DD100003                 if NE jump $M.sco_decoder.wbs.validate.havesync;
0x000DDC        01300002                 r1 = Null + 2;
0x000DDD        DDF0FF12                 jump $pop_rLink_and_rts;

 <$M.sco_decoder.wbs.validate.havesync>
0x000DDE        01400078                 r2 = Null + 120;
0x000DDF        D12B0040                 r0 = M[r9 + 64];
0x000DE0        03270000                 r0 = r0 + r5;
0x000DE1        99220002                 r0 = r0 * 2 (int);
0x000DE2        E430002F                 r1 = Null + 1;
0x000DE3        2002004F                 Null = r0 - r2;
0x000DE4        00340005                 if POS r1 = r2 + Null;
0x000DE5        E403003F                 Null = r1 - 1;
0x000DE6        DD00FF09                 if EQ jump $pop_rLink_and_rts;
0x000DE7        2008003F                 Null = r6 - r1;
0x000DE8        00300004                 if NEG r1 = Null + Null;
0x000DE9        DDF0FF06                 jump $pop_rLink_and_rts;

 <$sco_decoder.wbs.copy_frame>
0x000DEA        FD0000FF 196030FF        M[$scratch.s1] = r4 + Null;
0x000DEC        23420000                 r2 = r2 - r0;
0x000DED        2007004F                 Null = r5 - r2;
0x000DEE        00470004                 if NEG r2 = r5 + Null;
0x000DEF        8D52007F                 r3 = r0 LSHIFT -1;
0x000DF0        5B450000                 I4 = I4 + r3;
0x000DF1        8DC4007F                 r10 = r2 LSHIFT -1;
0x000DF2        0002000F                 Null = r0 + Null;
0x000DF3        DD00000B                 if EQ jump $M.sco_decoder.wbs.copy_frame.frame_empty;
0x000DF4        81020001                 Null = r0 AND 0x1;
0x000DF5        DD000016                 if EQ jump $M.sco_decoder.wbs.copy_frame.copy_aligned;
0x000DF6        03005060                 Null = Null + Null, r3 = M[I0,0], r4 = M[I4,0];
0x000DF7        8D550078                 r3 = r3 LSHIFT -8;
0x000DF8        815500FF                 r3 = r3 AND 0xff;
0x000DF9        8166FF00                 r4 = r4 AND 0xff00;
0x000DFA        87650000                 r4 = r4 OR r3;
0x000DFB        030000E1                 Null = Null + Null, M[I4,1] = r4;
0x000DFC        01500000                 r3 = Null + 0;
0x000DFD        DDF00004                 jump $M.sco_decoder.wbs.copy_frame.copy_unaligned;

 <$M.sco_decoder.wbs.copy_frame.frame_empty>
0x000DFE        81060001                 Null = r4 AND 0x1;
0x000DFF        DD00000C                 if EQ jump $M.sco_decoder.wbs.copy_frame.copy_aligned;
0x000E00        81540001                 r3 = r2 AND 0x1;

 <$M.sco_decoder.wbs.copy_frame.copy_unaligned>
0x000E01        03C55100                 r10 = r10 + r3, r3 = M[I0,1];
0x000E02        01800008                 r6 = Null + 8;
0x000E03        8F586000                 r3 = r3 LSHIFT r6, r4 = M[I0,0];
0x000E04        E5F00005                 do $M.sco_decoder.wbs.copy_frame.unaligned_copy_loop;
0x000E05        8D660078                 r4 = r4 LSHIFT -8;
0x000E06        8435516F                 r1 = r3 OR r4, r3 = M[I0,M1];
0x000E07        8133FFFF                 r1 = r1 AND 0xffff;
0x000E08        8F5860B1                 r3 = r3 LSHIFT r6, r4 = M[I0,0], M[I4,1] = r1;

 <$M.sco_decoder.wbs.copy_frame.unaligned_copy_loop>
0x000E09        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x000E0A        DDF00005                 jump $M.sco_decoder.wbs.copy_frame.done;

 <$M.sco_decoder.wbs.copy_frame.copy_aligned>
0x000E0B        03005100                 Null = Null + Null, r3 = M[I0,1];
0x000E0C        E5F00002                 do $M.sco_decoder.wbs.copy_frame.copy_loop;
0x000E0D        030051D1                 Null = Null + Null, r3 = M[I0,1], M[I4,1] = r3;

 <$M.sco_decoder.wbs.copy_frame.copy_loop>
0x000E0E        03005300                 Null = Null + Null, r3 = M[I0,-1];

 <$M.sco_decoder.wbs.copy_frame.done>
0x000E0F        03240000                 r0 = r0 + r2;
0x000E10        23740000                 r5 = r5 - r2;
0x000E11        FD0000FF 096030FF        r4 = Null + M[$scratch.s1];
0x000E13        81040001                 Null = r2 AND 0x1;
0x000E14        68690061                 if NE r4 = M1 - r4;
0x000E15        DC0D000F                 rts;

 <$audio_copy_handler>
0x000E16        F3D00000                 push rLink;
0x000E17        01A001C4                 r8 = Null + 452;
0x000E18        E1F0F309                 call ALrYtClmXhG4b8GdfG6yhcsEkwc5+93FLGi1D2oh5B0=;
0x000E19        FD0000FF 01203A88        r0 = Null + -50552;
0x000E1B        E1F0FEBE                 call $_cbuffer_get_write_address;
0x000E1C        0032000F                 r1 = r0 + Null;
0x000E1D        FD0000FF 01203A88        r0 = Null + -50552;
0x000E1F        E1F0FEC4                 call $cbuffer.set_read_address;
0x000E20        FD0000FF 01A03A76        r8 = Null + -50570;
0x000E22        E1F0F4AE                 call $cbops_multirate.copy;
0x000E23        01A00A65                 r8 = Null + 2661;
0x000E24        E1F0F4AC                 call $cbops_multirate.copy;
0x000E25        01A00A6E                 r8 = Null + 2670;
0x000E26        E1F0F67C                 call $frame_sync.usb_out_mono_copy;

 <$M.audio_copy_handler.irq_sco>
0x000E27        01900A27                 r7 = Null + 2599;
0x000E28        FD0000FF 013033FB        r1 = Null + -52229;
0x000E2A        01500E16                 r3 = Null + 3606;
0x000E2B        E1F0F6CC                 call $sco_timing.SyncClock;
0x000E2C        01A00A27                 r8 = Null + 2599;
0x000E2D        E1F0FD85                 call $frame_sync.task_scheduler_isr;
0x000E2E        DDF0FEC1                 jump $pop_rLink_and_rts;

 <$sco_decoder.wbs.findsync>
0x000E2F        58DC000F                 L1 = L0 + Null;
0x000E30        5810000F                 I1 = I0 + Null;
0x000E31        8DC7007F                 r10 = r5 LSHIFT -1;
0x000E32        81070001                 Null = r5 AND 0x1;
0x000E33        64CC3590                 if EQ r10 = r10 - M1, r1 = M[I1,M1];
0x000E34        51A00108                 M2 = Null + 264;
0x000E35        51B00001                 M3 = Null + 1;
0x000E36        E5F0000E                 do $M.sco_decoder.wbs.findsync.findsync_loop;
0x000E37        4460559F                 r4 = Null + M1, r3 = M[I1,M1];
0x000E38        814300FF                 r2 = r1 AND 0xff;
0x000E39        81250FFF                 r0 = r3 AND 0xfff;
0x000E3A        210208AD                 Null = r0 - 2221;
0x000E3B        640400B0                 if EQ Null = r2 - M3;
0x000E3C        DD00000B                 if EQ jump $M.sco_decoder.wbs.findsync.foundsync;
0x000E3D        8143FF0F                 r2 = r1 AND 0xff0f;
0x000E3E        8125FF00                 r0 = r3 AND 0xff00;
0x000E3F        FD000000 2102AD00        Null = r0 - 44288;
0x000E41        646400A0                 if EQ r4 = r2 - M2;
0x000E42        DD000005                 if EQ jump $M.sco_decoder.wbs.findsync.foundsync;
0x000E43        0035000F                 r1 = r3 + Null;

 <$M.sco_decoder.wbs.findsync.findsync_loop>
0x000E44        51D00000                 L1 = Null + 0;
0x000E45        01400000                 r2 = Null + 0;
0x000E46        DC0D000F                 rts;

 <$M.sco_decoder.wbs.findsync.foundsync>
0x000E47        03003700                 Null = Null + Null, r1 = M[I1,-1];
0x000E48        03003700                 Null = Null + Null, r1 = M[I1,-1];
0x000E49        51D00000                 L1 = Null + 0;
0x000E4A        E4CC002F                 r10 = r10 + 1;
0x000E4B        8D3C0001                 r1 = r10 LSHIFT 1;
0x000E4C        23360000                 r1 = r1 - r4;
0x000E4D        81070001                 Null = r5 AND 0x1;
0x000E4E        64330091                 if NE r1 = r1 - M1;
0x000E4F        DC0D000F                 rts;

 <$sbcdec.init_static_decoder>
0x000E50        F3D00000                 push rLink;
0x000E51        FD0000FF 01B0390E        r9 = Null + -50930;
0x000E53        D5B70005                 M[r5 + 5] = r9;
0x000E54        E1F0008A                 call $sbc.init_static_common;
0x000E55        FD0000FF 01203290        r0 = Null + -52592;
0x000E57        D52B002E                 M[r9 + 46] = r0;
0x000E58        FD0000FF 012030E1        r0 = Null + -53023;
0x000E5A        D52B0030                 M[r9 + 48] = r0;
0x000E5B        FD0000FF 012030C0        r0 = Null + -53056;
0x000E5D        D52B0031                 M[r9 + 49] = r0;
0x000E5E        FD0000FF 01203000        r0 = Null + -53248;
0x000E60        D52B0032                 M[r9 + 50] = r0;
0x000E61        D50B003A                 M[r9 + 58] = Null;
0x000E62        01200010                 r0 = Null + 16;
0x000E63        D52B003B                 M[r9 + 59] = r0;
0x000E64        012005E0                 r0 = Null + 1504;
0x000E65        D52B003E                 M[r9 + 62] = r0;
0x000E66        E1F0006D                 call $sbcdec.reset_decoder;
0x000E67        E1F00110                 call $sbcdec.init_tables;
0x000E68        DDF0FE87                 jump $pop_rLink_and_rts;

 <$sbcenc.init_static_encoder>
0x000E69        F3D00000                 push rLink;
0x000E6A        FD0000FF 01B0390E        r9 = Null + -50930;
0x000E6C        D5B70004                 M[r5 + 4] = r9;
0x000E6D        E1F00071                 call $sbc.init_static_common;
0x000E6E        FD0000FF 01203210        r0 = Null + -52720;
0x000E70        D52B0001                 M[r9 + 1] = r0;
0x000E71        FD0000FF 01203100        r0 = Null + -52992;
0x000E73        D52B0003                 M[r9 + 3] = r0;
0x000E74        0120033C                 r0 = Null + 828;
0x000E75        D52B0005                 M[r9 + 5] = r0;
0x000E76        FD0000FF 012030D1        r0 = Null + -53039;
0x000E78        D52B0006                 M[r9 + 6] = r0;
0x000E79        01200010                 r0 = Null + 16;
0x000E7A        D52B0010                 M[r9 + 16] = r0;
0x000E7B        E1F000EA                 call $sbcenc.reset_encoder;
0x000E7C        E1F00100                 call $sbcenc.init_tables;
0x000E7D        DDF0FE72                 jump $pop_rLink_and_rts;

 <$sbcdec.private.init_tables>
0x000E7E        F3D00000                 push rLink;
0x000E7F        01300011                 r1 = Null + 17;
0x000E80        FD0000FF 094039EC        r2 = Null + M[$flash.windowed_data16.address];
0x000E82        D12B002E                 r0 = M[r9 + 46];
0x000E83        5000002F                 I0 = Null + r0;
0x000E84        01200000                 r0 = Null + 0;
0x000E85        01300080                 r1 = Null + 128;
0x000E86        E1F0F98B                 call $flash.copy_to_dm_24;
0x000E87        D12B0030                 r0 = M[r9 + 48];
0x000E88        5000002F                 I0 = Null + r0;
0x000E89        0120024A                 r0 = Null + 586;
0x000E8A        0130000F                 r1 = Null + 15;
0x000E8B        E1F0F986                 call $flash.copy_to_dm_24;
0x000E8C        D12B0031                 r0 = M[r9 + 49];
0x000E8D        5000002F                 I0 = Null + r0;
0x000E8E        01200218                 r0 = Null + 536;
0x000E8F        01300011                 r1 = Null + 17;
0x000E90        E1F0F981                 call $flash.copy_to_dm_24;
0x000E91        DDF0FE5E                 jump $pop_rLink_and_rts;

 <$stream_copy>
0x000E92        F3D00000                 push rLink;
0x000E93        D1290000                 r0 = M[r7 + 0];
0x000E94        E1F0FE4A                 call $frmbuffer.get_buffer;
0x000E95        5000002F                 I0 = Null + r0;
0x000E96        50C0003F                 L0 = Null + r1;
0x000E97        00C5000F                 r10 = r3 + Null;
0x000E98        D1290001                 r0 = M[r7 + 1];
0x000E99        E1F0FE54                 call $frmbuffer.set_frame_size;
0x000E9A        E1F0FE44                 call $frmbuffer.get_buffer;
0x000E9B        5040002F                 I4 = Null + r0;
0x000E9C        50E0003F                 L4 = Null + r1;
0x000E9D        F3D40000                 pop rLink;
0x000E9E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000E9F        E5F00002                 do $M.stream_copy.loop_passthru;
0x000EA0        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.stream_copy.loop_passthru>
0x000EA1        51C00000                 L0 = Null + 0;
0x000EA2        51E00000                 L4 = Null + 0;
0x000EA3        DC0D000F                 rts;

 <$persistant_warp_message_handler>
0x000EA4        F3D00000                 push rLink;
0x000EA5        FD0000FF 01A033E6        r8 = Null + -52250;
0x000EA7        813300FF                 r1 = r1 AND 0xff;
0x000EA8        D53A000C                 M[r8 + 12] = r1;
0x000EA9        8D440008                 r2 = r2 LSHIFT 8;
0x000EAA        813500FF                 r1 = r3 AND 0xff;
0x000EAB        87430000                 r2 = r2 OR r1;
0x000EAC        D54A0005                 M[r8 + 5] = r2;
0x000EAD        8D660008                 r4 = r4 LSHIFT 8;
0x000EAE        8D350078                 r1 = r3 LSHIFT -8;
0x000EAF        813300FF                 r1 = r1 AND 0xff;
0x000EB0        87630000                 r4 = r4 OR r1;
0x000EB1        D56A000D                 M[r8 + 13] = r4;
0x000EB2        2060006F                 r4 = Null - r4;
0x000EB3        D56A000E                 M[r8 + 14] = r4;
0x000EB4        D13A0003                 r1 = M[r8 + 3];
0x000EB5        E1F0F514                 call $cbops.rate_monitor_op.Initialize;
0x000EB6        DDF0FE39                 jump $pop_rLink_and_rts;

 <$sbcenc.private.init_tables>
0x000EB7        F3D00000                 push rLink;
0x000EB8        FD0000FF 094039EC        r2 = Null + M[$flash.windowed_data16.address];
0x000EBA        D12B0001                 r0 = M[r9 + 1];
0x000EBB        5000002F                 I0 = Null + r0;
0x000EBC        012000C0                 r0 = Null + 192;
0x000EBD        01300080                 r1 = Null + 128;
0x000EBE        E1F0F953                 call $flash.copy_to_dm_24;
0x000EBF        D12B0006                 r0 = M[r9 + 6];
0x000EC0        5000002F                 I0 = Null + r0;
0x000EC1        01200232                 r0 = Null + 562;
0x000EC2        01300010                 r1 = Null + 16;
0x000EC3        E1F0F94E                 call $flash.copy_to_dm_24;
0x000EC4        DDF0FE2B                 jump $pop_rLink_and_rts;

 <$sbc.private.init_tables_common>
0x000EC5        F3D00000                 push rLink;
0x000EC6        FD0000FF 094039EC        r2 = Null + M[$flash.windowed_data16.address];
0x000EC8        D12B0015                 r0 = M[r9 + 21];
0x000EC9        5000002F                 I0 = Null + r0;
0x000ECA        01200180                 r0 = Null + 384;
0x000ECB        01300050                 r1 = Null + 80;
0x000ECC        E1F0F945                 call $flash.copy_to_dm_24;
0x000ECD        D12B0017                 r0 = M[r9 + 23];
0x000ECE        5000002F                 I0 = Null + r0;
0x000ECF        012001F8                 r0 = Null + 504;
0x000ED0        01300020                 r1 = Null + 32;
0x000ED1        E1F0FD32                 call $flash.copy_to_dm;
0x000ED2        DDF0FE1D                 jump $pop_rLink_and_rts;

 <$sbcdec.reset_decoder>
0x000ED3        F3D00000                 push rLink;
0x000ED4        01200010                 r0 = Null + 16;
0x000ED5        D1B70005                 r9 = M[r5 + 5];
0x000ED6        D52B003B                 M[r9 + 59] = r0;
0x000ED7        E1F00097                 call $sbcdec.silence_decoder;
0x000ED8        DDF0FE17                 jump $pop_rLink_and_rts;

 <$one_mic_example_reinitialize>
0x000ED9        F3D00000                 push rLink;
0x000EDA        0160037C                 r4 = Null + 892;
0x000EDB        E1F0FDB9                 call $frame_sync.run_function_table;
0x000EDC        19000AA1                 M[$one_mic_example.reinit] = Null + Null;
0x000EDD        DDF0FE12                 jump $pop_rLink_and_rts;

 <$sbc.init_static_common>
0x000EDE        DC0D000F                 rts;

 <$sco_timing.initialize>
0x000EDF        F3D00000                 push rLink;
0x000EE0        FD0000FF 19A03AAC        M[$M.sco_timing.sco_data_ptr] = r8 + Null;
0x000EE2        D50A0016                 M[r8 + 22] = Null;
0x000EE3        FD0000FF 01303978        r1 = Null + -50824;
0x000EE5        FD000000 01408019        r2 = Null + 32793;
0x000EE7        01500BC4                 r3 = Null + 3012;
0x000EE8        E1F0003D                 call $message.register_handler;
0x000EE9        01300A84                 r1 = Null + 2692;
0x000EEA        FD000000 01408015        r2 = Null + 32789;
0x000EEC        015007DC                 r3 = Null + 2012;
0x000EED        E1F00038                 call $message.register_handler;
0x000EEE        FD0000FF 0130397C        r1 = Null + -50820;
0x000EF0        FD000000 01408016        r2 = Null + 32790;
0x000EF2        01500BD3                 r3 = Null + 3027;
0x000EF3        E1F00032                 call $message.register_handler;
0x000EF4        012008EE                 r0 = Null + 2286;
0x000EF5        FD0000FF 19203AA1        M[$cbuffer.write_port_connect_address] = r0 + Null;
0x000EF7        01200901                 r0 = Null + 2305;
0x000EF8        19200AA2                 M[$cbuffer.write_port_disconnect_address] = r0 + Null;
0x000EF9        DDF0FDF6                 jump $pop_rLink_and_rts;

 <$frame_sync.sco_initialize>
0x000EFA        F3D00000                 push rLink;
0x000EFB        D509000F                 M[r7 + 15] = Null;
0x000EFC        D5090010                 M[r7 + 16] = Null;
0x000EFD        D509000D                 M[r7 + 13] = Null;
0x000EFE        D1390006                 r1 = M[r7 + 6];
0x000EFF        E410002F                 rMAC = Null + 1;
0x000F00        D9030000                 Div = rMAC / r1;
0x000F01        D9300001                 r1 = DivResult;
0x000F02        9133007F                 r1 = r1 ASHIFT -1;
0x000F03        D539000E                 M[r7 + 14] = r1;
0x000F04        D1A90009                 r8 = M[r7 + 9];
0x000F05        D13A0002                 r1 = M[r8 + 2];
0x000F06        D1AA0003                 r8 = M[r8 + 3];
0x000F07        00BA000F                 r9 = r8 + Null;
0x000F08        E003000F                 call r1;
0x000F09        D139000B                 r1 = M[r7 + 11];
0x000F0A        DD00FDE5                 if EQ jump $pop_rLink_and_rts;
0x000F0B        D1990011                 r7 = M[r7 + 17];
0x000F0C        E003000F                 call r1;
0x000F0D        DDF0FDE2                 jump $pop_rLink_and_rts;
...

 <$message.register_handler_with_mask>
0x000F22        8966FFFF                 r4 = r4 XOR 0xffff;
0x000F23        D5630003                 M[r1 + 3] = r4;
0x000F24        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x000F25        8520FFFF                 r0 = Null OR 0xffff;
0x000F26        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x000F27        F3D00000                 push rLink;
0x000F28        E1F0FD9E                 call $block_interrupts;
0x000F29        09200AA6                 r0 = Null + M[$message.last_addr];
0x000F2A        D5230000                 M[r1 + 0] = r0;
0x000F2B        19300AA6                 M[$message.last_addr] = r1 + Null;
0x000F2C        D5430001                 M[r1 + 1] = r2;
0x000F2D        D5530002                 M[r1 + 2] = r3;
0x000F2E        E1F0FD88                 call $interrupt.unblock;
0x000F2F        DDF0FDC0                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x000F30        F3D00000                 push rLink;
0x000F31        01300A78                 r1 = Null + 2680;
0x000F32        FD000000 01408007        r2 = Null + 32775;
0x000F34        01500A14                 r3 = Null + 2580;
0x000F35        E1F0FFF0                 call $message.register_handler;
0x000F36        FD0000FF 013037F8        r1 = Null + -51208;
0x000F38        85408008                 r2 = Null OR 0x8008;
0x000F39        01500A14                 r3 = Null + 2580;
0x000F3A        E1F0FFEB                 call $message.register_handler;
0x000F3B        DDF0FDB4                 jump $pop_rLink_and_rts;

 <$wall_clock.initialise>
0x000F3C        F3D00000                 push rLink;
0x000F3D        FD0000FF 013037FC        r1 = Null + -51204;
0x000F3F        8540801C                 r2 = Null OR 0x801c;
0x000F40        01500840                 r3 = Null + 2112;
0x000F41        E1F0FFE4                 call $message.register_handler;
0x000F42        01300A80                 r1 = Null + 2688;
0x000F43        8540801D                 r2 = Null OR 0x801d;
0x000F44        01500CF1                 r3 = Null + 3313;
0x000F45        E1F0FFE0                 call $message.register_handler;
0x000F46        DDF0FDA9                 jump $pop_rLink_and_rts;

 <$interrupt.initialise>
0x000F47        01200015                 r0 = Null + 21;
0x000F48        1920FE14                 M[0xfffe14] = r0 + Null;
0x000F49        01200311                 r0 = Null + 785;
0x000F4A        1920FE15                 M[0xfffe15] = r0 + Null;
0x000F4B        E420002F                 r0 = Null + 1;
0x000F4C        1920FE11                 M[0xfffe11] = r0 + Null;
0x000F4D        1920FE12                 M[0xfffe12] = r0 + Null;
0x000F4E        1920FE13                 M[0xfffe13] = r0 + Null;
0x000F4F        1900FE4E                 M[0xfffe4e] = Null + Null;
0x000F50        85EE0080                 rFlags = rFlags OR 0x80;
0x000F51        DC0D000F                 rts;
0x000F52        DDF0F0AE                 jump $reset;
0x000F53        DDF0F0AF                 jump $interrupt.handler;

 <$stack.initialise>
0x000F54        FD0000FF 01B0320F        r9 = Null + -52721;
0x000F56        19B0FE67                 M[0xfffe67] = r9 + Null;
0x000F57        FD0000FF 01B03150        r9 = Null + -52912;
0x000F59        19B0FE66                 M[0xfffe66] = r9 + Null;
0x000F5A        19B0FE68                 M[0xfffe68] = r9 + Null;
0x000F5B        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x000F5C        E420002F                 r0 = Null + 1;
0x000F5D        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x000F5E        DC0D000F                 rts;

 <$cbuffer.initialise>
0x000F5F        F3D00000                 push rLink;
0x000F60        0130077C                 r1 = Null + 1916;
0x000F61        85408001                 r2 = Null OR 0x8001;
0x000F62        015006E6                 r3 = Null + 1766;
0x000F63        E1F0FFC2                 call $message.register_handler;
0x000F64        DDF0FD8B                 jump $pop_rLink_and_rts;

 <$sbcenc.reset_encoder>
0x000F65        D1B70004                 r9 = M[r5 + 4];
0x000F66        D12B0003                 r0 = M[r9 + 3];
0x000F67        D52B0011                 M[r9 + 17] = r0;
0x000F68        5000002F                 I0 = Null + r0;
0x000F69        01C00050                 r10 = Null + 80;
0x000F6A        01200000                 r0 = Null + 0;
0x000F6B        E5F00002                 do $M.sbcenc.reset_encoder.asf_init_loop1;
0x000F6C        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.sbcenc.reset_encoder.asf_init_loop1>
0x000F6D        DC0D000F                 rts;

 <$sbcdec.silence_decoder>
0x000F6E        D12B0032                 r0 = M[r9 + 50];
0x000F6F        D52B003C                 M[r9 + 60] = r0;
0x000F70        D12B0032                 r0 = M[r9 + 50];
0x000F71        5010002F                 I1 = Null + r0;
0x000F72        01C000A0                 r10 = Null + 160;
0x000F73        01200000                 r0 = Null + 0;
0x000F74        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop1;
0x000F75        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop1>
0x000F76        DC0D000F                 rts;

 <$sbcdec.init_tables>
0x000F77        F3D00000                 push rLink;
0x000F78        D1B70005                 r9 = M[r5 + 5];
0x000F79        E1F0FF05                 call $sbcdec.private.init_tables;
0x000F7A        E1F0FF4B                 call $sbc.private.init_tables_common;
0x000F7B        DDF0FD74                 jump $pop_rLink_and_rts;

 <$sbcenc.init_tables>
0x000F7C        F3D00000                 push rLink;
0x000F7D        D1B70004                 r9 = M[r5 + 4];
0x000F7E        E1F0FF39                 call $sbcenc.private.init_tables;
0x000F7F        E1F0FF46                 call $sbc.private.init_tables_common;
0x000F80        DDF0FD6F                 jump $pop_rLink_and_rts;

 <$error>
0x000F81        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x000F82        09B00AA4                 r9 = Null + M[$error.handler];
0x000F83        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x000F84        E400001F                 break;
0x000F85        DDF0FFFF                 jump $M.error.error_loop;

 <$sco_decoder.wbs.initialize>
0x000F86        D50B003F                 M[r9 + 63] = Null;
0x000F87        D50B0041                 M[r9 + 65] = Null;
0x000F88        D50B0040                 M[r9 + 64] = Null;
0x000F89        D50B0042                 M[r9 + 66] = Null;
0x000F8A        DC0D000F                 rts;

 <$message.initialise>
0x000F8B        0920E000                 r0 = Null + M[0xffe000];
0x000F8C        FD0000FF 19203AA7        M[$message.last_seq_sent] = r0 + Null;
0x000F8E        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$sco_data.buffer_speech
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0001C4	$usb_in.copy_struc
        800000 000A8C FF3A88 0000C0 
        000008 000000 000000 000000 
        000000 000000 

0x0001CE	$interrupt.start_time
        000000 

0x0001CF	$wbs_frame_encode.cbuf_in_ptr
        000000 

0x0001D0	$usb_in_rm.sr_hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0001DC	$wbs_frame_encode.cbuf_out_ptr
        000000 000000 

0x0001DE	$M.system_config.data.snd_pass_thru_obj
        FF3773 000A36 

0x0001E0	$usb_out_rm.sr_hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0001EC	$sbc.audio_sample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0002EC	$sbc.win_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00033C	$sbcenc.analysis_y
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00034C	$sbc.scale_factor
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00035C	$sbc.bitneed
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00036C	$sbc.bits
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00037C	$M.system_config.data.reinitialize_table
        000EFA 0007E0 000000 000000 

0x000380	$cbops.scratch.mem2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003FF	$scratch.s0
        000000 

0x000400	$usb_in_rm.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0005E0	$M.wbs.decoder.frame_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0005FE	$M.system_config.data.send_mode_table
        FF3A6C 000000 

0x000600	$sco_data.mem1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x00072F	$usb_out_rm.copy_op.mtu_next
0x00072F	$usb_out_rm.copy_op
        000A16 

0x000730	$usb_out_rm.copy_op.main_next
        FFFFFF 

0x000731	$usb_out_rm.copy_op.func
        FF3A9A 

0x000732	$usb_out_rm.copy_op.param
        000002 000001 FF33B6 FFFFF8 
        000008 FF3780 000078 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00077C	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0x000780	$usb_in.right.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0007E0	$sco_data.object
        900001 BC2001 FF3A8E 000A95 
        002000 002000 000000 000000 
        000000 000A73 000040 000F0E 
        000000 000000 000000 000000 
        000000 FF3954 BC200C 000000 
        FF3A91 00001E 000000 000000 
        000000 000000 000A98 000078 
        00001E 000B92 000596 

0x0007FF	$scratch.s2
        000000 

0x000800	$sco_data.mem4
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00090E	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00097C	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0009D4	$cbuffer.port_buffer_size
0x0009D4	$cbuffer.read_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0009E0	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0009EC	$cbuffer.port_limit_addr
0x0009EC	$cbuffer.read_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0009F8	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000A04	$cbops.scratch.BufferTable
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000A16	$usb_out_rm.sw_copy_op.mtu_next
0x000A16	$usb_out_rm.sw_copy_op
        FFFFFF 

0x000A17	$usb_out_rm.sw_copy_op.main_next
        00072F 

0x000A18	$usb_out_rm.sw_copy_op.func
        FF3A97 

0x000A19	$usb_out_rm.sw_copy_op.param
        000000 000002 000000 000000 
        FF3310 0001E0 0001E0 FF33F3 
        000000 000000 000000 000000 
        000000 000000 

0x000A27	$M.App.scheduler.tasks
        000000 00000C 000003 000000 
        000000 000000 000000 000000 
        000000 000D7A 00000A 000D6F 
        000000 000D6D 000001 

0x000A36	$M.system_config.data.snd_stream_map_sco_out
        000A98 000000 000000 000078 
        000000 000C7C 000B2F 000000 
        000000 000000 000000 000000 
        000000 

0x000A43	$M.system_config.data.rcv_stream_map_dac
        000A92 000000 000000 000078 
        000020 000C7C 000B2F 000000 
        000000 000000 000000 000000 
        000000 

0x000A50	QCRBNbYNBJjgGLwIldHWLl8sYVMDF/RRfmLZ+vS9Yno=
        7FFFFF 400000 2AAAAB 200000 
        19999A 155555 124925 100000 
        0E38E4 0CCCCD 0BA2E9 

0x000A5B	$M.system_config.data.rcv_funcs
        000B1B FF3A94 000000 000E92 
        FF3A9D 000000 000AA8 FF3A94 
        000000 000000 

0x000A65	$usb_out_rm.copy_struc
        000A04 000A16 00072F 000001 
        000A92 000001 FF3A8B 000001 
        FF39FD 

0x000A6E	$usb_out.copy_struc
        FF3A8B 80000F FFFFF8 000030 
        000000 

0x000A73	$sco_data.sco_decoder
        000DC2 000CF2 000F86 000000 
        7FFFFF 

0x000A78	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0x000A7C	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0x000A80	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0x000A84	$M.sco_timing.sco_param.message_struc
        000000 000000 000000 000000 

0x000A88	$M.frame_sync.usb_in_stereo_audio_copy.usb_in_state_fn
        000130 000143 000143 00016D 

0x000A8C	$usb_in.cbuffer_struc
        000060 FF3980 FF3980 

0x000A8F	$usb_in_rm.cbuffer_struc
        0001E0 000400 000400 

0x000A92	$usb_out_rm.cbuffer_struc
        0001E0 FF3400 FF3400 

0x000A95	$sco_data.sco_in.cbuffer_struc
        00010E FF3600 FF3600 

0x000A98	$sco_data.encoder.cbuffer_struc
        00010E 000800 000800 

0x000A9B	$M.system_config.data.snd_process_streams
        FF3773 000A36 000000 

0x000A9E	$cbops.rate_monitor_op
        000000 000350 00035B 

0x000AA1	$one_mic_example.reinit
        000001 

0x000AA2	$cbuffer.write_port_disconnect_address
        000000 

0x000AA3	$cbuffer.read_port_disconnect_address
        000000 

0x000AA4	$error.handler
        000000 

0x000AA5	$interrupt.block_count
        000000 

0x000AA6	$message.last_addr
        FFFFFF 

0x000AA7	$message.queue_write_ptr
        000000 

0x000AA8	$message.long_message_size
        000000 

0x000AA9	$pskey.last_addr
        FFFFFF 

0x000AAA	$timer.last_addr
        FFFFFF 

0x000AAB	$sco_last_packet_size
        000000 

0x000AAC	$next_packet_value
        000000 

0x000AAD	$M.sco_timing.sco_rcv_trigger
        000000 

0x000AAE	$M.frame_sync.usb_out_mono_copy.last_limit
        FFFFFF 

0x000AAF	$M.frame_sync.usb_out_mono_copy.delay_buffer_read
        000001 


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sbcdec.synthesis_vch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30A0	$sbc.loudness_offset_ram
0xFF30A0	$sbc.loudness_offset_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30C0	$sbcdec.bitmask_lookup_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF30D1	$sbcenc.level_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30E1	$sbcdec.levelrecip_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF30F0	nLn4gt04bP5MZrmmN7/YwXRpTK/dh0aIoVIC61TEWrI=
        FE8D2F FF79F6 004647 043253 
        004510 FE5DAC F946D5 03EAF1 
        0702B8 00F96E EBE55D ED1295 
        7FFFFF 5E4D6D 2C305E 

0xFF30FF	$scratch.s1
        000000 

0xFF3100	$sbcenc.analysis_xch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3150	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3210	$sbcenc.analysis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3290	$sbcdec.synthesis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3310	$sra_coeffs
        77886E 76B443 750EB9 729D5E 
        6F6866 6B7A8E 66E0EC 61AAB9 
        5BE912 55AEB0 4F0F9C 4820DE 
        40F827 39AB7B 3250D9 2AFDE5 
        23C798 1CC1F0 15FFA5 0F91EA 
        098834 03F003 FED4C1 FA3F9E 
        F63781 F2C100 EFDE5A ED8F8D 
        EBD263 EAA293 E9F9EB E9D079 
        EA1CC2 EAD3F9 EBEA40 ED52E4 
        EF00A2 F0E5E4 F2F503 F52088 
        F75B60 F99918 FBCE0A FDEF88 
        FFF403 01D324 0385E3 050696 
        0650F6 076222 083891 08D40B 
        093591 095F45 09544B 0918AB 
        08B129 082324 077469 06AB14 
        05CD5F 04E18A 03EDAC 02F79D 
        0204D5 011A53 003C8C FF6F57 
        FEB5E5 FE12BA FD87A8 FD15D1 
        FCBDB0 FC7F1F FC5965 FC4B43 
        FC5308 FC6EA2 FC9BB4 FCD7A6 
        FD1FBF FD7133 FDC93A FE2522 
        FE825B FEDE87 FF3786 FF8B7B 
        FFD8DA 001E64 005B2E 008E9E 
        00B867 00D889 00EF44 00FD15 
        0102AB 0100DE 00F8A5 00EB0C 
        00D928 00C411 00ACD8 00947E 
        007BEE 0063F8 004D4E 00387E 
        0025F5 0015FD 0008BA FFFE36 
        FFF65B FFF0FA FFEDD3 FFEC94 
        FFECE4 FFEE64 FFF0B3 FFF37A 
        FFF665 FFF92F FFFBA2 FFFD97 
        FFFEF8 FFFFC2 

0xFF338E	CENPYIoCmMH2aSfiJQlkvO4M75dRSzcyEylai+MceN4=
0xFF338E	$M.iir_resamplev2.Up_1_Down_3.filter
        000003 

0xFF338F	U3SWu6VW2q7/NTAIRRV0Q/A2lir4nRikpFAAs28Mh4s=
        000000 

0xFF3390	3lDbAamUHRmPCSO/hoyJUU/mXiKAwhR3GX7tag0ReXM=
        000000 

0xFF3391	zI90E7fwnz1AO2sDUc44E/dgLq+4+R8dLC3sn1FZN28=
        000000 

0xFF3392	Jeye5yfHRpOFrU/Q67HHs3b7tTXxdZzHoe5ZMyhuaSk=
        000000 

0xFF3393	kx96fY2hJu+4d3599HcxGYajjoVLQcsaD6b9x9DQleU=
        0005D0 

0xFF3394	y+NF1STrhbyQGxKSOFZbsW/OCIE4C6yge734fY1TSnU=
        00000A 

0xFF3395	s1VJGUoXmd6A7sy54Hn55QmPhCHSHVSEHvK2t74tqEo=
        000013 

0xFF3396	meO4ExUPPXxbRa6hNAeVSkNp4++Mm9FZGcD2Tu1+10E=
        000001 

0xFF3397	T394v7c/90Ebp5X8SXa1E2UojNbhvYAFPdE+tWJn6/k=
        000000 

0xFF3398	ye2WHBnxZwSDWpNyX661uN6bbYcqoU7VCZO6KOfzDcg=
        FFFFFA 

0xFF3399	rNBcgWHzKpfKmHHEZtk4T2OdEmf4HN8/yUfchqbLUqY=
        FF33DE 

0xFF339A	UxyOBkVFbbHPs/wt3pdX8oDjkl06zfKQPxSrJ9H7FB4=
        000000 

0xFF339B	waws3Yl9n6PwLrfwDmUh6BvKVzw27LTnHU6FiVJG7XA=
        000003 

0xFF339C	R59vwHFLU19xYWA4688ezAdAGbV8VSRkOScdNRyEyk4=
        000A31 

0xFF339D	XRwtdLIfDOnIOLazIbdzLiP7DtO1kcnZumhbPX2+I+s=
        00A070 FDA52D 0D9A4C DB00B8 
        3CD7BA BECFDE 2D9EE4 EC8839 

0xFF33A5	6A91DSNlpbNQcXmcMG9eQ9+5/Ykzo2jkcRDquVIXxjU=
        000005 

0xFF33A6	lWknddiAWLharYJoHY4yuKB8fCvJDIk/jhDfURZpSi0=
        0013CF 04EB12 E763CB 396614 
        B15F84 42C01E DE81E9 

0xFF33AD	rLLdoEa+IE1IH7MkSfvus/f8EjYMCrEHqW9+qjnO1dQ=
        000004 

0xFF33AE	+WII0oov2CsGTZvvrckAqF+zlPmzLuGUSgf/Dy2wzmE=
        005D50 047CA2 E7CCBC 3ADF0A 
        AD5F50 46A388 DCEA05 

0xFF33B5	P1LaIyGTJJTGLsjMsczGYl4Au8jWW3KJjpZWo96f1co=
        000004 

0xFF33B6	BrdT5uv4svWrmgq/AZ1lTV52f1H6c2xHE3L4UnPNizU=
0xFF33B6	$M.iir_resamplev2.Up_3_Down_1.filter
        000000 

0xFF33B7	A6D4eM3qX7ZNKN/1e2h70ZW1dPFDRnqjbEJ01qBA/4A=
        2AAAAA 

0xFF33B8	bLRqQyj2GXBk3ryr0gtdeTggtjzXlOLztgHdLF/gKvk=
        000000 

0xFF33B9	rHk21a06ZvCN6FMF/4jGwAfJh0tSHaqCqd40WnCwr+o=
        000000 

0xFF33BA	Xq6V6+EYQWbzZw7Cu5cvR3xsaVyafVL2bcroJdDEnPM=
        000000 

0xFF33BB	jR8tT2knKLISaxjYNa2pQVP8tbOx8OmHxNyTHrx26AQ=
        000768 

0xFF33BC	/F30LyULmcDEOb67dIji/65bWMiNfA5cwzeoVod9xD4=
        00000A 

0xFF33BD	RLHTNaR3W03SMdcmNdmA7xBPlhhIEOmxLnHnag3SnVk=
        000013 

0xFF33BE	NXW7d2ndm64kEZQCSdrb5SIvwKL/2es46GTUhubRlNc=
        000003 

0xFF33BF	3E1UDUvNrNQ3CTsT2lpp+c3hsZeuX4ueuzswk8vJSeo=
        000000 

0xFF33C0	3GU6n1jv4tNZRtoe2Fbc7U10rJMT0pKSa4svKOq8i7g=
        FFFFF9 

0xFF33C1	h1sCXzAi7frLZjp2PCWyT5gEOGTmW0ae4itYX+I+u+s=
        FF30F0 

0xFF33C2	lZc6S6LLKmfSViK5KRBSXEaMQDcTjCBOvnD9qcWFvLI=
        2AAAAC 

0xFF33C3	lIjjK+afdH6+LSDfmm1xfRv4YOzudcLCP9DwwYfCrpc=
        000000 

0xFF33C4	X1LfxL3xp9uguXpp78/72TBhIZtub6s0ebYaLHnMB5g=
        000A31 

0xFF33C5	U8dtnoJvkAph+cVeZD3I7JGJG+OpfcjwJF3kG5ZdY2o=
        01D0BF FDA0AE 0DEAC7 D9D456 
        3F01E9 BC83FF 2F0233 EC2249 

0xFF33CD	uEtjjS0du94uMXbl10g5vtVWyVx3x9R2DG+zUyOEuLA=
        000005 

0xFF33CE	9qemrIoOX4mgSWdNKuIzVquClTWLi03gGaTgGrg9Uuk=
        00320F 04E927 E6F590 3AF29B 
        AEF1B1 44AE60 DDCC80 

0xFF33D5	+rZhNNin5cMEHt0ivuJnYaZrzZjLhtSqDfuCpyyik8Y=
        000004 

0xFF33D6	/aMvBeNuKJiavLpuPhzzizHUdmSAvWwZOLR+uKDlaY8=
        002858 048911 E72FCB 3CD517 
        AA724C 48E472 DC297B 

0xFF33DD	RpWhcgwR8cXCiHFrKBd+mEjzQtQGw7lcadscU/nOjOE=
        000004 

0xFF33DE	5T1zYn2ShUUq+/y0sXkVGiiTfwRgyYjfYWhUs2WniO0=
        0BE279 2DC44C 517658 6F2863 
        7FFFFF 

0xFF33E3	$usb_in_rm.sw_rate_op.mtu_next
0xFF33E3	$usb_in_rm.sw_rate_op
        FF370E 

0xFF33E4	$usb_in_rm.sw_rate_op.main_next
        FF3967 

0xFF33E5	$usb_in_rm.sw_rate_op.func
        000A9E 

0xFF33E6	$usb_in_rm.sw_rate_op.param
        000002 000640 00000A 003E80 
        00000A 400000 00000B 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF33FB	$audio_copy_timer_struc
        000000 000000 000000 000000 

0xFF33FF	$one_mic_example.sys_mode
        000000 

0xFF3400	$usb_out_rm.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF35E0	$sco_data.buffer_ola
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF35F8	$persistant_warp_message_struc
        000000 000000 000000 000000 

0xFF35FC	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0xFF3600	$sco_data.mem2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF370E	$usb_in_rm.copy_op
0xFF370E	$usb_in_rm.copy_op.mtu_next
        FFFFFF 

0xFF370F	$usb_in_rm.copy_op.main_next
        FF33E3 

0xFF3710	$usb_in_rm.copy_op.func
        FF3A9A 

0xFF3711	$usb_in_rm.copy_op.param
        000000 000002 FF338E FFFFF8 
        000008 FF3780 000078 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF375B	$cbuffer.port_offset_addr
0xFF375B	$cbuffer.read_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3767	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3773	$M.system_config.data.snd_stream_map_adc
        000A8F 000000 000000 000078 
        000020 000CA7 000C57 000000 
        000000 000000 000000 000000 
        000000 

0xFF3780	$cbops.scratch.mem1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF37F8	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0xFF37FC	$wall_clock.message_struc
        000000 000000 000000 000000 

0xFF3800	$sco_data.mem3
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF390E	$sbc.sbc_common_data_array
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        0001EC 0002EC 000000 FF30A0 
        00034C 000000 00035C 00036C 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3954	$sco_data.plc_obj
        000000 000000 FF35E0 000A95 
        0003F8 666666 7FFFFF 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF3967	$usb_in_rm.sw_copy_op
0xFF3967	$usb_in_rm.sw_copy_op.mtu_next
        FF33E3 

0xFF3968	$usb_in_rm.sw_copy_op.main_next
        FFFFFF 

0xFF3969	$usb_in_rm.sw_copy_op.func
        FF3A97 

0xFF396A	$usb_in_rm.sw_copy_op.param
        000002 000001 000000 000000 
        FF3310 0001D0 0001D0 FF33F4 
        000000 000000 000000 000000 
        000000 000000 

0xFF3978	$M.sco_timing.bt_addr.message_struc
        000000 000000 000000 000000 

0xFF397C	$M.sco_timing.sco_param_failed.message_struc
        000000 000000 000000 000000 

0xFF3980	$usb_in.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF39E0	$flash.code.address
	-------- [0x000C octets]

0xFF39E4	$flash.data16.address
	-------- [0x000C octets]

0xFF39E8	$flash.data24.address
	-------- [0x000C octets]

0xFF39EC	$flash.windowed_data16.address
	-------- [0x000C octets]

0xFF39F0	$M.system_config.data.rcv_stream_map_sco_in
        000A95 000000 000000 000078 
        000000 000CA7 000C57 000000 
        000000 000000 000000 000000 
        000000 

0xFF39FD	$cbops.scratch.cbuffer_struc2
        000078 000380 000380 

0xFF3A00	$usb_out.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3A60	$M.sco_timing.wallclock_obj
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3A6C	$M.system_config.data.snd_funcs
        000B1B 000A9B 000000 000E92 
        0001DE 000000 000AA8 000A9B 
        000000 000000 

0xFF3A76	$usb_in_rm.copy_struc
        000A04 FF370E FF3967 000001 
        000A8C 000001 000A8F 000001 
        FF39FD 

0xFF3A7F	$interrupt.isr_call_table
        000ABE 000F81 0006A3 000F81 
        000F81 000F81 000F81 000F81 
        000F81 

0xFF3A88	$usb_in.right.cbuffer_struc
        000060 000780 000780 

0xFF3A8B	$usb_out.cbuffer_struc
        000060 FF3A00 FF3A00 

0xFF3A8E	$sco_data.port_in.cbuffer_struc
        000117 000600 000600 

0xFF3A91	$sco_data.port_out.cbuffer_struc
        00010E FF3800 FF3800 

0xFF3A94	$M.system_config.data.rcv_process_streams
        FF39F0 000A43 000000 

0xFF3A97	$cbops.rate_adjustment_and_shift
        000000 000BF4 00024A 

0xFF3A9A	$cbops_iir_resamplev2
        000000 0008C7 00065F 

0xFF3A9D	$M.system_config.data.rcv_pass_thru_obj
        FF39F0 000A43 

0xFF3A9F	$M.system_config.data.receive_mode_table
        000A5B 000000 

0xFF3AA1	$cbuffer.write_port_connect_address
        000000 

0xFF3AA2	$cbuffer.read_port_connect_address
        000000 

0xFF3AA3	$cbuffer.auto_mcu_message
        000001 000000 

0xFF3AA5	$interrupt.total_time
        000000 

0xFF3AA6	$message.queue_read_ptr
        000000 

0xFF3AA7	$message.last_seq_sent
        000000 

0xFF3AA8	$pskey.request_in_progress
        000000 

0xFF3AA9	$timer.id
        000001 

0xFF3AAA	$wall_clock.last_addr
        FFFFFF 

0xFF3AAB	$sco_port_data
        000000 

0xFF3AAC	$M.sco_timing.sco_data_ptr
        000000 

0xFF3AAD	$M.sco_timing.rcv_proc_trigger
        000000 

0xFF3AAE	$M.frame_sync.usb_out_mono_copy.ZeroBuf
        000000 

0xFF3AAF	$wbs_frame_encode.can_idle
        000000 


------------------------------------------------------------------------
Region: flash.windowed_data16
------------------------------------------------------------------------
0x000000	$sbcdec.synthesis_coefs_m8
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 005A82 007AA5 
        007D86 00A57D 00865A 00827A 
        00471C 00ED82 0075A1 0018F8 
        00B86A 006D99 009592 0067E7 
        000748 007D8A 005FB8 00E313 
        0030FB 00C589 00BE51 007641 
        00AFCF 00043B 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        0018F8 00B8B8 00E313 006A6D 
        009982 0075A1 007D8A 005F95 
        009267 00471C 00EDE7 000748 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        00E707 004847 001CED 009592 
        00677D 008A5F 008275 00A16A 
        006D99 00B8E3 001318 00F8B8 
        00CF04 003B76 0041AF 0089BE 
        005130 00FBC5 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        00B8E3 00137D 008A5F 00E707 
        004895 009267 006A6D 009918 
        00F8B8 008275 00A147 001CED 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 00A57D 00865A 
        00827A 005A82 007AA5 007D86 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        008000 000080 000000 008000 
        000080 000000 008000 000080 
        000000 008000 000080 000000 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 

0x0000C0	$sbcenc.analysis_coefs_m8
        005A82 007A6A 006D99 007641 
        00AF7D 008A5F 007FFF 00FF7D 
        008A5F 007641 00AF6A 006D99 
        005A82 007A47 001CED 0030FB 
        00C518 00F8B8 000000 0000E7 
        000748 00CF04 003BB8 00E313 
        00A57D 0086E7 000748 0030FB 
        00C56A 006D99 007FFF 00FF6A 
        006D99 0030FB 00C5E7 000748 
        00A57D 008682 0075A1 0089BE 
        0051B8 00E313 000000 000047 
        001CED 007641 00AF7D 008A5F 
        00A57D 008682 0075A1 00CF04 
        003B47 001CED 007FFF 00FF47 
        001CED 00CF04 003B82 0075A1 
        00A57D 008618 00F8B8 007641 
        00AF6A 006D99 000000 000095 
        009267 0089BE 0051E7 000748 
        005A82 007AB8 00E313 0089BE 
        005118 00F8B8 007FFF 00FF18 
        00F8B8 0089BE 0051B8 00E313 
        005A82 007A6A 006D99 00CF04 
        003B82 0075A1 000000 00007D 
        008A5F 0030FB 00C595 009267 
        005A82 007A47 001CED 0089BE 
        0051E7 000748 007FFF 00FFE7 
        000748 0089BE 005147 001CED 
        005A82 007A95 009267 00CF04 
        003B7D 008A5F 000000 000082 
        0075A1 0030FB 00C56A 006D99 
        00A57D 00867D 008A5F 00CF04 
        003BB8 00E313 007FFF 00FFB8 
        00E313 00CF04 003B7D 008A5F 
        00A57D 0086E7 000748 007641 
        00AF95 009267 000000 00006A 
        006D99 0089BE 005118 00F8B8 
        00A57D 008618 00F8B8 0030FB 
        00C595 009267 007FFF 00FF95 
        009267 0030FB 00C518 00F8B8 
        00A57D 00867D 008A5F 0089BE 
        005147 001CED 000000 0000B8 
        00E313 007641 00AF82 0075A1 
        005A82 007A95 009267 007641 
        00AF82 0075A1 007FFF 00FF82 
        0075A1 007641 00AF95 009267 
        005A82 007AB8 00E313 0030FB 
        00C5E7 000748 000000 000018 
        00F8B8 00CF04 003B47 001CED 

0x000180	$sbc.win_coefs_m8
        000000 000000 001486 00002C 
        00FE00 0048B2 00006B 00FE00 
        00956A 0000C1 008400 00E9CC 
        000107 00B201 0013BD 000105 
        006E00 00D3E3 000076 003FFF 
        00E890 00FF27 00C4FE 00359E 
        0002E5 00CD04 001C6E 00055A 
        00CF06 0086CE 000780 008908 
        0024A4 00084E 001907 00D7D1 
        00069F 00B404 0088FB 00017F 
        0044FD 007BAE 00F881 000DF2 
        00A1BA 00EBFE 0058E4 00C4A2 
        0022D0 00C22A 007CFA 0031F5 
        006738 00EEC6 003F1C 008844 
        003B3C 004810 00D84A 00708A 
        004B3D 00B24A 00708A 004810 
        00D844 003B3C 003F1C 008838 
        00EEC6 0031F5 00672A 007CFA 
        00DD2F 003EE4 00C4A2 00EBFE 
        0058F2 00A1BA 00F881 000DFD 
        007BAE 00017F 004404 0088FB 
        00069F 00B407 00D7D1 00084E 
        001908 0024A4 000780 008906 
        0086CE 00055A 00CF04 001C6E 
        00FD1A 0033FE 00359E 00FF27 
        00C4FF 00E890 000076 003F00 
        00D3E3 000105 006E01 0013BD 
        000107 00B200 00E9CC 0000C1 
        008400 00956A 00006B 00FE00 
        0048B2 00002C 00FE00 001486 

0x0001F8	$sbc.loudness_offset_m8
0x0001F8	$sbc.loudness_offset
        FFFFFE 000000 000000 000000 
        000000 000000 000000 000001 
        FFFFFD 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 

0x000218	$sbcdec.bitmask_lookup
        000000 000000 000001 000000 
        000300 000007 000000 000F00 
        00001F 000000 003F00 00007F 
        000000 00FF00 0001FF 000003 
        00FF00 0007FF 00000F 00FF00 
        001FFF 00003F 00FF00 007FFF 
        0000FF 00FF00 

0x000232	$sbcenc.level_coefs
        000000 008000 000180 000003 
        008000 000780 00000F 008000 
        001F80 00003F 008000 007F80 
        0000FF 008001 00FF80 0003FF 
        008007 00FF80 000FFF 00801F 
        00FF80 003FFF 00807F 00FF80 

0x00024A	$sbcdec.levelrecip_coefs
        00AAAA 00AB92 004925 008888 
        008984 002108 008208 002181 
        000204 008080 008180 004020 
        008020 000880 001002 008008 
        000180 000400 008002 000080 
        000100 008000 008000 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 2736 of 32768 words used, 30032 words available in 1 blocks
  DM2_REGION: 2736 of 32768 words used, 30032 words available in 1 blocks
  flash.windowed_data16: 609 of 16777216 words used, 16776607 words available in 1 blocks
TOTAL: 6081 of 16842752 words used, 16836671 words available in 3 blocks

CODE:
  PM_REGION: 3983 of 11264 words used, 7281 words available in 1 blocks
TOTAL: 3983 of 11264 words used, 7281 words available in 1 blocks

