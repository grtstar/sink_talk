
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF0003D                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        192001C4                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0920FE18                 r0 = Null + M[0xfffe18];
0x00001D        FD0000FF D15239CB        r3 = M[r0 + -50741];
0x00001F        01E00080                 rFlags = Null + 128;
0x000020        E420002F                 r0 = Null + 1;
0x000021        09000A01                 Null = Null + M[$interrupt.block_count];
0x000022        00200001                 if NE r0 = Null + Null;
0x000023        1920FE12                 M[0xfffe12] = r0 + Null;
0x000024        E005000F                 call r3;
0x000025        01E00000                 rFlags = Null + 0;
0x000026        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000027        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000028        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000029        1940FE44                 M[0xfffe44] = r2 + Null;
0x00002A        85334000                 r1 = r1 OR 0x4000;
0x00002B        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002C        FD0000FF 09303A01        r1 = Null + M[$interrupt.total_time];
0x00002E        293301C4                 r1 = r1 - M[$interrupt.start_time];
0x00002F        0933FE71                 r1 = r1 + M[0xfffe71];
0x000030        FD0000FF 19303A01        M[$interrupt.total_time] = r1 + Null;
0x000032        F104000C                 popm <r0, r1>;
0x000033        1930FE93                 M[0xfffe93] = r1 + Null;
0x000034        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000035        F104001C                 popm <r0, r1, r2>;
0x000036        DC0E000F                 rti;

 <$flash.init_pm>
0x000037        FD0000FF 092033F0        r0 = Null + M[$flash.code.address];
0x000039        1920FE83                 M[0xfffe83] = r0 + Null;
0x00003A        FD000004 85200000        r0 = Null OR 0x40000;
0x00003C        1920FE84                 M[0xfffe84] = r0 + Null;
0x00003D        DC0D000F                 rts;

 <$pre_main>
0x00003E        E1F0FFF9                 call $flash.init_pm;
0x00003F        DDF00C5A                 jump $main;
...

 <$sbc.calc_bit_allocation>
0x000121        F3D00000                 push rLink;
0x000122        51900001                 M1 = Null + 1;
0x000123        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_chan_loop>
0x000124        D1CB0021                 r10 = M[r9 + 33];
0x000125        983200CF                 r1 = r0 * r10 (int);
0x000126        D16B0018                 r4 = M[r9 + 24];
0x000127        5013006F                 I1 = r1 + r4;
0x000128        D16B001A                 r4 = M[r9 + 26];
0x000129        5023006F                 I2 = r1 + r4;
0x00012A        E460003F                 r4 = Null - 1;
0x00012B        D13B001C                 r1 = M[r9 + 28];
0x00012C        9B3C0000                 r1 = r1 * r10 (int);
0x00012D        D14B0017                 r2 = M[r9 + 23];
0x00012E        5040004F                 I4 = Null + r2;
0x00012F        5433004F                 I3 = r1 + I4;
0x000130        E5F00008                 do $M.sbc.calc_bit_allocation.md_loudness_loop;
0x000131        0140FFFB                 r2 = Null + -5;
0x000132        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000133        03035D00                 Null = Null + r1, r3 = M[I3,1];
0x000134        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness_endif;
0x000135        2043005F                 r2 = r1 - r3;
0x000136        90440065                 if POS r2 = r2 ASHIFT r4;

 <$M.sbc.calc_bit_allocation.md_loudness_endif>
0x000137        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.sbc.calc_bit_allocation.md_loudness_loop>
0x000138        D1CB0021                 r10 = M[r9 + 33];
0x000139        983200CF                 r1 = r0 * r10 (int);
0x00013A        D14B001A                 r2 = M[r9 + 26];
0x00013B        5023004F                 I2 = r1 + r2;
0x00013C        E1F00035                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.md_findbitslice_loop1>
0x00013D        D1CB0021                 r10 = M[r9 + 33];
0x00013E        983200CF                 r1 = r0 * r10 (int);
0x00013F        D17B001A                 r5 = M[r9 + 26];
0x000140        5023007F                 I2 = r1 + r5;
0x000141        E1F00039                 call $M.sbc.calc_bit_allocation.share_code_2;
0x000142        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.md_findbitslice_loop1;
0x000143        D1CB0021                 r10 = M[r9 + 33];
0x000144        983200CF                 r1 = r0 * r10 (int);
0x000145        D1CB001B                 r10 = M[r9 + 27];
0x000146        501300CF                 I1 = r1 + r10;
0x000147        D1CB001A                 r10 = M[r9 + 26];
0x000148        502300CF                 I2 = r1 + r10;
0x000149        D1CB0021                 r10 = M[r9 + 33];
0x00014A        E1F00043                 call $M.sbc.calc_bit_allocation.share_code_3;
0x00014B        D1CB0021                 r10 = M[r9 + 33];
0x00014C        983200CF                 r1 = r0 * r10 (int);
0x00014D        D16B001B                 r4 = M[r9 + 27];
0x00014E        5013006F                 I1 = r1 + r4;
0x00014F        D16B001A                 r4 = M[r9 + 26];
0x000150        5023006F                 I2 = r1 + r4;
0x000151        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_loop>
0x000152        D13B0022                 r1 = M[r9 + 34];
0x000153        2005003F                 Null = r3 - r1;
0x000154        DD500005                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_end;
0x000155        E1F00048                 call $M.sbc.calc_bit_allocation.share_code_4;
0x000156        E466002F                 r4 = r4 + 1;
0x000157        200600CF                 Null = r4 - r10;
0x000158        DD10FFFA                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_end>
0x000159        983200CF                 r1 = r0 * r10 (int);
0x00015A        D16B001B                 r4 = M[r9 + 27];
0x00015B        5013006F                 I1 = r1 + r4;
0x00015C        D16B001A                 r4 = M[r9 + 26];
0x00015D        5023006F                 I2 = r1 + r4;
0x00015E        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_loop>
0x00015F        D13B0022                 r1 = M[r9 + 34];
0x000160        2005003F                 Null = r3 - r1;
0x000161        DD50000B                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_end;
0x000162        03003400                 Null = Null + Null, r1 = M[I1,0];
0x000163        03007900                 Null = Null + Null, r5 = M[I2,1];
0x000164        21030010                 Null = r1 - 16;
0x000165        DD500003                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_endif;
0x000166        E433002F                 r1 = r1 + 1;
0x000167        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_endif>
0x000168        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x000169        E466002F                 r4 = r4 + 1;
0x00016A        200600CF                 Null = r4 - r10;
0x00016B        DD10FFF4                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_end>
0x00016C        E422002F                 r0 = r0 + 1;
0x00016D        D13B001F                 r1 = M[r9 + 31];
0x00016E        2002003F                 Null = r0 - r1;
0x00016F        DD10FFB5                 if NE jump $M.sbc.calc_bit_allocation.md_chan_loop;
0x000170        DDF00ACA                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.share_code_1>
0x000171        01400000                 r2 = Null + 0;
0x000172        E5F00004                 do $M.sbc.calc_bit_allocation.maxbitneed_loop;
0x000173        03003900                 Null = Null + Null, r1 = M[I2,1];
0x000174        2004003F                 Null = r2 - r1;
0x000175        00430004                 if NEG r2 = r1 + Null;

 <$M.sbc.calc_bit_allocation.maxbitneed_loop>
0x000176        01500000                 r3 = Null + 0;
0x000177        01600000                 r4 = Null + 0;
0x000178        E444002F                 r2 = r2 + 1;
0x000179        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_2>
0x00017A        E444003F                 r2 = r2 - 1;
0x00017B        03560000                 r3 = r3 + r4;
0x00017C        01600000                 r4 = Null + 0;
0x00017D        E5F0000C                 do $M.sbc.calc_bit_allocation.findbitslice_loop2;
0x00017E        03003900                 Null = Null + Null, r1 = M[I2,1];
0x00017F        2073004F                 r5 = r1 - r2;
0x000180        21070002                 Null = r5 - 2;
0x000181        DD400004                 if NEG jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x000182        21070010                 Null = r5 - 16;
0x000183        DD500002                 if POS jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x000184        E466002F                 r4 = r4 + 1;

 <$M.sbc.calc_bit_allocation.findbitslice_elseif1>
0x000185        E407003F                 Null = r5 - 1;
0x000186        DD100002                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif1;
0x000187        01660002                 r4 = r4 + 2;

 <$M.sbc.calc_bit_allocation.findbitslice_endif1>
0x000188        03000000                 Null = Null + Null;

 <$M.sbc.calc_bit_allocation.findbitslice_loop2>
0x000189        0075006F                 r5 = r3 + r4;
0x00018A        D1CB0022                 r10 = M[r9 + 34];
0x00018B        200700CF                 Null = r5 - r10;
0x00018C        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_3>
0x00018D        D13B0022                 r1 = M[r9 + 34];
0x00018E        2007003F                 Null = r5 - r1;
0x00018F        DD100003                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif2;
0x000190        03560000                 r3 = r3 + r4;
0x000191        E444003F                 r2 = r2 - 1;

 <$M.sbc.calc_bit_allocation.findbitslice_endif2>
0x000192        E5F0000A                 do $M.sbc.calc_bit_allocation.distbits_loop;
0x000193        03003900                 Null = Null + Null, r1 = M[I2,1];
0x000194        2073004F                 r5 = r1 - r2;
0x000195        01300000                 r1 = Null + 0;
0x000196        21070002                 Null = r5 - 2;
0x000197        00370005                 if POS r1 = r5 + Null;
0x000198        01700010                 r5 = Null + 16;
0x000199        21030010                 Null = r1 - 16;
0x00019A        00370005                 if POS r1 = r5 + Null;
0x00019B        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbc.calc_bit_allocation.distbits_loop>
0x00019C        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_4>
0x00019D        03003400                 Null = Null + Null, r1 = M[I1,0];
0x00019E        03007900                 Null = Null + Null, r5 = M[I2,1];
0x00019F        21030002                 Null = r1 - 2;
0x0001A0        DD400006                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x0001A1        21030010                 Null = r1 - 16;
0x0001A2        DD500004                 if POS jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x0001A3        E433002F                 r1 = r1 + 1;
0x0001A4        E455002F                 r3 = r3 + 1;
0x0001A5        DDF0000A                 jump $M.sbc.calc_bit_allocation.remainingbits_endif;

 <$M.sbc.calc_bit_allocation.remainingbits_elseif>
0x0001A6        23740000                 r5 = r5 - r2;
0x0001A7        E407003F                 Null = r5 - 1;
0x0001A8        DD100007                 if NE jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x0001A9        D17B0022                 r5 = M[r9 + 34];
0x0001AA        23750000                 r5 = r5 - r3;
0x0001AB        21070002                 Null = r5 - 2;
0x0001AC        DD400003                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x0001AD        01300002                 r1 = Null + 2;
0x0001AE        01550002                 r3 = r3 + 2;

 <$M.sbc.calc_bit_allocation.remainingbits_endif>
0x0001AF        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0001B0        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.corrupt_frame_error>
0x0001B1        E420002F                 r0 = Null + 1;
0x0001B2        D52B0036                 M[r9 + 54] = r0;
0x0001B3        DDF00A87                 jump $pop_rLink_and_rts;

 <$frame_sync.usb_in_mono_audio_copy>
0x0001B4        F3D00000                 push rLink;
0x0001B5        D50A0008                 M[r8 + 8] = Null;

 <$frame_sync.usb_in_mono_audio_copy_retry>
0x0001B6        D12A0000                 r0 = M[r8 + 0];
0x0001B7        8182000F                 r6 = r0 AND 0xf;
0x0001B8        0068000F                 r4 = r6 + Null;
0x0001B9        01400062                 r2 = Null + 98;
0x0001BA        01500005                 r3 = Null + 5;
0x0001BB        65080007                 Null = 7 - r6;
0x0001BC        DD500003                 if POS jump $M.frame_sync.usb_in_mono_audio_copy.lower_port;
0x0001BD        0068004F                 r4 = r6 + r2;
0x0001BE        03850000                 r6 = r6 + r3;

 <$M.frame_sync.usb_in_mono_audio_copy.lower_port>
0x0001BF        5148FE2B                 I4 = r6 + -469;
0x0001C0        D13A0006                 r1 = M[r8 + 6];
0x0001C1        D12309E4                 r0 = M[r1 + 2532];
0x0001C2        DC02000F                 jump r0;

 <$M.frame_sync.usb_in_mono_audio_copy.idle>
0x0001C3        D50A0007                 M[r8 + 7] = Null;
0x0001C4        E420002F                 r0 = Null + 1;
0x0001C5        D13A0005                 r1 = M[r8 + 5];
0x0001C6        00230001                 if NE r0 = r1 + Null;
0x0001C7        D52A0005                 M[r8 + 5] = r0;
0x0001C8        D506FE7B                 M[r4 + -389] = Null;
0x0001C9        D12A0000                 r0 = M[r8 + 0];
0x0001CA        E1F00A2F                 call $cbuffer.calc_amount_data;
0x0001CB        00C3000F                 r10 = r1 + Null;
0x0001CC        E5F00002                 do $M.frame_sync.usb_in_mono_audio_copy.empty_loop;
0x0001CD        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_mono_audio_copy.empty_loop>
0x0001CE        0900FE33                 Null = Null + M[0xfffe33];
0x0001CF        D12A0000                 r0 = M[r8 + 0];
0x0001D0        E1F00A29                 call $cbuffer.calc_amount_data;
0x0001D1        0003000F                 Null = r1 + Null;
0x0001D2        DD100048                 if NE jump $M.frame_sync.usb_in_mono_audio_copy.exit;
0x0001D3        E420002F                 r0 = Null + 1;
0x0001D4        D52A0006                 M[r8 + 6] = r0;
0x0001D5        DDF00045                 jump $M.frame_sync.usb_in_mono_audio_copy.exit;

 <$M.frame_sync.usb_in_mono_audio_copy.syncing_a>
0x0001D6        D12A0000                 r0 = M[r8 + 0];
0x0001D7        E1F00A22                 call $cbuffer.calc_amount_data;
0x0001D8        D12A0002                 r0 = M[r8 + 2];
0x0001D9        21C20002                 r10 = r0 - 2;
0x0001DA        E422002F                 r0 = r0 + 1;
0x0001DB        2003002F                 Null = r1 - r0;
0x0001DC        DD40003E                 if NEG jump $M.frame_sync.usb_in_mono_audio_copy.exit;
0x0001DD        D13A0004                 r1 = M[r8 + 4];
0x0001DE        E433002F                 r1 = r1 + 1;
0x0001DF        8133007F                 r1 = r1 AND 0x7f;
0x0001E0        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0001E1        D14A0006                 r2 = M[r8 + 6];
0x0001E2        01500002                 r3 = Null + 2;
0x0001E3        D55A0006                 M[r8 + 6] = r3;
0x0001E4        E404003F                 Null = r2 - 1;
0x0001E5        DD000012                 if EQ jump $M.frame_sync.usb_in_mono_audio_copy.skip_and_update;
0x0001E6        2003002F                 Null = r1 - r0;
0x0001E7        DD000010                 if EQ jump $M.frame_sync.usb_in_mono_audio_copy.skip_and_update;
0x0001E8        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0001E9        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0001EA        2003002F                 Null = r1 - r0;
0x0001EB        DD000004                 if EQ jump $M.frame_sync.usb_in_mono_audio_copy.large_packet;
0x0001EC        01200000                 r0 = Null + 0;
0x0001ED        D52A0006                 M[r8 + 6] = r0;
0x0001EE        DDF0002C                 jump $M.frame_sync.usb_in_mono_audio_copy.exit;

 <$M.frame_sync.usb_in_mono_audio_copy.large_packet>
0x0001EF        D13A0005                 r1 = M[r8 + 5];
0x0001F0        21330002                 r1 = r1 - 2;
0x0001F1        DD500003                 if POS jump $M.frame_sync.usb_in_mono_audio_copy.skip_all_large;
0x0001F2        01300000                 r1 = Null + 0;
0x0001F3        01CC0002                 r10 = r10 + 2;

 <$M.frame_sync.usb_in_mono_audio_copy.skip_all_large>
0x0001F4        D53A0007                 M[r8 + 7] = r1;
0x0001F5        01300003                 r1 = Null + 3;
0x0001F6        D53A0006                 M[r8 + 6] = r1;

 <$M.frame_sync.usb_in_mono_audio_copy.skip_and_update>
0x0001F7        D52A0004                 M[r8 + 4] = r0;
0x0001F8        E5F00002                 do $M.frame_sync.usb_in_mono_audio_copy.skip_loop;
0x0001F9        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_mono_audio_copy.skip_loop>
0x0001FA        D12A0000                 r0 = M[r8 + 0];
0x0001FB        4430004F                 r1 = Null + I4;
0x0001FC        E1F00A32                 call $cbuffer.set_read_address;
0x0001FD        DDF0001D                 jump $M.frame_sync.usb_in_mono_audio_copy.exit;

 <$M.frame_sync.usb_in_mono_audio_copy.synced>
0x0001FE        D12A0001                 r0 = M[r8 + 1];
0x0001FF        E1F009EA                 call $cbuffer.calc_amount_space;
0x000200        0052000F                 r3 = r0 + Null;
0x000201        D19A0002                 r7 = M[r8 + 2];
0x000202        9199007F                 r7 = r7 ASHIFT -1;
0x000203        2005009F                 Null = r3 - r7;
0x000204        DD400016                 if NEG jump $M.frame_sync.usb_in_mono_audio_copy.exit;
0x000205        0900FE33                 Null = Null + M[0xfffe33];
0x000206        D12A0000                 r0 = M[r8 + 0];
0x000207        E1F009F2                 call $cbuffer.calc_amount_data;
0x000208        01C0FFFE                 r10 = Null + -2;
0x000209        D15A0007                 r3 = M[r8 + 7];
0x00020A        20CC00C0                 if EQ r10 = r10 - r10;
0x00020B        D12A0002                 r0 = M[r8 + 2];
0x00020C        032C0000                 r0 = r0 + r10;
0x00020D        8DC2007F                 r10 = r0 LSHIFT -1;
0x00020E        E422002F                 r0 = r0 + 1;
0x00020F        2003002F                 Null = r1 - r0;
0x000210        DD40000A                 if NEG jump $M.frame_sync.usb_in_mono_audio_copy.exit;
0x000211        D13A0005                 r1 = M[r8 + 5];
0x000212        E433003F                 r1 = r1 - 1;
0x000213        E425003F                 r0 = r3 - 1;
0x000214        00230004                 if NEG r0 = r1 + Null;
0x000215        D52A0007                 M[r8 + 7] = r0;
0x000216        E1F00006                 call $M.frame_sync.usb_in_mono_audio_copy.usb_in_mono_copy_helper;
0x000217        E420002F                 r0 = Null + 1;
0x000218        D52A0008                 M[r8 + 8] = r0;
0x000219        DDF0FF9D                 jump $frame_sync.usb_in_mono_audio_copy_retry;

 <$M.frame_sync.usb_in_mono_audio_copy.exit>
0x00021A        51C00000                 L0 = Null + 0;
0x00021B        DDF00A1F                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_in_mono_audio_copy.usb_in_mono_copy_helper>
0x00021C        F3D00000                 push rLink;
0x00021D        D13A0004                 r1 = M[r8 + 4];
0x00021E        E433002F                 r1 = r1 + 1;
0x00021F        8133007F                 r1 = r1 AND 0x7f;
0x000220        D506FE7B                 M[r4 + -389] = Null;
0x000221        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000222        D52A0004                 M[r8 + 4] = r0;
0x000223        2003002F                 Null = r1 - r0;
0x000224        DD000004                 if EQ jump $M.frame_sync.usb_in_mono_audio_copy.copy_data;
0x000225        01200000                 r0 = Null + 0;
0x000226        D52A0006                 M[r8 + 6] = r0;
0x000227        DDF00012                 jump $M.frame_sync.usb_in_mono_audio_copy.lexit;

 <$M.frame_sync.usb_in_mono_audio_copy.copy_data>
0x000228        E420002F                 r0 = Null + 1;
0x000229        D526FE7B                 M[r4 + -389] = r0;
0x00022A        D12A0001                 r0 = M[r8 + 1];
0x00022B        E1F009F9                 call $_cbuffer_get_write_address;
0x00022C        5000002F                 I0 = Null + r0;
0x00022D        50C0003F                 L0 = Null + r1;
0x00022E        D15A0003                 r3 = M[r8 + 3];
0x00022F        E5F00004                 do $M.frame_sync.usb_in_mono_audio_copy.lp_mono_loop;
0x000230        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000231        93250000                 r0 = r0 ASHIFT r3;
0x000232        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.frame_sync.usb_in_mono_audio_copy.lp_mono_loop>
0x000233        D12A0000                 r0 = M[r8 + 0];
0x000234        4430004F                 r1 = Null + I4;
0x000235        E1F009F9                 call $cbuffer.set_read_address;
0x000236        D12A0001                 r0 = M[r8 + 1];
0x000237        4430000F                 r1 = Null + I0;
0x000238        E1F009FA                 call $cbuffer.set_write_address;

 <$M.frame_sync.usb_in_mono_audio_copy.lexit>
0x000239        DDF00A01                 jump $pop_rLink_and_rts;

 <ulpN2ufYQYttgIBglrB//yDsfSzsQkGTAcU7vJN9SjY=>
0x00023A        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00023B        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00023C        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00023D        E1F000E3                 call $cbops_multirate.GetTransferAndUpdateOutput;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00023E        00C4000F                 r10 = r2 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00023F        DDD009FB                 if LE jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000240        F3900000                 push r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000241        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000242        E1F000F3                 call $cbops_multirate.GetBuffer;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000243        5040002F                 I4 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000244        50E0003F                 L4 = Null + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000245        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000246        E1F000EF                 call $cbops_multirate.GetBuffer;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000247        5050002F                 I5 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000248        50F0003F                 L5 = Null + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000249        D12A0003                 r0 = M[r8 + 3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024A        DD000003                 if EQ jump KK47+Ovm1NPwX6mGeSM12MiRUdca7UcuYOXUJNw6rxU=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024B        D1720009                 r5 = M[r0 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024C        DDF00013                 jump UPd1FZS+vKMntT6Kdv4jthEj40XadpJdaPYCq6JIQI4=;

 <KK47+Ovm1NPwX6mGeSM12MiRUdca7UcuYOXUJNw6rxU=>
0x00024D        D12A0007                 r0 = M[r8 + 7];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024E        D062000F                 r4 = M[r0 + Null];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00024F        D17A0009                 r5 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000250        E430002F                 r1 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000251        2027006F                 r0 = r5 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000252        20200024                 if NEG r0 = Null - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000253        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000255        21023127                 Null = r0 - 12583;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000256        00430004                 if NEG r2 = r1 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000257        21340026                 r1 = r2 - 38;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000258        20440035                 if POS r2 = r2 - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000259        2037006F                 r1 = r5 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025A        2023004F                 r0 = r1 - r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025B        20330025                 if POS r1 = r1 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025C        0023004F                 r0 = r1 + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025D        20330024                 if NEG r1 = r1 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00025E        23730000                 r5 = r5 - r1;

 <UPd1FZS+vKMntT6Kdv4jthEj40XadpJdaPYCq6JIQI4=>
0x00025F        D57A0009                 M[r8 + 9] = r5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000260        D12A0005                 r0 = M[r8 + 5];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000261        5000002F                 I0 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000262        51C0000C                 L0 = Null + 12;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000263        51D0000C                 L1 = Null + 12;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000264        D1BA0002                 r9 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000265        01800015                 r6 = Null + 21;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000266        51B00001                 M3 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000267        E1F0000C                 call gdFr9Y4VfOLrCKNzJ6XJMOsUwW89Z3IIa+HLKzzulW8=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000268        4430000F                 r1 = Null + I0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000269        D53A0005                 M[r8 + 5] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026A        51F00000                 L5 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026B        51E00000                 L4 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026C        51C00000                 L0 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026D        51D00000                 L1 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026E        F3940000                 pop r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00026F        4430007F                 r1 = Null + I7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000270        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000271        E1F000B9                 call $cbops_multirate.SetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000272        DDF009C8                 jump $pop_rLink_and_rts;

 <gdFr9Y4VfOLrCKNzJ6XJMOsUwW89Z3IIa+HLKzzulW8=>
0x000273        D12A0004                 r0 = M[r8 + 4];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000274        5132007E                 I3 = r0 + 126;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000275        D16A000A                 r4 = M[r8 + 10];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000276        512A000D                 I2 = r8 + 13;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000277        D17A0009                 r5 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000278        D16A000A                 r4 = M[r8 + 10];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000279        70A0008F                 M2 = Null - r6;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027A        5080008F                 M0 = Null + r6;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027B        CC16008F                 rMAC = r4 * r6 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027C        51700000                 I7 = Null + 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027D        D12A000B                 r0 = M[r8 + 11];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027E        DD000003                 if EQ jump pY9sM++Lhx6PecJ+hprBw1MMQx26Bvigx/ufk6utw1s=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00027F        03000031                 Null = Null + Null, r1 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000280        67CBB100                 r10 = r10 - M3, M[I0,1] = r1;

 <pY9sM++Lhx6PecJ+hprBw1MMQx26Bvigx/ufk6utw1s=>
0x000281        E5F00038                 do 3Yvpty6xuC4I4KpS1nXopKKxMJNrD58weJqbAqiElHE=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000282        8D510018                 r3 = rMAC LSHIFT 24;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000283        8D55007F                 r3 = r3 LSHIFT -1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000284        8D410000                 r2 = rMAC LSHIFT 0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000285        5863004F                 I6 = I3 + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000286        6524FFEA                 r0 = -22 - r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000287        7092004F                 M1 = r0 - r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000288        5810000F                 I1 = I0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000289        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028A        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028E        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00028F        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000290        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000291        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000292        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000293        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000294        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000295        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000296        79990002                 M1 = M1 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000297        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000298        DD400003                 if NEG jump 8XjNSGe2tsErWGPeBKGRq7kwTjnusV8EqRdPEWivC44=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000299        71980001                 M1 = r6 - 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029A        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <8XjNSGe2tsErWGPeBKGRq7kwTjnusV8EqRdPEWivC44=>
0x00029B        5863004F                 I6 = I3 + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029C        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029D        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029E        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00029F        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A0        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A1        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A3        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A5        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A6        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A7        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A8        AF233800                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002A9        CF150051                 rMAC = rMAC * r3 (SS), r3 = M[I4,1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AA        FD00007F BD13FFFF        rMAC = rMAC - r1 * 0.99999988079071045 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AC        903100BF                 r1 = rMAC ASHIFT r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AD        226700B7                 r4 = r4 - r5, M[I5,M3] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AE        DD40000A                 if NEG jump VrSYD+NSFnUEg06ARirBv7slJUukvubeAp3Rcak8iw4=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002AF        FD000080 01660000        r4 = r4 + -8388608;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B1        0007000F                 Null = r5 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B2        DD400004                 if NEG jump qvNjMS5d0Di8w9y2NsG4QoAYwKO0vKnnLLzhTMX1FQs=;

 <SkTx1D7YTGMOdKH3njxMXwNU9PQA01pWkpb9weRioLs=>
0x0002B3        03005353                 Null = Null + Null, r3 = M[I0,-1], r3 = M[I4,-1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B4        47CB5000                 r10 = r10 + M3, r3 = M[I0,0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B5        DDF00003                 jump VrSYD+NSFnUEg06ARirBv7slJUukvubeAp3Rcak8iw4=;

 <qvNjMS5d0Di8w9y2NsG4QoAYwKO0vKnnLLzhTMX1FQs=>
0x0002B6        66CBD353                 r10 = r10 - M3, M[I0,M3] = r3, r3 = M[I4,M3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002B7        DDD00007                 if LE jump zrINqEEone3BJG2dqpffznhhTEjIGkLtLkN76a8TtIw=;

 <VrSYD+NSFnUEg06ARirBv7slJUukvubeAp3Rcak8iw4=>
0x0002B8        CC16D38F                 rMAC = r4 * r6 (SS), M[I0,M3] = r3;

 <3Yvpty6xuC4I4KpS1nXopKKxMJNrD58weJqbAqiElHE=>
0x0002B9        D56A000A                 M[r8 + 10] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BA        509000CF                 M1 = Null + r10;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BB        6420319F                 r0 = Null - M1, r1 = M[I0,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BC        D52A000B                 M[r8 + 11] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BD        DC0D000F                 rts;

 <zrINqEEone3BJG2dqpffznhhTEjIGkLtLkN76a8TtIw=>
0x0002BE        66CBD300                 r10 = r10 - M3, M[I0,M3] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002BF        DDF0FFFA                 jump 3Yvpty6xuC4I4KpS1nXopKKxMJNrD58weJqbAqiElHE=;

 <$cbops_multirate.copy>
0x0002C0        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C1        51900001                 M1 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C2        D19A0000                 r7 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C3        F3A00000                 push r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C4        F3900000                 push r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C5        5000009F                 I0 = Null + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C6        514A0003                 I4 = r8 + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C7        02000021                 Null = Null + Null, r0 = M[I4,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C8        00C2000F                 r10 = r0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002C9        02000021                 Null = Null + Null, r0 = M[I4,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CA        E5F00007                 do X01z7QV+wLTkTUsDZv9z29y4A0AXaqdbsrPaLVBizXE=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CB        0300A000                 Null = Null + Null, M[I0,0] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CC        E1F00953                 call $_cbuffer_get_read_address;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CD        0032210F                 r1 = r0 + Null, r0 = M[I0,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CE        0200B100                 Null = Null + Null, M[I0,M1] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002CF        E1F0092A                 call $cbuffer.calc_amount_data;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D0        0200A121                 Null = Null + Null, M[I0,M1] = r0, r0 = M[I4,M1];

 <X01z7QV+wLTkTUsDZv9z29y4A0AXaqdbsrPaLVBizXE=>
0x0002D1        02C20021                 r10 = r10 + r0, r0 = M[I4,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D2        E5F00007                 do euyLoBJCoCIBM6lFAK6wf+YGSgaOac2a+shuLnayiug=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D3        0300A000                 Null = Null + Null, M[I0,0] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D4        E1F00950                 call $_cbuffer_get_write_address;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D5        0032210F                 r1 = r0 + Null, r0 = M[I0,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D6        0200B100                 Null = Null + Null, M[I0,M1] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D7        E1F00912                 call $cbuffer.calc_amount_space;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002D8        0200A121                 Null = Null + Null, M[I0,M1] = r0, r0 = M[I4,M1];

 <euyLoBJCoCIBM6lFAK6wf+YGSgaOac2a+shuLnayiug=>
0x0002D9        02C20021                 r10 = r10 + r0, r0 = M[I4,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DA        E5F00008                 do wqnpQ3s/1MpNxxp9op/L4HtEmy7MsssrrqEK4IBAVFc=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DB        0200A100                 Null = Null + Null, M[I0,M1] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DC        D1320002                 r1 = M[r0 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DD        D1520001                 r3 = M[r0 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DE        23530000                 r3 = r3 - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002DF        0855002D                 if LE r3 = r3 + M[r0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E0        6659B100                 r3 = r3 - M1, M[I0,M1] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E1        0200D121                 Null = Null + Null, M[I0,M1] = r3, r0 = M[I4,M1];

 <wqnpQ3s/1MpNxxp9op/L4HtEmy7MsssrrqEK4IBAVFc=>
0x0002E2        D1AA0002                 r8 = M[r8 + 2];

 <GIWnVTmFJ6qK4N3gh+kG4hmkK86ArXW+SlmFOPRUqy4=>
0x0002E3        D12A0002                 r0 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E4        01AA0003                 r8 = r8 + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E5        F198FFFF                 r7 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E6        D1220001                 r0 = M[r0 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E7        E0020001                 if NE call r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E8        D1AAFFFD                 r8 = M[r8 + -3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002E9        E40A002F                 Null = r8 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EA        DD10FFF9                 if NE jump GIWnVTmFJ6qK4N3gh+kG4hmkK86ArXW+SlmFOPRUqy4=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EB        F1A8FFFE                 r8 = M[SP + -0x2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EC        F109FFFF                 I0 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002ED        D1CA0003                 r10 = M[r8 + 3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EE        59000002                 I0 = I0 + 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002EF        51B00003                 M3 = Null + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F0        0070230F                 r5 = Null + Null, r0 = M[I0,M3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F1        E5F00003                 do jrFP+yzsyQx9OimC8F2imKFmXi3F/w3/UGK+K1UfZi4=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F2        2007002F                 Null = r5 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F3        00722304                 if NEG r5 = r0 + Null, r0 = M[I0,M3];

 <jrFP+yzsyQx9OimC8F2imKFmXi3F/w3/UGK+K1UfZi4=>
0x0002F4        0007000F                 Null = r5 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F5        DD00001C                 if EQ jump yH+eR/EdN+tJGM5lCCQrTbMUuKq1BERWta6MNc7SFuo=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F6        D1AA0001                 r8 = M[r8 + 1];

 <ZM8z/ZnC5BsyRA6Uk/CtdKqwyV0oKWSFXbOXUSlEH8k=>
0x0002F7        D12A0002                 r0 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F8        01AA0003                 r8 = r8 + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002F9        F198FFFF                 r7 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FA        D1220002                 r0 = M[r0 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FB        E0020001                 if NE call r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FC        D1AAFFFE                 r8 = M[r8 + -2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FD        E40A002F                 Null = r8 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FE        DD10FFF9                 if NE jump ZM8z/ZnC5BsyRA6Uk/CtdKqwyV0oKWSFXbOXUSlEH8k=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0002FF        F1A8FFFE                 r8 = M[SP + -0x2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000300        F198FFFF                 r7 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000301        51900001                 M1 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000302        511A0003                 I1 = r8 + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000303        8ABB2500                 r9 = r9 XOR r9, r0 = M[I1,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000304        00C2250F                 r10 = r0 + Null, r0 = M[I1,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000305        E5F00005                 do nWysKSSo38pfeT4P9YdzTNIePSX40NUIGI/QNMFKNmc=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000306        002B000F                 r0 = r9 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000307        E1F0000D                 call 9c9yXqSRDOytjSWfSQ6+H8lKqADWCGjftay2J5CcTgo=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000308        E1F00926                 call $cbuffer.set_read_address;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000309        46B92500                 r9 = r9 + M1, r0 = M[I1,M1];

 <nWysKSSo38pfeT4P9YdzTNIePSX40NUIGI/QNMFKNmc=>
0x00030A        00C2000F                 r10 = r0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030B        E5F00005                 do LfaW9GdKkRZP5wx3yhf9SJsUsTm3QR+wBzlX829rWSM=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030C        002B000F                 r0 = r9 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030D        E1F00007                 call 9c9yXqSRDOytjSWfSQ6+H8lKqADWCGjftay2J5CcTgo=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030E        E1F00924                 call $cbuffer.set_write_address;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00030F        47B90000                 r9 = r9 + M1;

 <LfaW9GdKkRZP5wx3yhf9SJsUsTm3QR+wBzlX829rWSM=>
0x000310        51C00000                 L0 = Null + 0;

 <yH+eR/EdN+tJGM5lCCQrTbMUuKq1BERWta6MNc7SFuo=>
0x000311        F3940000                 pop r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000312        F3A40000                 pop r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000313        DDF00927                 jump $pop_rLink_and_rts;

 <9c9yXqSRDOytjSWfSQ6+H8lKqADWCGjftay2J5CcTgo=>
0x000314        99420003                 r2 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000315        5024009F                 I2 = r2 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000316        02002900                 Null = Null + Null, r0 = M[I2,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000317        D802000F                 Null = SIGNDET r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000318        DC0D0000                 if EQ rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000319        D1520000                 r3 = M[r0 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031A        50C0395F                 L0 = Null + r3, r1 = M[I2,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031B        5000493F                 I0 = Null + r1, r2 = M[I2,M1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031C        50A0004F                 M2 = Null + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031D        02004200                 Null = Null + Null, r2 = M[I0,M2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031E        4430000F                 r1 = Null + I0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00031F        DC0D000F                 rts;

 <$cbops_multirate.GetTransferAndUpdateOutput>
0x000320        01590002                 r3 = r7 + 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000321        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000322        99330003                 r1 = r1 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000323        D045002F                 r2 = M[r3 + r0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000324        D445003F                 M[r3 + r1] = r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000325        DC0D000F                 rts;

 <$cbops_multirate.GetTransferAmount>
0x000326        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000327        03290000                 r0 = r0 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000328        D1220002                 r0 = M[r0 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000329        DC0D000F                 rts;

 <$cbops_multirate.SetTransferAmount>
0x00032A        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032B        03290000                 r0 = r0 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032C        D5320002                 M[r0 + 2] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032D        DC0D000F                 rts;

 <$cbops_multirate.SetMinimumTransferAmount>
0x00032E        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00032F        03290000                 r0 = r0 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000330        D1520002                 r3 = M[r0 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000331        2003005F                 Null = r1 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000332        00350005                 if POS r1 = r3 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000333        D5320002                 M[r0 + 2] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000334        DC0D000F                 rts;

 <$cbops_multirate.GetBuffer>
0x000335        99420003                 r2 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000336        03490000                 r2 = r2 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000337        D1340000                 r1 = M[r2 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000338        D1240001                 r0 = M[r2 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000339        D803000F                 Null = SIGNDET r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033A        DD000003                 if EQ jump qZaZ7edDPtNdtCDq6v6d9Za+45cuvySlO6Cj6n/dNnA=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033B        D1330000                 r1 = M[r1 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033C        DC0D000F                 rts;

 <qZaZ7edDPtNdtCDq6v6d9Za+45cuvySlO6Cj6n/dNnA=>
0x00033D        E430002F                 r1 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033E        0040000F                 r2 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00033F        DC0D000F                 rts;

 <UYGJyLlFDKQCmjDod/i1GJaYlEtzk0GPLUI8/aL1bXM=>
0x000340        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000341        D14A0009                 r2 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000342        DD400006                 if NEG jump U7rrsOAwuq9h+FfBq86fuBJAhL/+qpCUYAu8I1bA5VI=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000343        D12A000A                 r0 = M[r8 + 10];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000344        21020003                 Null = r0 - 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000345        DD500070                 if POS jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000346        E422002F                 r0 = r0 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000347        D52A000A                 M[r8 + 10] = r0;

 <U7rrsOAwuq9h+FfBq86fuBJAhL/+qpCUYAu8I1bA5VI=>
0x000348        E444002F                 r2 = r2 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000349        D54A0009                 M[r8 + 9] = r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034A        DDF008F0                 jump $pop_rLink_and_rts;

 <YQdP0mcT+xAc8QshpJiNxzxkIFzWjVDT0icj0nrGv4A=>
0x00034B        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034C        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034D        E1F0FFD9                 call $cbops_multirate.GetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034E        D1BA0008                 r9 = M[r8 + 8];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00034F        0002000F                 Null = r0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000350        DDD00003                 if LE jump /tEqC1ITVpxP+jbBx4OQSFj1YKEk8hoSWXOulnBBdmE=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000351        03B20000                 r9 = r9 + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000352        D50A000A                 M[r8 + 10] = Null;

 </tEqC1ITVpxP+jbBx4OQSFj1YKEk8hoSWXOulnBBdmE=>
0x000353        D12A0009                 r0 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000354        DDD008E6                 if LE jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000355        D5BA0008                 M[r8 + 8] = r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000356        D14A0002                 r2 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000357        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000358        9B340000                 r1 = r1 * r2 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000359        2052003F                 r3 = r0 - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035A        DD4008E0                 if NEG jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035B        E430003F                 r1 = Null - 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035C        D16A0003                 r4 = M[r8 + 3];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035D        9876004F                 r5 = r4 * r2 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035E        0005000F                 Null = r3 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00035F        DD00000E                 if EQ jump j31cLDWJ9U34ua9a3WgiobyGL/FhrdiGlcCE9F0ibwk=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000360        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000361        D843000F                 r2 = SIGNDET r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000362        93340000                 r1 = r1 ASHIFT r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000363        FD000020 01100000        rMAC = Null + 2097152;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000365        D9030000                 Div = rMAC / r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000366        9B650000                 r4 = r4 * r3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000367        21440016                 r2 = r2 - 22;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000368        D9300001                 r1 = DivResult;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000369        97630000                 r4 = r4 * r1 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036A        93640000                 r4 = r4 ASHIFT r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036B        93340000                 r1 = r1 ASHIFT r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036C        03760000                 r5 = r5 + r4;

 <j31cLDWJ9U34ua9a3WgiobyGL/FhrdiGlcCE9F0ibwk=>
0x00036D        0067000F                 r4 = r5 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036E        D5BA000B                 M[r8 + 11] = r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00036F        001B000F                 rMAC = r9 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000370        D851000F                 r3 = SIGNDET rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000371        21B50002                 r9 = r3 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000372        93EB0000                 rMAC = rMAC ASHIFT r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000373        93650000                 r4 = r4 ASHIFT r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000374        D9060000                 Div = rMAC / r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000375        D15A000C                 r3 = M[r8 + 12];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000376        FD0000FF D1B539AE        r9 = M[r3 + -50770];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000378        E455002F                 r3 = r3 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000379        D16A0004                 r4 = M[r8 + 4];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037A        2005006F                 Null = r3 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037B        00560005                 if POS r3 = r4 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037C        D55A000C                 M[r8 + 12] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037D        FD00007F 0160FFFF        r4 = Null + 8388607;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00037F        203600BF                 r1 = r4 - r9;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000380        D15A0005                 r3 = M[r8 + 5];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000381        D9200001                 r0 = DivResult;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000382        CC1B002F                 rMAC = r9 * r0 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000383        AC13005F                 rMAC = rMAC + r1 * r3 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000384        0061000F                 r4 = rMAC + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000385        D56A0005                 M[r8 + 5] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000386        2032006F                 r1 = r0 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000387        20300034                 if NEG r1 = Null - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000388        01501062                 r3 = Null + 4194;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000389        2003005F                 Null = r1 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038A        DD400008                 if NEG jump HuvYmuDxOjRX+/8MouEn6HLhGXntfu2sMd92bP51FTA=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038B        D50A000C                 M[r8 + 12] = Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038C        FD000040 01200000        r0 = Null + 4194304;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038E        D52A0005                 M[r8 + 5] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00038F        D50A000E                 M[r8 + 14] = Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000390        D50A000D                 M[r8 + 13] = Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000391        DDF00024                 jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;

 <HuvYmuDxOjRX+/8MouEn6HLhGXntfu2sMd92bP51FTA=>
0x000392        FD000040 21660000        r4 = r4 - 4194304;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000394        91660001                 r4 = r4 ASHIFT 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000395        FD000006 01506666        r3 = Null + 419430;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000397        03060000                 Null = Null + r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000398        DD500004                 if POS jump 9uhotfq7DzlPwliFeWpFUYzdudHV2S/zUeIEWXM/9Ew=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000399        0006005F                 Null = r4 + r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039A        20600054                 if NEG r4 = Null - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039B        DDF00003                 jump lgWeBoPQ05q6D0DzRmYT+wfKKW4uKJ8BrMGZfwMr8F0=;

 <9uhotfq7DzlPwliFeWpFUYzdudHV2S/zUeIEWXM/9Ew=>
0x00039C        2006005F                 Null = r4 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039D        00650005                 if POS r4 = r3 + Null;

 <lgWeBoPQ05q6D0DzRmYT+wfKKW4uKJ8BrMGZfwMr8F0=>
0x00039E        D56A000D                 M[r8 + 13] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00039F        9436006F                 r1 = r4 * r4 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A0        23360000                 r1 = r1 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A1        D53A000E                 M[r8 + 14] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A2        D15A000F                 r3 = M[r8 + 15];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A3        D16A0006                 r4 = M[r8 + 6];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A4        E455002F                 r3 = r3 + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A5        2006005F                 Null = r4 - r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A6        DD40000F                 if NEG jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A7        D55A000F                 M[r8 + 15] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A8        81050001                 Null = r3 AND 0x1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003A9        DD00000C                 if EQ jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AA        E450002F                 r3 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AB        D16A0005                 r4 = M[r8 + 5];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AC        817600FF                 r5 = r4 AND 0xff;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AD        8D660078                 r4 = r4 LSHIFT -8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AE        D18A000D                 r6 = M[r8 + 13];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003AF        812800FF                 r0 = r6 AND 0xff;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B0        8D220008                 r0 = r0 LSHIFT 8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B1        87720000                 r5 = r5 OR r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B2        8D880078                 r6 = r6 LSHIFT -8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B3        01401025                 r2 = Null + 4133;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B4        E1F005F9                 call $message.send_short;

 <DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=>
0x0003B5        D50A0008                 M[r8 + 8] = Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B6        D12A0007                 r0 = M[r8 + 7];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B7        65220000                 r0 = 0 - r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B8        D52A0009                 M[r8 + 9] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003B9        DDF00881                 jump $pop_rLink_and_rts;

 <$cbops.rate_monitor_op.Initialize>
0x0003BA        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BB        D53A0003                 M[r8 + 3] = r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BC        01200003                 r0 = Null + 3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BD        D52A000A                 M[r8 + 10] = r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x0003BE        DDF0FFF7                 jump DPi9+zpK4erh41r/UjyuzwWk5eVBS11wxGiQaLzeZNs=;
...

 <$frame_sync.sco_decode>
0x00042E        F3D00000                 push rLink;

 <$M.frame_sync.sco_decode.jp_check_packet>
0x00042F        D1290002                 r0 = M[r7 + 2];
0x000430        E1F007C9                 call $cbuffer.calc_amount_data;
0x000431        0002000F                 Null = r0 + Null;
0x000432        DD000808                 if EQ jump $pop_rLink_and_rts;
0x000433        D1290002                 r0 = M[r7 + 2];
0x000434        E1F007EB                 call $_cbuffer_get_read_address;
0x000435        5000002F                 I0 = Null + r0;
0x000436        50C0003F                 L0 = Null + r1;
0x000437        51900001                 M1 = Null + 1;
0x000438        03007100                 Null = Null + Null, r5 = M[I0,1];
0x000439        4487419F                 r6 = r5 + M1, r2 = M[I0,M1];
0x00043A        8D88007F                 r6 = r6 LSHIFT -1;
0x00043B        50B0218F                 M3 = Null + r6, r0 = M[I0,M1];
0x00043C        5840000F                 I4 = I0 + Null;
0x00043D        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x00043E        4420000F                 r0 = Null + I0;
0x00043F        5804000F                 I0 = I4 + Null;
0x000440        19200A08                 M[$next_packet_value] = r0 + Null;
0x000441        D5790007                 M[r7 + 7] = r5;
0x000442        81440003                 r2 = r2 AND 0x3;
0x000443        D549000C                 M[r7 + 12] = r2;
0x000444        D1290003                 r0 = M[r7 + 3];
0x000445        E1F007A4                 call $cbuffer.calc_amount_space;
0x000446        D1A90009                 r8 = M[r7 + 9];
0x000447        D13A0000                 r1 = M[r8 + 0];
0x000448        D1AA0003                 r8 = M[r8 + 3];
0x000449        00BA000F                 r9 = r8 + Null;
0x00044A        E003000F                 call r1;
0x00044B        D5390008                 M[r7 + 8] = r1;
0x00044C        DD000045                 if EQ jump $M.frame_sync.sco_decode.jp_sco_no_decode;
0x00044D        D149000C                 r2 = M[r7 + 12];
0x00044E        D1A90009                 r8 = M[r7 + 9];
0x00044F        D13A0001                 r1 = M[r8 + 1];
0x000450        D1AA0003                 r8 = M[r8 + 3];
0x000451        00BA000F                 r9 = r8 + Null;
0x000452        E003000F                 call r1;
0x000453        50C0000F                 L0 = Null + Null;
0x000454        D1290002                 r0 = M[r7 + 2];
0x000455        09300A08                 r1 = Null + M[$next_packet_value];
0x000456        D5320001                 M[r0 + 1] = r1;
0x000457        D579000C                 M[r7 + 12] = r5;
0x000458        DD40FFD7                 if NEG jump $M.frame_sync.sco_decode.jp_check_packet;
0x000459        51900001                 M1 = Null + 1;
0x00045A        D129000F                 r0 = M[r7 + 15];
0x00045B        47290000                 r0 = r0 + M1;
0x00045C        D1390010                 r1 = M[r7 + 16];
0x00045D        D109000C                 Null = M[r7 + 12];
0x00045E        44330091                 if NE r1 = r1 + M1;
0x00045F        D1490008                 r2 = M[r7 + 8];
0x000460        9883004F                 r6 = r1 * r2 (int);
0x000461        9852004F                 r3 = r0 * r2 (int);
0x000462        D169000D                 r4 = M[r7 + 13];
0x000463        D149000E                 r2 = M[r7 + 14];
0x000464        D1790006                 r5 = M[r7 + 6];
0x000465        2005007F                 Null = r3 - r5;
0x000466        9C680045                 if POS r4 = r6 * r2 (int) (sat);
0x000467        00200005                 if POS r0 = Null + Null;
0x000468        00300005                 if POS r1 = Null + Null;
0x000469        D529000F                 M[r7 + 15] = r0;
0x00046A        D5390010                 M[r7 + 16] = r1;
0x00046B        D569000D                 M[r7 + 13] = r4;
0x00046C        D1290005                 r0 = M[r7 + 5];
0x00046D        D1390004                 r1 = M[r7 + 4];
0x00046E        8002003F                 Null = r0 AND r1;
0x00046F        DD00000E                 if EQ jump $M.frame_sync.sco_decode.jp_no_plc;
0x000470        D139000A                 r1 = M[r7 + 10];
0x000471        DD00FFBE                 if EQ jump $M.frame_sync.sco_decode.jp_check_packet;
0x000472        D1290003                 r0 = M[r7 + 3];
0x000473        D1490008                 r2 = M[r7 + 8];
0x000474        D159000C                 r3 = M[r7 + 12];
0x000475        F3900000                 push r7;
0x000476        D1990011                 r7 = M[r7 + 17];
0x000477        D5290003                 M[r7 + 3] = r0;
0x000478        D5490007                 M[r7 + 7] = r2;
0x000479        D5590008                 M[r7 + 8] = r3;
0x00047A        E003000F                 call r1;
0x00047B        F3940000                 pop r7;
0x00047C        DDF0FFB3                 jump $M.frame_sync.sco_decode.jp_check_packet;

 <$M.frame_sync.sco_decode.jp_no_plc>
0x00047D        D1C90008                 r10 = M[r7 + 8];
0x00047E        D1290003                 r0 = M[r7 + 3];
0x00047F        E1F007A5                 call $_cbuffer_get_write_address;
0x000480        5010002F                 I1 = Null + r0;
0x000481        50D0003F                 L1 = Null + r1;
0x000482        D139000C                 r1 = M[r7 + 12];
0x000483        81030002                 Null = r1 AND 0x2;
0x000484        DD100004                 if NE jump $M.frame_sync.sco_decode.jp_replace;
0x000485        509000CF                 M1 = Null + r10;
0x000486        02002500                 Null = Null + Null, r0 = M[I1,M1];
0x000487        DDF00005                 jump $M.frame_sync.sco_decode.jp_set_output;

 <$M.frame_sync.sco_decode.jp_replace>
0x000488        03002700                 Null = Null + Null, r0 = M[I1,-1];
0x000489        03004500                 Null = Null + Null, r2 = M[I1,1];
0x00048A        E5F00002                 do $M.frame_sync.sco_decode.jp_set_output;
0x00048B        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.frame_sync.sco_decode.jp_set_output>
0x00048C        50D0000F                 L1 = Null + Null;
0x00048D        4430001F                 r1 = Null + I1;
0x00048E        D1290003                 r0 = M[r7 + 3];
0x00048F        E1F007A3                 call $cbuffer.set_write_address;
0x000490        DDF0FF9F                 jump $M.frame_sync.sco_decode.jp_check_packet;

 <$M.frame_sync.sco_decode.jp_sco_no_decode>
0x000491        50C0000F                 L0 = Null + Null;
0x000492        DDF007A8                 jump $pop_rLink_and_rts;

 <$frame_sync.usb_out_mono_copy>
0x000493        F3D00000                 push rLink;
0x000494        D12A0004                 r0 = M[r8 + 4];
0x000495        E452002F                 r3 = r0 + 1;
0x000496        00520000                 if EQ r3 = r0 + Null;
0x000497        D55A0004                 M[r8 + 4] = r3;
0x000498        D12A0001                 r0 = M[r8 + 1];
0x000499        8162001F                 r4 = r0 AND 0x1f;
0x00049A        2166000C                 r4 = r4 - 12;
0x00049B        0076000F                 r5 = r4 + Null;
0x00049C        01300066                 r1 = Null + 102;
0x00049D        01C00009                 r10 = Null + 9;
0x00049E        65060007                 Null = 7 - r4;
0x00049F        DD500003                 if POS jump $M.frame_sync.usb_out_mono_copy.lower_port;
0x0004A0        0076003F                 r5 = r4 + r1;
0x0004A1        036C0000                 r4 = r4 + r10;

 <$M.frame_sync.usb_out_mono_copy.lower_port>
0x0004A2        D1360969                 r1 = M[r4 + 2409];
0x0004A3        01200009                 r0 = Null + 9;
0x0004A4        D527FE73                 M[r5 + -397] = r0;
0x0004A5        D3300000                 r1 = M[r1 + Null];
0x0004A6        09200A0A                 r0 = Null + M[$M.frame_sync.usb_out_mono_copy.last_limit];
0x0004A7        19300A0A                 M[$M.frame_sync.usb_out_mono_copy.last_limit] = r1 + Null;
0x0004A8        2003002F                 Null = r1 - r0;
0x0004A9        DD000003                 if EQ jump $M.frame_sync.usb_out_mono_copy.stall_detected;
0x0004AA        D50A0004                 M[r8 + 4] = Null;
0x0004AB        DDF0000A                 jump $M.frame_sync.usb_out_mono_copy.not_stalled;

 <$M.frame_sync.usb_out_mono_copy.stall_detected>
0x0004AC        21050007                 Null = r3 - 7;
0x0004AD        DD400008                 if NEG jump $M.frame_sync.usb_out_mono_copy.not_stalled;
0x0004AE        DD00002D                 if EQ jump $M.frame_sync.usb_out_mono_copy.purgeport;
0x0004AF        D12A0000                 r0 = M[r8 + 0];
0x0004B0        E1F00774                 call $_cbuffer_get_write_address;
0x0004B1        0032000F                 r1 = r0 + Null;
0x0004B2        D12A0000                 r0 = M[r8 + 0];
0x0004B3        E1F0077B                 call $cbuffer.set_read_address;
0x0004B4        DDF00786                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_out_mono_copy.not_stalled>
0x0004B5        51800000                 M0 = Null + 0;
0x0004B6        FD0000FF 51003A0A        I0 = Null + -50678;
0x0004B8        D12A0001                 r0 = M[r8 + 1];
0x0004B9        E1F00730                 call $cbuffer.calc_amount_space;
0x0004BA        8D44007F                 r2 = r2 LSHIFT -1;
0x0004BB        2024002F                 r0 = r2 - r0;
0x0004BC        E422003F                 r0 = r0 - 1;
0x0004BD        D1CA0003                 r10 = M[r8 + 3];
0x0004BE        200200CF                 Null = r0 - r10;
0x0004BF        DD50077B                 if POS jump $pop_rLink_and_rts;
0x0004C0        D12A0000                 r0 = M[r8 + 0];
0x0004C1        E1F00738                 call $cbuffer.calc_amount_data;
0x0004C2        200200CF                 Null = r0 - r10;
0x0004C3        DD40000A                 if NEG jump $M.frame_sync.usb_out_mono_copy.not_enough_buffer_data;
0x0004C4        09000A0B                 Null = Null + M[$M.frame_sync.usb_out_mono_copy.delay_buffer_read];
0x0004C5        DD000003                 if EQ jump $M.frame_sync.usb_out_mono_copy.setup_transfer;
0x0004C6        19000A0B                 M[$M.frame_sync.usb_out_mono_copy.delay_buffer_read] = Null + Null;
0x0004C7        DDF00006                 jump $M.frame_sync.usb_out_mono_copy.not_enough_buffer_data;

 <$M.frame_sync.usb_out_mono_copy.setup_transfer>
0x0004C8        D12A0000                 r0 = M[r8 + 0];
0x0004C9        E1F00756                 call $_cbuffer_get_read_address;
0x0004CA        5000002F                 I0 = Null + r0;
0x0004CB        50C0003F                 L0 = Null + r1;
0x0004CC        51800001                 M0 = Null + 1;

 <$M.frame_sync.usb_out_mono_copy.not_enough_buffer_data>
0x0004CD        D15A0002                 r3 = M[r8 + 2];
0x0004CE        E5F00004                 do $M.frame_sync.usb_out_mono_copy.loop;
0x0004CF        02003000                 Null = Null + Null, r1 = M[I0,M0];
0x0004D0        93350000                 r1 = r1 ASHIFT r3;
0x0004D1        D536FE23                 M[r4 + -477] = r1;

 <$M.frame_sync.usb_out_mono_copy.loop>
0x0004D2        51C00000                 L0 = Null + 0;
0x0004D3        D12A0001                 r0 = M[r8 + 1];
0x0004D4        E1F0075E                 call $cbuffer.set_write_address;
0x0004D5        47080000                 Null = Null + M0;
0x0004D6        DD000764                 if EQ jump $pop_rLink_and_rts;
0x0004D7        D12A0000                 r0 = M[r8 + 0];
0x0004D8        4430000F                 r1 = Null + I0;
0x0004D9        E1F00755                 call $cbuffer.set_read_address;
0x0004DA        DDF00760                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_out_mono_copy.purgeport>
0x0004DB        19A00A0B                 M[$M.frame_sync.usb_out_mono_copy.delay_buffer_read] = r8 + Null;
0x0004DC        0900FE33                 Null = Null + M[0xfffe33];
0x0004DD        D12A0001                 r0 = M[r8 + 1];
0x0004DE        E1F0070B                 call $cbuffer.calc_amount_space;
0x0004DF        E4C2002F                 r10 = r0 + 1;
0x0004E0        D12A0003                 r0 = M[r8 + 3];
0x0004E1        03C20000                 r10 = r10 + r0;
0x0004E2        01200000                 r0 = Null + 0;
0x0004E3        E5F00002                 do $M.frame_sync.usb_out_mono_copy.flushport;
0x0004E4        D526FE23                 M[r4 + -477] = r0;

 <$M.frame_sync.usb_out_mono_copy.flushport>
0x0004E5        D12A0001                 r0 = M[r8 + 1];
0x0004E6        E1F0074C                 call $cbuffer.set_write_address;
0x0004E7        DDF00753                 jump $pop_rLink_and_rts;

 <$sco_timing.SyncClock>
0x0004E8        F3D00000                 push rLink;
0x0004E9        FD0000FF 09A03A08        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x0004EB        D1730001                 r5 = M[r1 + 1];
0x0004EC        092009B9                 r0 = Null + M[0x9b9];
0x0004ED        0082007F                 r6 = r0 + r5;
0x0004EE        D12A0017                 r0 = M[r8 + 23];
0x0004EF        23280000                 r0 = r0 - r6;
0x0004F0        01600271                 r4 = Null + 625;
0x0004F1        FD000000 CD12346E        rMAC = r0 * 0.0016000270843505859 (SS);
0x0004F3        8D410000                 r2 = rMAC LSHIFT 0;
0x0004F4        9B460000                 r2 = r2 * r4 (int);
0x0004F5        2042004F                 r2 = r0 - r2;
0x0004F6        91E20080                 rMAC = r0 ASHIFT 0 (LO);
0x0004F7        D12A0016                 r0 = M[r8 + 22];
0x0004F8        00400000                 if EQ r2 = Null + Null;
0x0004F9        D9020000                 Div = rMAC / r0;
0x0004FA        21040138                 Null = r2 - 312;
0x0004FB        2044006C                 if GT r2 = r2 - r4;
0x0004FC        03460000                 r2 = r2 + r4;
0x0004FD        03470000                 r2 = r2 + r5;
0x0004FE        E1F003F7                 call $timer.schedule_event_at;
0x0004FF        D12A0016                 r0 = M[r8 + 22];
0x000500        DD00073A                 if EQ jump $pop_rLink_and_rts;
0x000501        090009B9                 Null = Null + M[0x9b9];
0x000502        DD000738                 if EQ jump $pop_rLink_and_rts;
0x000503        D9600002                 r4 = DivRemainder;
0x000504        0006000F                 Null = r4 + Null;
0x000505        0066002D                 if LE r4 = r4 + r0;
0x000506        0038006F                 r1 = r6 + r4;
0x000507        D53A0017                 M[r8 + 23] = r1;
0x000508        01660138                 r4 = r4 + 312;
0x000509        FD000000 CD16346E        rMAC = r4 * 0.0016000270843505859 (SS);
0x00050B        8D410000                 r2 = rMAC LSHIFT 0;
0x00050C        F3400000                 push r2;
0x00050D        29040A09                 Null = r2 - M[$M.sco_timing.sco_rcv_trigger];
0x00050E        E10000B1                 if EQ call $frame_sync.sco_port_handler;
0x00050F        F3440000                 pop r2;
0x000510        E404003F                 Null = r2 - 1;
0x000511        DD100729                 if NE jump $pop_rLink_and_rts;
0x000512        D12A0012                 r0 = M[r8 + 18];
0x000513        E1F00393                 call $cbuffer.get_write_address_and_size.its_a_port;
0x000514        5040002F                 I4 = Null + r0;
0x000515        50E0003F                 L4 = Null + r1;
0x000516        D12A0014                 r0 = M[r8 + 20];
0x000517        E1F00708                 call $_cbuffer_get_read_address;
0x000518        5000002F                 I0 = Null + r0;
0x000519        50C0003F                 L0 = Null + r1;
0x00051A        D12A0014                 r0 = M[r8 + 20];
0x00051B        E1F006DE                 call $cbuffer.calc_amount_data;
0x00051C        D1CA0015                 r10 = M[r8 + 21];
0x00051D        8D4C007F                 r2 = r10 LSHIFT -1;
0x00051E        D13A0012                 r1 = M[r8 + 18];
0x00051F        FD00003C 81332000        r1 = r1 AND 0x3c2000;
0x000521        FD00003C 21032000        Null = r1 - 3940352;
0x000523        00C40000                 if EQ r10 = r2 + Null;
0x000524        200200CF                 Null = r0 - r10;
0x000525        00C20004                 if NEG r10 = r0 + Null;
0x000526        D13A0013                 r1 = M[r8 + 19];
0x000527        E5F00004                 do $M.sco_timing.SyncClock.lp_sco_xmit;
0x000528        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000529        93230000                 r0 = r0 ASHIFT r1;
0x00052A        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.sco_timing.SyncClock.lp_sco_xmit>
0x00052B        D12A0014                 r0 = M[r8 + 20];
0x00052C        4430000F                 r1 = Null + I0;
0x00052D        E1F00701                 call $cbuffer.set_read_address;
0x00052E        D12A0012                 r0 = M[r8 + 18];
0x00052F        4430004F                 r1 = Null + I4;
0x000530        E1F00702                 call $cbuffer.set_write_address;
0x000531        50C0000F                 L0 = Null + Null;
0x000532        50E0000F                 L4 = Null + Null;
0x000533        D10A0018                 Null = M[r8 + 24];
0x000534        18900001                 if NE M[r7] = Null + Null;
0x000535        D50A0018                 M[r8 + 24] = Null;
0x000536        DDF00704                 jump $pop_rLink_and_rts;

 <$sbcenc.analysis_subband_filter>
0x000537        F3D00000                 push rLink;
0x000538        D15B0021                 r3 = M[r9 + 33];
0x000539        5085005F                 M0 = r3 + r3;
0x00053A        51900001                 M1 = Null + 1;
0x00053B        7CA9008F                 M2 = M1 - M0;
0x00053C        99250008                 r0 = r3 * 8 (int);
0x00053D        78B9002F                 M3 = M1 - r0;
0x00053E        9825007F                 r0 = r3 * r5 (int);
0x00053F        0008000F                 Null = r6 + Null;
0x000540        00200000                 if EQ r0 = Null + Null;
0x000541        D16B0014                 r4 = M[r9 + 20];
0x000542        5022006F                 I2 = r0 + r4;
0x000543        016B0011                 r4 = r9 + 17;
0x000544        D027006F                 r0 = M[r5 + r4];
0x000545        5060002F                 I6 = Null + r0;
0x000546        D16B001D                 r4 = M[r9 + 29];
0x000547        51E00050                 L4 = Null + 80;
0x000548        0140FFFC                 r2 = Null + -4;

 <$M.sbcenc.analysis_subband_filter.block_loop_M8>
0x000549        D12B0015                 r0 = M[r9 + 21];
0x00054A        5000002F                 I0 = Null + r0;
0x00054B        D12B0001                 r0 = M[r9 + 1];
0x00054C        5050002F                 I5 = Null + r0;
0x00054D        5846000F                 I4 = I6 + Null;
0x00054E        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00054F        93243500                 r0 = r0 ASHIFT r2, r1 = M[I1,1];
0x000550        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x000551        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x000552        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x000553        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x000554        933425A3                 r1 = r1 ASHIFT r2, r0 = M[I1,1], M[I4,-1] = r0;
0x000555        932435B3                 r0 = r0 ASHIFT r2, r1 = M[I1,1], M[I4,-1] = r1;
0x000556        933400A3                 r1 = r1 ASHIFT r2, M[I4,-1] = r0;
0x000557        030000B3                 Null = Null + Null, M[I4,-1] = r1;
0x000558        E1F0001B                 call $M.sbcenc.analysis_subband_filter.share_code;
0x000559        E5F00012                 do $M.sbcenc.analysis_subband_filter.matrix_loop_M8;
0x00055A        CF232D35                 rMAC = r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00055B        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00055C        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00055D        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00055E        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00055F        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000560        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000561        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000562        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000563        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000564        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000565        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000566        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000567        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x000568        AE232E35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,M2], r1 = M[I5,M1];
0x000569        AF232D35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I3,1], r1 = M[I5,1];
0x00056A        03009900                 Null = Null + Null, M[I2,1] = rMAC;

 <$M.sbcenc.analysis_subband_filter.matrix_loop_M8>
0x00056B        5B280000                 I2 = I2 + r6;
0x00056C        E466003F                 r4 = r4 - 1;
0x00056D        DD10FFDC                 if NE jump $M.sbcenc.analysis_subband_filter.block_loop_M8;
0x00056E        4420006F                 r0 = Null + I6;
0x00056F        016B0011                 r4 = r9 + 17;
0x000570        D427006F                 M[r5 + r4] = r0;
0x000571        51E00000                 L4 = Null + 0;
0x000572        DDF006C8                 jump $pop_rLink_and_rts;

 <$M.sbcenc.analysis_subband_filter.share_code>
0x000573        5864000F                 I6 = I4 + Null;
0x000574        02000021                 Null = Null + Null, r0 = M[I4,M1];
0x000575        D12B0005                 r0 = M[r9 + 5];
0x000576        5030002F                 I3 = Null + r0;
0x000577        44C0008F                 r10 = Null + M0;
0x000578        02003020                 Null = Null + Null, r1 = M[I0,M0], r0 = M[I4,M0];
0x000579        E5F00007                 do $M.sbcenc.analysis_subband_filter.window_calc_loop_M4;
0x00057A        CE233020                 rMAC = r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x00057B        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x00057C        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x00057D        AE233323                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M3], r0 = M[I4,M3];
0x00057E        AE233020                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I0,M0], r0 = M[I4,M0];
0x00057F        03009D00                 Null = Null + Null, M[I3,1] = rMAC;

 <$M.sbcenc.analysis_subband_filter.window_calc_loop_M4>
0x000580        D12B0005                 r0 = M[r9 + 5];
0x000581        5030002F                 I3 = Null + r0;
0x000582        00C5000F                 r10 = r3 + Null;
0x000583        03002D35                 Null = Null + Null, r0 = M[I3,1], r1 = M[I5,1];
0x000584        DC0D000F                 rts;

 <$wbsenc.process_frame>
0x000585        F3D00000                 push rLink;
0x000586        092001C5                 r0 = Null + M[$wbs_frame_encode.cbuf_in_ptr];
0x000587        E1F00698                 call $_cbuffer_get_read_address;
0x000588        5010002F                 I1 = Null + r0;
0x000589        50D0003F                 L1 = Null + r1;
0x00058A        FD0000FF 19003A0B        M[$wbs_frame_encode.can_idle] = Null + Null;
0x00058C        01800000                 r6 = Null + 0;
0x00058D        01700000                 r5 = Null + 0;
0x00058E        E1F0FFA9                 call $sbcenc.analysis_subband_filter;
0x00058F        4430001F                 r1 = Null + I1;
0x000590        092001C5                 r0 = Null + M[$wbs_frame_encode.cbuf_in_ptr];
0x000591        E1F0069D                 call $cbuffer.set_read_address;
0x000592        51D00000                 L1 = Null + 0;
0x000593        E1F004BB                 call $sbc.calc_scale_factors;
0x000594        092001C6                 r0 = Null + M[$wbs_frame_encode.cbuf_out_ptr];
0x000595        E1F0068F                 call $_cbuffer_get_write_address;
0x000596        5000002F                 I0 = Null + r0;
0x000597        50C0003F                 L0 = Null + r1;
0x000598        E1F00537                 call $wbsenc.wbs_pre_proc_func;
0x000599        0120000F                 r0 = Null + 15;
0x00059A        D52B0024                 M[r9 + 36] = r0;
0x00059B        01200008                 r0 = Null + 8;
0x00059C        013000AD                 r1 = Null + 173;
0x00059D        E1F0051D                 call $sbcenc.putbits;
0x00059E        01300000                 r1 = Null + 0;
0x00059F        E1F0051B                 call $sbcenc.putbits;
0x0005A0        E1F0060F                 call $sbc.crc_calc;
0x0005A1        01300000                 r1 = Null + 0;
0x0005A2        E1F00518                 call $sbcenc.putbits;
0x0005A3        E1F0060C                 call $sbc.crc_calc;
0x0005A4        D12B0018                 r0 = M[r9 + 24];
0x0005A5        5010002F                 I1 = Null + r0;
0x0005A6        D12B001F                 r0 = M[r9 + 31];
0x0005A7        D13B0021                 r1 = M[r9 + 33];
0x0005A8        9882003F                 r6 = r0 * r1 (int);
0x0005A9        01200004                 r0 = Null + 4;

 <$M.wbsenc.process_frame.scalefactor_loop>
0x0005AA        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0005AB        E1F00604                 call $sbc.crc_calc;
0x0005AC        E488003F                 r6 = r6 - 1;
0x0005AD        DD10FFFD                 if NE jump $M.wbsenc.process_frame.scalefactor_loop;
0x0005AE        01200008                 r0 = Null + 8;
0x0005AF        D13B0024                 r1 = M[r9 + 36];
0x0005B0        813300FF                 r1 = r1 AND 0xff;
0x0005B1        E1F00509                 call $sbcenc.putbits;
0x0005B2        E1F0060A                 call $sbcenc.write_scale_factors;
0x0005B3        E1F0FB6E                 call ALrYtClmXhG4b8GdfG6yhcsEkwc5+93FLGi1D2oh5B0=;
0x0005B4        E1F002C9                 call $sbcenc.quantize_samples;
0x0005B5        E1F0056F                 call $sbcenc.write_audio_samples;
0x0005B6        01300000                 r1 = Null + 0;
0x0005B7        D12B0010                 r0 = M[r9 + 16];
0x0005B8        8122000F                 r0 = r0 AND 0xf;
0x0005B9        E1100501                 if NE call $sbcenc.putbits;
0x0005BA        4430000F                 r1 = Null + I0;
0x0005BB        092001C6                 r0 = Null + M[$wbs_frame_encode.cbuf_out_ptr];
0x0005BC        E1F00676                 call $cbuffer.set_write_address;
0x0005BD        51C00000                 L0 = Null + 0;
0x0005BE        DDF0067C                 jump $pop_rLink_and_rts;

 <$frame_sync.sco_port_handler>
0x0005BF        F3D00000                 push rLink;

 <$M.frame_sync.sco_port_handler.jp_do_again>
0x0005C0        D12A0000                 r0 = M[r8 + 0];
0x0005C1        E1F00638                 call $cbuffer.calc_amount_data;
0x0005C2        FD0000FF 19203A07        M[$sco_port_data] = r0 + Null;
0x0005C4        DD000676                 if EQ jump $pop_rLink_and_rts;
0x0005C5        D12A0002                 r0 = M[r8 + 2];
0x0005C6        E1F00623                 call $cbuffer.calc_amount_space;
0x0005C7        29020A07                 Null = r0 - M[$sco_last_packet_size];
0x0005C8        DD400672                 if NEG jump $pop_rLink_and_rts;
0x0005C9        D12A0000                 r0 = M[r8 + 0];
0x0005CA        E1F00304                 call $cbuffer.get_read_address_and_size.its_a_port;
0x0005CB        0082000F                 r6 = r0 + Null;
0x0005CC        D12A0002                 r0 = M[r8 + 2];
0x0005CD        E1F00657                 call $_cbuffer_get_write_address;
0x0005CE        5040002F                 I4 = Null + r0;
0x0005CF        50E0003F                 L4 = Null + r1;
0x0005D0        FD0000FF 09703A07        r5 = Null + M[$sco_port_data];
0x0005D2        21070005                 Null = r5 - 5;
0x0005D3        DD400025                 if NEG jump $M.frame_sync.sco_port_handler.jp_purge;
0x0005D4        D028000F                 r0 = M[r6 + Null];
0x0005D5        D058000F                 r3 = M[r6 + Null];
0x0005D6        21770005                 r5 = r5 - 5;
0x0005D7        D038000F                 r1 = M[r6 + Null];
0x0005D8        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x0005D9        E4B3002F                 r9 = r1 + 1;
0x0005DA        D068000F                 r4 = M[r6 + Null];
0x0005DB        030000E1                 Null = Null + Null, M[I4,1] = r4;
0x0005DC        D038000F                 r1 = M[r6 + Null];
0x0005DD        030000B1                 Null = Null + Null, M[I4,1] = r1;
0x0005DE        21025C5C                 Null = r0 - 23644;
0x0005DF        DD100019                 if NE jump $M.frame_sync.sco_port_handler.jp_purge;
0x0005E0        21C50005                 r10 = r3 - 5;
0x0005E1        200700CF                 Null = r5 - r10;
0x0005E2        DD400016                 if NEG jump $M.frame_sync.sco_port_handler.jp_purge;
0x0005E3        237C0000                 r5 = r5 - r10;
0x0005E4        E5F00003                 do $M.frame_sync.sco_port_handler.lp_skip_hdr;
0x0005E5        D028000F                 r0 = M[r6 + Null];
0x0005E6        03000000                 Null = Null + Null;

 <$M.frame_sync.sco_port_handler.lp_skip_hdr>
0x0005E7        91CB007F                 r10 = r9 ASHIFT -1;
0x0005E8        200700CF                 Null = r5 - r10;
0x0005E9        DD40000F                 if NEG jump $M.frame_sync.sco_port_handler.jp_purge;
0x0005EA        237C0000                 r5 = r5 - r10;
0x0005EB        D12A0001                 r0 = M[r8 + 1];
0x0005EC        E1F002E2                 call $cbuffer.get_read_address_and_size.its_a_port;
0x0005ED        012C0003                 r0 = r10 + 3;
0x0005EE        19200A07                 M[$sco_last_packet_size] = r0 + Null;
0x0005EF        E5F00003                 do $M.frame_sync.sco_port_handler.lp_copy;
0x0005F0        D038000F                 r1 = M[r6 + Null];
0x0005F1        030000B1                 Null = Null + Null, M[I4,1] = r1;

 <$M.frame_sync.sco_port_handler.lp_copy>
0x0005F2        50E0000F                 L4 = Null + Null;
0x0005F3        D12A0002                 r0 = M[r8 + 2];
0x0005F4        4430004F                 r1 = Null + I4;
0x0005F5        E1F0063D                 call $cbuffer.set_write_address;
0x0005F6        0900FE33                 Null = Null + M[0xfffe33];
0x0005F7        DDF0FFC9                 jump $M.frame_sync.sco_port_handler.jp_do_again;

 <$M.frame_sync.sco_port_handler.jp_purge>
0x0005F8        FD0000FF 09403A07        r2 = Null + M[$sco_port_data];
0x0005FA        00C7000F                 r10 = r5 + Null;
0x0005FB        E5F00003                 do $M.frame_sync.sco_port_handler.lp_purge;
0x0005FC        D038000F                 r1 = M[r6 + Null];
0x0005FD        03000000                 Null = Null + Null;

 <$M.frame_sync.sco_port_handler.lp_purge>
0x0005FE        50E0000F                 L4 = Null + Null;
0x0005FF        0900FE33                 Null = Null + M[0xfffe33];
0x000600        DDF0063A                 jump $pop_rLink_and_rts;

 <zS7MSjF5Cle15fOEm2R/ce+d5gR1iFKBDUQ04JIAdGs=>
0x000601        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000602        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000603        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000604        E1F0FD1C                 call $cbops_multirate.GetTransferAndUpdateOutput;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000605        00C4000F                 r10 = r2 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000606        DDD00634                 if LE jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000607        F3E20000                 push FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000608        51800001                 M0 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000609        FD00007F 01B0FFFF        r9 = Null + 8388607;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060B        500000AF                 I0 = Null + r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060C        F3900000                 push r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060D        F2A02000                 push r8, r0 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060E        E1F0FD27                 call $cbops_multirate.GetBuffer;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00060F        5010202F                 I1 = Null + r0, r0 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000610        50D0603F                 L1 = Null + r1, r4 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000611        E1F0FD24                 call $cbops_multirate.GetBuffer;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000612        5050402F                 I5 = Null + r0, r2 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000613        50F0703F                 L5 = Null + r1, r5 = M[I0,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000614        0056000F                 r3 = r4 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000615        DD000027                 if EQ jump LHzis9sSIyQNb4mEOGlzlSb+zK3DlVfnjRJiKM+A7Y0=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000616        016A0010                 r4 = r8 + 16;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000617        F3600000                 push r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000618        F3E60000                 pop FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000619        512A000B                 I2 = r8 + 11;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061A        51350005                 I3 = r3 + 5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061B        D1950004                 r7 = M[r3 + 4];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061C        DD00000F                 if EQ jump JK96mGzT4IK8ZBzz0ggultS/C7BWL0VQHgJ5tV3VsuM=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061D        D12A0005                 r0 = M[r8 + 5];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061E        F1000084                 pushm <r0, r5>;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00061F        F1018020                 pushm <I5, L5>;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000620        5050002F                 I5 = Null + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000621        50F0000F                 L5 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000622        0070000F                 r5 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000623        512A0007                 I2 = r8 + 7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000624        E009000F                 call r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000625        50D0000F                 L1 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000626        00C9000F                 r10 = r7 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000627        0040000F                 r2 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000628        F1058020                 popm <I5, L5>;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000629        F1040084                 popm <r0, r5>;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00062A        5010002F                 I1 = Null + r0;

 <JK96mGzT4IK8ZBzz0ggultS/C7BWL0VQHgJ5tV3VsuM=>
0x00062B        02002C00                 Null = Null + Null, r0 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00062C        03000000                 Null = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00062D        E002000F                 call r0;

 <tZ2kzxBZkH5CP2eZaFm7j7MlIdDLpyykNJDMOfLqWd0=>
0x00062E        F3A40000                 pop r8;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00062F        0039000F                 r1 = r7 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000630        F3940000                 pop r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000631        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000632        E1F0FCF8                 call $cbops_multirate.SetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000633        50D0000F                 L1 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000634        50F0000F                 L5 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000635        F3000000                 push Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000636        F1AAFFFF                 B0 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000637        F1BAFFFF                 B1 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000638        F1CAFFFF                 B4 = M[SP + -0x1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000639        F3D60000                 pop B5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00063A        F3E60000                 pop FP;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00063B        DDF005FF                 jump $pop_rLink_and_rts;

 <LHzis9sSIyQNb4mEOGlzlSb+zK3DlVfnjRJiKM+A7Y0=>
0x00063C        009C000F                 r7 = r10 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00063D        03470000                 r2 = r2 + r5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00063E        66C81400                 r10 = r10 - M0, rMAC = M[I1,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00063F        93E40000                 rMAC = rMAC ASHIFT r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000640        E5F00003                 do 3BX3eEioKBZro9ok5U3oe9k9BIfisebGiGRHblXTbq0=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000641        02001494                 Null = Null + Null, rMAC = M[I1,M0], M[I5,M0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000642        93E40000                 rMAC = rMAC ASHIFT r2;

 <3BX3eEioKBZro9ok5U3oe9k9BIfisebGiGRHblXTbq0=>
0x000643        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000644        DDF0FFEA                 jump tZ2kzxBZkH5CP2eZaFm7j7MlIdDLpyykNJDMOfLqWd0=;

 <$message.received_service_routine>
0x000645        F3D00000                 push rLink;
0x000646        51800000                 M0 = Null + 0;
0x000647        0920FE1D                 r0 = Null + M[0xfffe1d];
0x000648        8132FFF0                 r1 = r0 AND 0xfff0;
0x000649        8903FFF0                 Null = r1 XOR 0xfff0;
0x00064A        DD10001B                 if NE jump $M.message.received_service_routine.non_long_message;
0x00064B        81020001                 Null = r0 AND 0x1;
0x00064C        DD000002                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x00064D        19000A04                 M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x00064E        09300A04                 r1 = Null + M[$message.long_message_size];
0x00064F        21030052                 Null = r1 - 82;
0x000650        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x000651        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x000652        0940E006                 r2 = Null + M[0xffe006];
0x000653        D5430756                 M[r1 + 1878] = r2;
0x000654        0940E007                 r2 = Null + M[0xffe007];
0x000655        D5430757                 M[r1 + 1879] = r2;
0x000656        0940E008                 r2 = Null + M[0xffe008];
0x000657        D5430758                 M[r1 + 1880] = r2;
0x000658        0940E009                 r2 = Null + M[0xffe009];
0x000659        D5430759                 M[r1 + 1881] = r2;
0x00065A        01330004                 r1 = r1 + 4;
0x00065B        19300A04                 M[$message.long_message_size] = r1 + Null;
0x00065C        81020002                 Null = r0 AND 0x2;
0x00065D        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x00065E        0970E001                 r5 = Null + M[0xffe001];
0x00065F        E477002F                 r5 = r5 + 1;
0x000660        1970E001                 M[0xffe001] = r5 + Null;
0x000661        DDF005D9                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x000662        09200756                 r0 = Null + M[$message.long_message_data];
0x000663        8122FFFF                 r0 = r0 AND 0xffff;
0x000664        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x000665        01C00032                 r10 = Null + 50;
0x000666        09300A02                 r1 = Null + M[$message.last_addr];
0x000667        E5F00009                 do $M.message.received_service_routine.loop;
0x000668        E403002F                 Null = r1 + 1;
0x000669        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x00066A        D1430003                 r2 = M[r1 + 3];
0x00066B        8052004F                 r3 = r0 AND r2;
0x00066C        D1430001                 r2 = M[r1 + 1];
0x00066D        2005004F                 Null = r3 - r2;
0x00066E        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x00066F        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x000670        E1F00857                 call $error;

 <$M.message.received_service_routine.no_handler>
0x000671        0970E001                 r5 = Null + M[0xffe001];
0x000672        E477002F                 r5 = r5 + 1;
0x000673        1970E001                 M[0xffe001] = r5 + Null;
0x000674        DDF005C6                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x000675        D1730002                 r5 = M[r1 + 2];
0x000676        F3700000                 push r5;
0x000677        47080000                 Null = Null + M0;
0x000678        DD000006                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x000679        0032000F                 r1 = r0 + Null;
0x00067A        09400757                 r2 = Null + M[0x757];
0x00067B        01500758                 r3 = Null + 1880;
0x00067C        0120FFFE                 r0 = Null + -2;
0x00067D        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x00067E        0930E006                 r1 = Null + M[0xffe006];
0x00067F        0940E007                 r2 = Null + M[0xffe007];
0x000680        0950E008                 r3 = Null + M[0xffe008];
0x000681        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x000682        0970E001                 r5 = Null + M[0xffe001];
0x000683        E477002F                 r5 = r5 + 1;
0x000684        1970E001                 M[0xffe001] = r5 + Null;
0x000685        F3740000                 pop r5;
0x000686        E007000F                 call r5;
0x000687        DDF005B3                 jump $pop_rLink_and_rts;

 <$cbuffer.configure_port_message_handler>
0x000688        F3D00000                 push rLink;
0x000689        2103000C                 Null = r1 - 12;
0x00068A        E150001F                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x00068B        D553095D                 M[r1 + 2397] = r3;
0x00068C        FD0000FF D54333D8        M[r1 + -52264] = r2;
0x00068E        DD100005                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;

 <$M.cbuffer.configure_port_message_handler.read_port_disconnect>
0x00068F        01200000                 r0 = Null + 0;
0x000690        09D009FF                 rLink = Null + M[$cbuffer.read_port_disconnect_address];
0x000691        E00D0001                 if NE call rLink;
0x000692        DDF005A8                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x000693        0023000F                 r0 = r1 + Null;
0x000694        D144FFFF                 r2 = M[r2 + -1];
0x000695        01300040                 r1 = Null + 64;
0x000696        8D440078                 r2 = r2 LSHIFT -8;
0x000697        8C43004F                 r2 = r1 LSHIFT r2;
0x000698        D5420945                 M[r0 + 2373] = r2;
0x000699        E430002F                 r1 = Null + 1;
0x00069A        0140000D                 r2 = Null + 13;
0x00069B        2105F000                 Null = r3 - -4096;
0x00069C        00340004                 if NEG r1 = r2 + Null;
0x00069D        F1000014                 pushm <r0, r2>;
0x00069E        01400062                 r2 = Null + 98;
0x00069F        65020007                 Null = 7 - r0;
0x0006A0        00220044                 if NEG r0 = r0 + r2;
0x0006A1        D532FE7B                 M[r0 + -389] = r1;
0x0006A2        F1040014                 popm <r0, r2>;
0x0006A3        0032000F                 r1 = r0 + Null;
0x0006A4        E420002F                 r0 = Null + 1;
0x0006A5        FD0000FF 09D039FE        rLink = Null + M[$cbuffer.read_port_connect_address];
0x0006A7        E00D0001                 if NE call rLink;
0x0006A8        DDF00592                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x0006A9        D553095D                 M[r1 + 2397] = r3;
0x0006AA        FD0000FF D54333D8        M[r1 + -52264] = r2;
0x0006AC        DD100005                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;

 <$M.cbuffer.configure_port_message_handler.write_port_disconnect>
0x0006AD        01200000                 r0 = Null + 0;
0x0006AE        09D009FE                 rLink = Null + M[$cbuffer.write_port_disconnect_address];
0x0006AF        E00D0001                 if NE call rLink;
0x0006B0        DDF0058A                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x0006B1        0023000F                 r0 = r1 + Null;
0x0006B2        D144FFFF                 r2 = M[r2 + -1];
0x0006B3        01300040                 r1 = Null + 64;
0x0006B4        8D440078                 r2 = r2 LSHIFT -8;
0x0006B5        8C43004F                 r2 = r1 LSHIFT r2;
0x0006B6        D5420945                 M[r0 + 2373] = r2;
0x0006B7        01300009                 r1 = Null + 9;
0x0006B8        01400005                 r2 = Null + 5;
0x0006B9        2105F000                 Null = r3 - -4096;
0x0006BA        00340004                 if NEG r1 = r2 + Null;
0x0006BB        F1000014                 pushm <r0, r2>;
0x0006BC        2122000C                 r0 = r0 - 12;
0x0006BD        01400066                 r2 = Null + 102;
0x0006BE        65020007                 Null = 7 - r0;
0x0006BF        00220044                 if NEG r0 = r0 + r2;
0x0006C0        D532FE73                 M[r0 + -397] = r1;
0x0006C1        F1040014                 popm <r0, r2>;
0x0006C2        0032000F                 r1 = r0 + Null;
0x0006C3        E420002F                 r0 = Null + 1;
0x0006C4        FD0000FF 09D039FD        rLink = Null + M[$cbuffer.write_port_connect_address];
0x0006C6        E00D0001                 if NE call rLink;
0x0006C7        DDF00573                 jump $pop_rLink_and_rts;

 <$sbcdec.synthesis_subband_filter>
0x0006C8        F3D00000                 push rLink;
0x0006C9        D13B0021                 r1 = M[r9 + 33];
0x0006CA        5080003F                 M0 = Null + r1;
0x0006CB        D14B001F                 r2 = M[r9 + 31];
0x0006CC        9854003F                 r3 = r2 * r1 (int);
0x0006CD        E455003F                 r3 = r3 - 1;
0x0006CE        9823007F                 r0 = r1 * r5 (int);
0x0006CF        E404003F                 Null = r2 - 1;
0x0006D0        00200000                 if EQ r0 = Null + Null;
0x0006D1        D16B0014                 r4 = M[r9 + 20];
0x0006D2        5022006F                 I2 = r0 + r4;
0x0006D3        012B003C                 r0 = r9 + 60;
0x0006D4        D027002F                 r0 = M[r5 + r0];
0x0006D5        5000002F                 I0 = Null + r0;
0x0006D6        D16B001D                 r4 = M[r9 + 29];
0x0006D7        51C000A0                 L0 = Null + 160;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M8>
0x0006D8        D12B0015                 r0 = M[r9 + 21];
0x0006D9        5040002F                 I4 = Null + r0;
0x0006DA        D12B002E                 r0 = M[r9 + 46];
0x0006DB        5050002F                 I5 = Null + r0;
0x0006DC        51900001                 M1 = Null + 1;
0x0006DD        51A0FFF0                 M2 = Null + -16;
0x0006DE        51B0FFF9                 M3 = Null + -7;
0x0006DF        4CC8008F                 r10 = M0 + M0;
0x0006E0        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x0006E1        E5F0000A                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M8;
0x0006E2        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0006E3        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0006E4        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0006E5        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0006E6        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0006E7        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0006E8        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x0006E9        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x0006EA        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M8>
0x0006EB        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x0006EC        5B250000                 I2 = I2 + r3;
0x0006ED        51900018                 M1 = Null + 24;
0x0006EE        51A0FFB9                 M2 = Null + -71;
0x0006EF        51B0FF69                 M3 = Null + -151;
0x0006F0        E1F0000A                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x0006F1        5190FFD0                 M1 = Null + -48;
0x0006F2        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x0006F3        E466003F                 r4 = r4 - 1;
0x0006F4        DD10FFE4                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M8;
0x0006F5        4420000F                 r0 = Null + I0;
0x0006F6        016B003C                 r4 = r9 + 60;
0x0006F7        D427006F                 M[r5 + r4] = r0;
0x0006F8        51C00000                 L0 = Null + 0;
0x0006F9        DDF00541                 jump $pop_rLink_and_rts;

 <$M.sbcdec.synthesis_subband_filter.output_code>
0x0006FA        44C0008F                 r10 = Null + M0;
0x0006FB        02002130                 Null = Null + Null, r0 = M[I0,M1], r1 = M[I4,M0];
0x0006FC        E5F0000D                 do $M.sbcdec.synthesis_subband_filter.output_loop;
0x0006FD        CE232030                 rMAC = r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x0006FE        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x0006FF        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x000700        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x000701        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x000702        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x000703        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x000704        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x000705        AE232332                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M3], r1 = M[I4,M2];
0x000706        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x000707        9D41FFFC                 r2 = rMAC * -4 (int) (sat);
0x000708        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcdec.synthesis_subband_filter.output_loop>
0x000709        DC0D000F                 rts;

 <$frame_sync.task_scheduler_run>
0x00070A        0930FE71                 r1 = Null + M[0xfffe71];
0x00070B        FD0000FF 09603A01        r4 = Null + M[$interrupt.total_time];
0x00070D        0980FE4D                 r6 = Null + M[0xfffe4d];
0x00070E        0120003F                 r0 = Null + 63;
0x00070F        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.frame_sync.task_scheduler_run.jp_wait>
0x000710        D14A0008                 r2 = M[r8 + 8];
0x000711        DD00FFFF                 if EQ jump $M.frame_sync.task_scheduler_run.jp_wait;
0x000712        1980FE4D                 M[0xfffe4d] = r6 + Null;
0x000713        0950FE71                 r3 = Null + M[0xfffe71];
0x000714        D12A0005                 r0 = M[r8 + 5];
0x000715        2035003F                 r1 = r3 - r1;
0x000716        FD0000FF 29663A01        r4 = r4 - M[$interrupt.total_time];
0x000718        03360000                 r1 = r1 + r4;
0x000719        03320000                 r1 = r1 + r0;
0x00071A        D53A0005                 M[r8 + 5] = r1;
0x00071B        D12A0007                 r0 = M[r8 + 7];
0x00071C        2075002F                 r5 = r3 - r0;
0x00071D        FD00000F 01104240        rMAC = Null + 1000000;
0x00071F        2007001F                 Null = r5 - rMAC;
0x000720        DD400011                 if NEG jump $M.frame_sync.task_scheduler_run.jp_mips_done;
0x000721        91E1007F                 rMAC = rMAC ASHIFT -1 (MI);
0x000722        D9070000                 Div = rMAC / r5;
0x000723        2017003F                 rMAC = r5 - r1;
0x000724        D17A0006                 r5 = M[r8 + 6];
0x000725        D55A0007                 M[r8 + 7] = r3;
0x000726        D50A0005                 M[r8 + 5] = Null;
0x000727        D50A0006                 M[r8 + 6] = Null;
0x000728        D9500001                 r3 = DivResult;
0x000729        9415001F                 rMAC = r3 * rMAC (frac);
0x00072A        9475007F                 r5 = r3 * r5 (frac);
0x00072B        FD000001 01500625        r3 = Null + 67109;
0x00072D        97150000                 rMAC = rMAC * r3 (frac);
0x00072E        97750000                 r5 = r5 * r3 (frac);
0x00072F        D51A0003                 M[r8 + 3] = rMAC;
0x000730        D57A0004                 M[r8 + 4] = r5;

 <$M.frame_sync.task_scheduler_run.jp_mips_done>
0x000731        D844000F                 r2 = SIGNDET r2;
0x000732        8D540001                 r3 = r2 LSHIFT 1;
0x000733        01550009                 r3 = r3 + 9;
0x000734        D05A005F                 r3 = M[r8 + r3];
0x000735        FD0000BF 0160FFFF        r4 = Null + -4194305;
0x000737        2040004F                 r2 = Null - r2;
0x000738        9046004F                 r2 = r4 ASHIFT r2;
0x000739        F3D00000                 push rLink;
0x00073A        E1F004D7                 call $block_interrupts;
0x00073B        D16A0008                 r4 = M[r8 + 8];
0x00073C        83640000                 r4 = r4 AND r2;
0x00073D        D56A0008                 M[r8 + 8] = r4;
0x00073E        E1F004C3                 call $interrupt.unblock;
0x00073F        E005000F                 call r3;
0x000740        DDF004FA                 jump $pop_rLink_and_rts;

 <$sco_params_handler>
0x000741        51900001                 M1 = Null + 1;
0x000742        FD0000FF 09A03A08        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x000744        D1350005                 r1 = M[r3 + 5];
0x000745        D1450006                 r2 = M[r3 + 6];
0x000746        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x000747        811100FF                 rMAC = rMAC AND 0xff;
0x000748        991104E2                 rMAC = rMAC * 1250 (int);
0x000749        8D330010                 r1 = r1 LSHIFT 16;
0x00074A        8144FFFF                 r2 = r2 AND 0xffff;
0x00074B        03430000                 r2 = r2 + r1;
0x00074C        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x00074E        8D810016                 r6 = rMAC LSHIFT 22;
0x00074F        D1350007                 r1 = M[r3 + 7];
0x000750        23830000                 r6 = r6 - r1;
0x000751        D1450008                 r2 = M[r3 + 8];
0x000752        D1950001                 r7 = M[r3 + 1];
0x000753        03430000                 r2 = r2 + r1;
0x000754        FD000000 CD14346E        rMAC = r2 * 0.0016000270843505859 (SS);
0x000756        8D410000                 r2 = rMAC LSHIFT 0;
0x000757        2004009F                 Null = r2 - r7;
0x000758        20440095                 if POS r2 = r2 - r7;
0x000759        FD0000FF 19403A09        M[$M.sco_timing.rcv_proc_trigger] = r2 + Null;
0x00075B        20490041                 if NE r2 = r7 - r2;
0x00075C        67490000                 r2 = r2 - M1;
0x00075D        4440009D                 if LE r2 = Null + M1;
0x00075E        19400A09                 M[$M.sco_timing.sco_rcv_trigger] = r2 + Null;
0x00075F        D1250003                 r0 = M[r3 + 3];
0x000760        D52A0015                 M[r8 + 21] = r0;
0x000761        D14A0019                 r2 = M[r8 + 25];
0x000762        18420001                 if NE M[r2] = r0 + Null;
0x000763        D17A0016                 r5 = M[r8 + 22];
0x000764        D1950001                 r7 = M[r3 + 1];
0x000765        99990271                 r7 = r7 * 625 (int);
0x000766        D59A0016                 M[r8 + 22] = r7;
0x000767        D13A0017                 r1 = M[r8 + 23];
0x000768        D58A0017                 M[r8 + 23] = r6;
0x000769        0007000F                 Null = r5 + Null;
0x00076A        DD00000A                 if EQ jump $M.sco_timing.sco_params_handler.jp_force_reset;
0x00076B        23380000                 r1 = r1 - r6;
0x00076C        DC0D0000                 if EQ rts;
0x00076D        91E30080                 rMAC = r1 ASHIFT 0 (LO);
0x00076E        D9090000                 Div = rMAC / r7;
0x00076F        D9600002                 r4 = DivRemainder;
0x000770        03000000                 Null = Null + Null;
0x000771        20600064                 if NEG r4 = Null - r4;
0x000772        21060138                 Null = r4 - 312;
0x000773        DC0D0004                 if NEG rts;

 <$M.sco_timing.sco_params_handler.jp_force_reset>
0x000774        D59A0018                 M[r8 + 24] = r7;
0x000775        DC0D000F                 rts;

 <$flash.copy_to_dm_24>
0x000776        F3D00000                 push rLink;
0x000777        0082000F                 r6 = r0 + Null;
0x000778        81730001                 r5 = r1 AND 0x1;
0x000779        9163007F                 r4 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.page_loop>
0x00077A        0028000F                 r0 = r6 + Null;
0x00077B        99360003                 r1 = r4 * 3 (int);
0x00077C        F3300000                 push r1;
0x00077D        E1F0048C                 call $flash.map_page_into_dm;
0x00077E        5010002F                 I1 = Null + r0;
0x00077F        00C6000F                 r10 = r4 + Null;
0x000780        F3240000                 pop r0;
0x000781        2002003F                 Null = r0 - r1;
0x000782        DD000005                 if EQ jump $M.flash.copy_to_dm_24.read_values;
0x000783        99330002                 r1 = r1 * 2 (int);
0x000784        FD00002A 9533AAAB        r1 = r1 * 0.33333337306976318 (frac);
0x000786        91C3007F                 r10 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.read_values>
0x000787        236C0000                 r4 = r4 - r10;
0x000788        992C0003                 r0 = r10 * 3 (int);
0x000789        03820000                 r6 = r6 + r0;
0x00078A        E5F0000B                 do $M.flash.copy_to_dm_24.loop;
0x00078B        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00078C        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00078D        8D220008                 r0 = r0 LSHIFT 8;
0x00078E        8D530078                 r3 = r1 LSHIFT -8;
0x00078F        815500FF                 r3 = r3 AND 0xff;
0x000790        87522500                 r3 = r3 OR r0, r0 = M[I1,1];
0x000791        8122FFFF                 r0 = r0 AND 0xffff;
0x000792        8D330010                 r1 = r1 LSHIFT 16;
0x000793        0323D100                 r0 = r0 + r1, M[I0,1] = r3;
0x000794        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm_24.loop>
0x000795        0006000F                 Null = r4 + Null;
0x000796        DD10FFE4                 if NE jump $M.flash.copy_to_dm_24.page_loop;
0x000797        0007000F                 Null = r5 + Null;
0x000798        DD0004A2                 if EQ jump $pop_rLink_and_rts;
0x000799        0028000F                 r0 = r6 + Null;
0x00079A        01300002                 r1 = Null + 2;
0x00079B        E1F0046E                 call $flash.map_page_into_dm;
0x00079C        5010002F                 I1 = Null + r0;
0x00079D        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00079E        03003500                 Null = Null + Null, r1 = M[I1,1];
0x00079F        8D220008                 r0 = r0 LSHIFT 8;
0x0007A0        8D330078                 r1 = r1 LSHIFT -8;
0x0007A1        813300FF                 r1 = r1 AND 0xff;
0x0007A2        8423002F                 r0 = r1 OR r0;
0x0007A3        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x0007A4        DDF00496                 jump $pop_rLink_and_rts;

 <$message.private.try_to_send_message>
0x0007A5        F3D00000                 push rLink;
0x0007A6        E1F0046B                 call $block_interrupts;
0x0007A7        0920E000                 r0 = Null + M[0xffe000];
0x0007A8        FD0000FF 29223A03        r0 = r0 - M[$message.last_seq_sent];
0x0007AA        8102FFFF                 Null = r0 AND 0xffff;
0x0007AB        DD10001E                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x0007AC        FD0000FF 09303A02        r1 = Null + M[$message.queue_read_ptr];
0x0007AE        FD0000FF D123370F        r0 = M[r1 + -51441];
0x0007B0        1920E002                 M[0xffe002] = r0 + Null;
0x0007B1        FD0000FF D1233710        r0 = M[r1 + -51440];
0x0007B3        1920E003                 M[0xffe003] = r0 + Null;
0x0007B4        FD0000FF D1233711        r0 = M[r1 + -51439];
0x0007B6        1920E004                 M[0xffe004] = r0 + Null;
0x0007B7        FD0000FF D1233712        r0 = M[r1 + -51438];
0x0007B9        1920E005                 M[0xffe005] = r0 + Null;
0x0007BA        FD0000FF 09203A03        r0 = Null + M[$message.last_seq_sent];
0x0007BC        E422002F                 r0 = r0 + 1;
0x0007BD        FD0000FF 19203A03        M[$message.last_seq_sent] = r0 + Null;
0x0007BF        FD0000FF D123370E        r0 = M[r1 + -51442];
0x0007C1        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x0007C2        01330005                 r1 = r1 + 5;
0x0007C3        2103006E                 Null = r1 - 110;
0x0007C4        00300000                 if EQ r1 = Null + Null;
0x0007C5        FD0000FF 19303A02        M[$message.queue_read_ptr] = r1 + Null;
0x0007C7        29030A03                 Null = r1 - M[$message.queue_write_ptr];
0x0007C8        DD000009                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x0007C9        FD0000FF 094037FF        r2 = Null + M[0xff37ff];
0x0007CB        E1F002DB                 call $timer.cancel_event;
0x0007CC        FD0000FF 013037FC        r1 = Null + -51204;
0x0007CE        014003E8                 r2 = Null + 1000;
0x0007CF        015007A5                 r3 = Null + 1957;
0x0007D0        E1F00466                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x0007D1        E1F00430                 call $interrupt.unblock;
0x0007D2        DDF00468                 jump $pop_rLink_and_rts;

 <$wall_clock.message_handler>
0x0007D3        F3D00000                 push rLink;
0x0007D4        E455002F                 r3 = r3 + 1;
0x0007D5        01C00007                 r10 = Null + 7;
0x0007D6        FD0000FF 09803A06        r6 = Null + M[$wall_clock.last_addr];
0x0007D8        E5F00014                 do $M.wall_clock.message_handler.loop;
0x0007D9        E408002F                 Null = r6 + 1;
0x0007DA        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x0007DB        D1280001                 r0 = M[r6 + 1];
0x0007DC        D135FFFF                 r1 = M[r3 + -1];
0x0007DD        813300FF                 r1 = r1 AND 0xff;
0x0007DE        2002003F                 Null = r0 - r1;
0x0007DF        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x0007E0        D1280002                 r0 = M[r6 + 2];
0x0007E1        2802005F                 Null = r0 - M[r3];
0x0007E2        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x0007E3        D1280003                 r0 = M[r6 + 3];
0x0007E4        D1350001                 r1 = M[r3 + 1];
0x0007E5        2002003F                 Null = r0 - r1;
0x0007E6        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x0007E7        D1280004                 r0 = M[r6 + 4];
0x0007E8        D1350002                 r1 = M[r3 + 2];
0x0007E9        2002003F                 Null = r0 - r1;
0x0007EA        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x0007EB        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x0007EC        E1F006DB                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x0007ED        DDF0044D                 jump $pop_rLink_and_rts;

 <$M.wall_clock.message_handler.found>
0x0007EE        D1350003                 r1 = M[r3 + 3];
0x0007EF        D1450004                 r2 = M[r3 + 4];
0x0007F0        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x0007F1        811100FF                 rMAC = rMAC AND 0xff;
0x0007F2        991104E2                 rMAC = rMAC * 1250 (int);
0x0007F3        8D330010                 r1 = r1 LSHIFT 16;
0x0007F4        8144FFFF                 r2 = r2 AND 0xffff;
0x0007F5        03430000                 r2 = r2 + r1;
0x0007F6        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x0007F8        8D410016                 r2 = rMAC LSHIFT 22;
0x0007F9        D1650006                 r4 = M[r3 + 6];
0x0007FA        D1550005                 r3 = M[r3 + 5];
0x0007FB        8D550010                 r3 = r3 LSHIFT 16;
0x0007FC        8166FFFF                 r4 = r4 AND 0xffff;
0x0007FD        03650000                 r4 = r4 + r3;
0x0007FE        23460000                 r2 = r2 - r4;
0x0007FF        D5480005                 M[r6 + 5] = r2;
0x000800        D1280006                 r0 = M[r6 + 6];
0x000801        E0020001                 if NE call r0;
0x000802        DDF00438                 jump $pop_rLink_and_rts;

 <$sbcdec.sample_reconstruction>
0x000803        01700080                 r5 = Null + 128;
0x000804        D1AB0030                 r8 = M[r9 + 48];
0x000805        21AA0002                 r8 = r8 - 2;
0x000806        D13B0014                 r1 = M[r9 + 20];
0x000807        5000003F                 I0 = Null + r1;
0x000808        D13B001B                 r1 = M[r9 + 27];
0x000809        5010003F                 I1 = Null + r1;
0x00080A        D13B0018                 r1 = M[r9 + 24];
0x00080B        5020003F                 I2 = Null + r1;
0x00080C        D19B001F                 r7 = M[r9 + 31];
0x00080D        D13B0021                 r1 = M[r9 + 33];
0x00080E        9B390000                 r1 = r1 * r7 (int);
0x00080F        5080003F                 M0 = Null + r1;
0x000810        70A0003F                 M2 = Null - r1;
0x000811        50B3003F                 M3 = r1 + r1;
0x000812        D14B001D                 r2 = M[r9 + 29];
0x000813        9843004F                 r2 = r1 * r2 (int);
0x000814        7090004F                 M1 = Null - r2;
0x000815        59990001                 M1 = M1 + 1;

 <$M.sbcdec.sample_reconstruction.chan_loop>
0x000816        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcdec.sample_reconstruction.subband_loop>
0x000817        D1CB001D                 r10 = M[r9 + 29];
0x000818        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000819        03034900                 Null = Null + r1, r2 = M[I2,1];
0x00081A        DD00000F                 if EQ jump $M.sbcdec.sample_reconstruction.zero_sample;
0x00081B        E444002F                 r2 = r2 + 1;
0x00081C        D05A003F                 r3 = M[r8 + r1];
0x00081D        2034003F                 r1 = r2 - r1;
0x00081E        9067004F                 r4 = r5 ASHIFT r2;
0x00081F        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x000820        E5F00007                 do $M.sbcdec.sample_reconstruction.block_loop;
0x000821        8D220008                 r0 = r0 LSHIFT 8;
0x000822        01220080                 r0 = r0 + 128;
0x000823        C012005F                 rMAC = r0 * r3 (UU);
0x000824        8C21003F                 r0 = rMAC LSHIFT r1;
0x000825        2012226F                 rMAC = r0 - r4, r0 = M[I0,M2];
0x000826        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.sbcdec.sample_reconstruction.block_loop>
0x000827        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x000828        DDF00003                 jump $M.sbcdec.sample_reconstruction.done_block_loop;

 <$M.sbcdec.sample_reconstruction.zero_sample>
0x000829        E5F00002                 do $M.sbcdec.sample_reconstruction.done_block_loop;
0x00082A        0200B000                 Null = Null + Null, M[I0,M0] = r1;

 <$M.sbcdec.sample_reconstruction.done_block_loop>
0x00082B        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x00082C        E488003F                 r6 = r6 - 1;
0x00082D        DD10FFEA                 if NE jump $M.sbcdec.sample_reconstruction.subband_loop;
0x00082E        E499003F                 r7 = r7 - 1;
0x00082F        DD10FFE7                 if NE jump $M.sbcdec.sample_reconstruction.chan_loop;
0x000830        DC0D000F                 rts;

 <Cmhz3n9tB93fzfXyHcj55uhoUtWptgsBgyfYarBYbZ4=>
0x000831        D14A0002                 r2 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000832        DD0003A1                 if EQ jump $cbops.copy_op.amount_to_use;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000833        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000834        51800001                 M0 = Null + 1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000835        5020004F                 I2 = Null + r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000836        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000837        E1F0FAEF                 call $cbops_multirate.GetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000838        8A446800                 r2 = r2 XOR r2, r4 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000839        9816782F                 rMAC = r4 * r0 (int), r5 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00083A        AC17002F                 rMAC = rMAC + r5 * r0 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00083B        67180000                 rMAC = rMAC - M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00083C        00100004                 if NEG rMAC = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00083D        0031000F                 r1 = rMAC + Null;
0x00083E        02002800                 Null = Null + Null, r0 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00083F        D16A0006                 r4 = M[r8 + 6];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000840        9812586F                 rMAC = r0 * r4 (int), r3 = M[I2,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000841        AC15006F                 rMAC = rMAC + r3 * r4 (SS);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000842        DD000005                 if EQ jump wsTl3zJzPx5R8IdSEsvNfVSCTICdwYj70l0wKQUUwHM=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000843        67180000                 rMAC = rMAC - M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000844        00100004                 if NEG rMAC = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000845        2003001F                 Null = r1 - rMAC;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000846        00310005                 if POS r1 = rMAC + Null;

 <wsTl3zJzPx5R8IdSEsvNfVSCTICdwYj70l0wKQUUwHM=>
0x000847        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000848        E1F0FAE6                 call $cbops_multirate.SetMinimumTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000849        D10A000F                 Null = M[r8 + 15];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00084A        DD1003F0                 if NE jump $pop_rLink_and_rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00084B        D15A0002                 r3 = M[r8 + 2];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00084C        D55A000F                 M[r8 + 15] = r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00084D        016A0010                 r4 = r8 + 16;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00084E        512A000B                 I2 = r8 + 11;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x00084F        51350005                 I3 = r3 + 5;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000850        D1050004                 Null = M[r3 + 4];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000851        DD000003                 if EQ jump a1V4zT+6mStDGYX/CrTN8WNIOB9tzzPnTuLWTmFwUNA=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000852        512A0007                 I2 = r8 + 7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000853        E1F00213                 call $reset_iir_resampler;

 <a1V4zT+6mStDGYX/CrTN8WNIOB9tzzPnTuLWTmFwUNA=>
0x000854        5F380000                 I3 = I3 + M0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000855        E1F00211                 call $reset_iir_resampler;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000856        50C0000F                 L0 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000857        DDF003E3                 jump $pop_rLink_and_rts;

 <$sco_timing.PortConnected>
0x000858        FD0000FF 09A03A08        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x00085A        DC0D0000                 if EQ rts;
0x00085B        D12A0012                 r0 = M[r8 + 18];
0x00085C        8122001F                 r0 = r0 AND 0x1f;
0x00085D        2003002F                 Null = r1 - r0;
0x00085E        DC0D0001                 if NE rts;
0x00085F        F3D00000                 push rLink;
0x000860        D50A0016                 M[r8 + 22] = Null;
0x000861        FD000000 01408018        r2 = Null + 32792;
0x000863        8153001F                 r3 = r1 AND 0x1f;
0x000864        F3500000                 push r3;
0x000865        E1F00148                 call $message.send_short;
0x000866        FD000000 01408014        r2 = Null + 32788;
0x000868        F3540000                 pop r3;
0x000869        E1F00144                 call $message.send_short;
0x00086A        DDF003D0                 jump $pop_rLink_and_rts;

 <$sco_timing.PortDisConnected>
0x00086B        FD0000FF 09A03A08        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x00086D        DC0D0000                 if EQ rts;
0x00086E        D12A0012                 r0 = M[r8 + 18];
0x00086F        8122001F                 r0 = r0 AND 0x1f;
0x000870        2003002F                 Null = r1 - r0;
0x000871        DC0D0001                 if NE rts;

 <$sco_timing.ScoDisconnect>
0x000872        F3D00000                 push rLink;
0x000873        013009B4                 r1 = Null + 2484;
0x000874        D1030000                 Null = M[r1 + 0];
0x000875        E1100180                 if NE call $wall_clock.disable;
0x000876        013009B4                 r1 = Null + 2484;
0x000877        D5030000                 M[r1 + 0] = Null;
0x000878        D5030005                 M[r1 + 5] = Null;
0x000879        FD0000FF 09A03A08        r8 = Null + M[$M.sco_timing.sco_data_ptr];
0x00087B        D50A0016                 M[r8 + 22] = Null;
0x00087C        DDF003BE                 jump $pop_rLink_and_rts;

 <$sbcenc.quantize_samples>
0x00087D        D14B0006                 r2 = M[r9 + 6];
0x00087E        E444003F                 r2 = r2 - 1;
0x00087F        D12B0014                 r0 = M[r9 + 20];
0x000880        5010002F                 I1 = Null + r0;
0x000881        D12B001B                 r0 = M[r9 + 27];
0x000882        5020002F                 I2 = Null + r0;
0x000883        D12B0018                 r0 = M[r9 + 24];
0x000884        5030002F                 I3 = Null + r0;
0x000885        D1AB001F                 r8 = M[r9 + 31];
0x000886        D19B0021                 r7 = M[r9 + 33];
0x000887        982A009F                 r0 = r8 * r7 (int);
0x000888        5080002F                 M0 = Null + r0;
0x000889        70A0002F                 M2 = Null - r0;
0x00088A        50B2002F                 M3 = r0 + r0;
0x00088B        D13B001D                 r1 = M[r9 + 29];
0x00088C        9832003F                 r1 = r0 * r1 (int);
0x00088D        75930001                 M1 = 1 - r1;

 <$M.sbcenc.quantize_samples.chan_loop>
0x00088E        D19B0021                 r7 = M[r9 + 33];

 <$M.sbcenc.quantize_samples.subband_loop>
0x00088F        D1CB001D                 r10 = M[r9 + 29];
0x000890        03002900                 Null = Null + Null, r0 = M[I2,1];
0x000891        03026D00                 Null = Null + r0, r4 = M[I3,1];
0x000892        DD00000C                 if EQ jump $M.sbcenc.quantize_samples.zero_sample;
0x000893        ED760080                 r5 = 0x80 ASHIFT r4;
0x000894        65660008                 r4 = 8 - r4;
0x000895        D084002F                 r6 = M[r2 + r0];
0x000896        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000897        03370000                 r1 = r1 + r5;
0x000898        E5F00004                 do $M.sbcenc.quantize_samples.block_loop;
0x000899        CC13008F                 rMAC = r1 * r6 (SS);
0x00089A        92E63600                 rMAC = rMAC ASHIFT r4, r1 = M[I1,M2];
0x00089B        02379700                 r1 = r1 + r5, M[I1,M3] = rMAC;

 <$M.sbcenc.quantize_samples.block_loop>
0x00089C        5F1A0000                 I1 = I1 + M2;
0x00089D        DDF00003                 jump $M.sbcenc.quantize_samples.block_loop_done;

 <$M.sbcenc.quantize_samples.zero_sample>
0x00089E        E5F00002                 do $M.sbcenc.quantize_samples.block_loop_done;
0x00089F        0200A400                 Null = Null + Null, M[I1,M0] = r0;

 <$M.sbcenc.quantize_samples.block_loop_done>
0x0008A0        02002500                 Null = Null + Null, r0 = M[I1,M1];
0x0008A1        E499003F                 r7 = r7 - 1;
0x0008A2        DD10FFED                 if NE jump $M.sbcenc.quantize_samples.subband_loop;
0x0008A3        E4AA003F                 r8 = r8 - 1;
0x0008A4        DD10FFEA                 if NE jump $M.sbcenc.quantize_samples.chan_loop;
0x0008A5        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x0008A6        8132001F                 r1 = r0 AND 0x1f;
0x0008A7        2133000C                 r1 = r1 - 12;
0x0008A8        F1000030                 pushm <r2, r3>;
0x0008A9        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x0008AB        DD00001A                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x0008AC        01400066                 r2 = Null + 102;
0x0008AD        65030007                 Null = 7 - r1;
0x0008AE        00330044                 if NEG r1 = r1 + r2;
0x0008AF        D153FE73                 r3 = M[r1 + -397];
0x0008B0        FD000030 81420000        r2 = r0 AND 0x300000;
0x0008B2        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x0008B3        8155FFFB                 r3 = r3 AND 0xfffb;
0x0008B4        8D44006B                 r2 = r2 LSHIFT -21;
0x0008B5        8D440002                 r2 = r2 LSHIFT 2;
0x0008B6        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x0008B7        FD000003 81428000        r2 = r0 AND 0x38000;
0x0008B9        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x0008BA        8155FFFC                 r3 = r3 AND 0xfffc;
0x0008BB        8D440070                 r2 = r2 LSHIFT -16;
0x0008BC        8D440000                 r2 = r2 LSHIFT 0;
0x0008BD        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x0008BE        81426000                 r2 = r0 AND 0x6000;
0x0008BF        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x0008C0        8155FFF7                 r3 = r3 AND 0xfff7;
0x0008C1        8D440072                 r2 = r2 LSHIFT -14;
0x0008C2        8D440003                 r2 = r2 LSHIFT 3;
0x0008C3        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x0008C4        D553FE73                 M[r1 + -397] = r3;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x0008C5        8132001F                 r1 = r0 AND 0x1f;
0x0008C6        2133000C                 r1 = r1 - 12;
0x0008C7        01400009                 r2 = Null + 9;
0x0008C8        65030007                 Null = 7 - r1;
0x0008C9        00330044                 if NEG r1 = r1 + r2;
0x0008CA        F1040030                 popm <r2, r3>;
0x0008CB        0123FE23                 r0 = r1 + -477;
0x0008CC        E430002F                 r1 = Null + 1;
0x0008CD        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x0008CE        8132001F                 r1 = r0 AND 0x1f;
0x0008CF        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x0008D1        DD00001D                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x0008D2        F1000030                 pushm <r2, r3>;
0x0008D3        01400062                 r2 = Null + 98;
0x0008D4        65030007                 Null = 7 - r1;
0x0008D5        00330044                 if NEG r1 = r1 + r2;
0x0008D6        D153FE7B                 r3 = M[r1 + -389];
0x0008D7        FD000030 81420000        r2 = r0 AND 0x300000;
0x0008D9        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x0008DA        8155FFFB                 r3 = r3 AND 0xfffb;
0x0008DB        8D44006B                 r2 = r2 LSHIFT -21;
0x0008DC        8D440002                 r2 = r2 LSHIFT 2;
0x0008DD        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x0008DE        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x0008E0        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x0008E1        8155FFF7                 r3 = r3 AND 0xfff7;
0x0008E2        8D44006D                 r2 = r2 LSHIFT -19;
0x0008E3        8D440003                 r2 = r2 LSHIFT 3;
0x0008E4        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x0008E5        FD000003 81428000        r2 = r0 AND 0x38000;
0x0008E7        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x0008E8        8155FFFC                 r3 = r3 AND 0xfffc;
0x0008E9        8D440070                 r2 = r2 LSHIFT -16;
0x0008EA        8D440000                 r2 = r2 LSHIFT 0;
0x0008EB        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x0008EC        D553FE7B                 M[r1 + -389] = r3;
0x0008ED        F1040030                 popm <r2, r3>;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x0008EE        8122001F                 r0 = r0 AND 0x1f;
0x0008EF        01300005                 r1 = Null + 5;
0x0008F0        65020007                 Null = 7 - r0;
0x0008F1        00220034                 if NEG r0 = r0 + r1;
0x0008F2        0122FE2B                 r0 = r0 + -469;
0x0008F3        E430002F                 r1 = Null + 1;
0x0008F4        DC0D000F                 rts;

 <$timer.schedule_event_at>
0x0008F5        F3D00000                 push rLink;
0x0008F6        E1F0031B                 call $block_interrupts;
0x0008F7        01C00032                 r10 = Null + 50;
0x0008F8        01600A06                 r4 = Null + 2566;
0x0008F9        09200A06                 r0 = Null + M[$timer.last_addr];
0x0008FA        E5F00008                 do $M.timer.schedule_event_at.loop;
0x0008FB        E402002F                 Null = r0 + 1;
0x0008FC        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x0008FD        D1720001                 r5 = M[r0 + 1];
0x0008FE        2004007F                 Null = r2 - r5;
0x0008FF        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x000900        0062000F                 r4 = r0 + Null;
0x000901        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x000902        E1F005C5                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x000903        D5360000                 M[r4 + 0] = r1;
0x000904        D5230000                 M[r1 + 0] = r0;
0x000905        D5430001                 M[r1 + 1] = r2;
0x000906        D5530002                 M[r1 + 2] = r3;
0x000907        FD0000FF 09503A05        r3 = Null + M[$timer.id];
0x000909        D5530003                 M[r1 + 3] = r3;
0x00090A        E425002F                 r0 = r3 + 1;
0x00090B        20200050                 if EQ r0 = Null - r3;
0x00090C        FD0000FF 19203A05        M[$timer.id] = r0 + Null;
0x00090E        0900FE1F                 Null = Null + M[0xfffe1f];
0x00090F        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x000910        2904FE21                 Null = r2 - M[0xfffe21];
0x000911        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x000912        1940FE21                 M[0xfffe21] = r2 + Null;
0x000913        E420002F                 r0 = Null + 1;
0x000914        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x000915        E1F002EC                 call $interrupt.unblock;
0x000916        DDF00324                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x000917        8132001F                 r1 = r0 AND 0x1f;
0x000918        2133000C                 r1 = r1 - 12;
0x000919        D1430969                 r2 = M[r1 + 2409];
0x00091A        00200000                 if EQ r0 = Null + Null;
0x00091B        DC0D0000                 if EQ rts;
0x00091C        F3500000                 push r3;
0x00091D        D054000F                 r3 = M[r2 + Null];
0x00091E        FD0000FF D14333E4        r2 = M[r1 + -52252];
0x000920        D3400000                 r2 = M[r2 + Null];
0x000921        23540000                 r3 = r3 - r2;
0x000922        D1430951                 r2 = M[r1 + 2385];
0x000923        E434003F                 r1 = r2 - 1;
0x000924        8035003F                 r1 = r3 AND r1;
0x000925        00340000                 if EQ r1 = r2 + Null;
0x000926        E433003F                 r1 = r1 - 1;
0x000927        F3540000                 pop r3;
0x000928        FD000003 81228000        r0 = r0 AND 0x38000;
0x00092A        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x00092B        FD000001 21028000        Null = r0 - 98304;
0x00092D        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x00092E        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x00092F        FD000002 21028000        Null = r0 - 163840;
0x000931        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x000932        9123007E                 r0 = r1 ASHIFT -2;
0x000933        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x000934        E423003F                 r0 = r1 - 1;
0x000935        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000936        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x000937        0023000F                 r0 = r1 + Null;
0x000938        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x000939        9123007F                 r0 = r1 ASHIFT -1;
0x00093A        DC0D000F                 rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x00093B        8132001F                 r1 = r0 AND 0x1f;
0x00093C        D143095D                 r2 = M[r1 + 2397];
0x00093D        00200000                 if EQ r0 = Null + Null;
0x00093E        DC0D0000                 if EQ rts;
0x00093F        F3200000                 push r0;
0x000940        D3400000                 r2 = M[r2 + Null];
0x000941        FD0000FF D12333D8        r0 = M[r1 + -52264];
0x000943        D3200000                 r0 = M[r0 + Null];
0x000944        2024002F                 r0 = r2 - r0;
0x000945        D1430945                 r2 = M[r1 + 2373];
0x000946        E434003F                 r1 = r2 - 1;
0x000947        8032003F                 r1 = r0 AND r1;

 <$cbuffer.calc_amount_data.convert_size>
0x000948        F3240000                 pop r0;

 <$M.cbuffer.calc_amount_data.its_a_port.convert>
0x000949        FD000003 81228000        r0 = r0 AND 0x38000;
0x00094B        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x00094C        FD000001 21028000        Null = r0 - 98304;
0x00094E        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x00094F        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x000950        FD000002 21028000        Null = r0 - 163840;
0x000952        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x000953        9123007E                 r0 = r1 ASHIFT -2;
0x000954        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x000955        E423003F                 r0 = r1 - 1;
0x000956        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000957        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x000958        0023000F                 r0 = r1 + Null;
0x000959        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x00095A        9123007F                 r0 = r1 ASHIFT -1;
0x00095B        DC0D000F                 rts;
...

 <$pskey.result_message_handler>
0x00097C        FD000000 21028008        Null = r0 - 32776;
0x00097E        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x00097F        D035000F                 r1 = M[r3 + Null];
0x000980        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x000981        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x000982        FD0000FF 19003A04        M[$pskey.request_in_progress] = Null + Null;
0x000984        01700A05                 r5 = Null + 2565;
0x000985        09200A05                 r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x000986        D1620001                 r4 = M[r0 + 1];
0x000987        2003006F                 Null = r1 - r4;
0x000988        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x000989        0072000F                 r5 = r0 + Null;
0x00098A        D1220000                 r0 = M[r0 + 0];
0x00098B        E402002F                 Null = r0 + 1;
0x00098C        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x00098D        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x00098E        F3D00000                 push rLink;
0x00098F        D1620000                 r4 = M[r0 + 0];
0x000990        D5670000                 M[r5 + 0] = r4;
0x000991        D1D20002                 rLink = M[r0 + 2];
0x000992        E00D000F                 call rLink;
0x000993        09300A05                 r1 = Null + M[$pskey.last_addr];
0x000994        E403002F                 Null = r1 + 1;
0x000995        E1100002                 if NE call $pskey.private.send_request;
0x000996        DDF002A4                 jump $pop_rLink_and_rts;

 <$pskey.private.send_request>
0x000997        FD0000FF 09003A04        Null = Null + M[$pskey.request_in_progress];
0x000999        DC0D0001                 if NE rts;
0x00099A        F3D00000                 push rLink;
0x00099B        094009DB                 r2 = Null + M[0x9db];
0x00099C        E1F0010A                 call $timer.cancel_event;
0x00099D        E1F0027B                 call $message.send_queue_space;
0x00099E        21020005                 Null = r0 - 5;
0x00099F        DD400009                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x0009A0        09300A05                 r1 = Null + M[$pskey.last_addr];
0x0009A1        85408006                 r2 = Null OR 0x8006;
0x0009A2        D1530001                 r3 = M[r1 + 1];
0x0009A3        E1F0000A                 call $message.send_short;
0x0009A4        E420002F                 r0 = Null + 1;
0x0009A5        FD0000FF 19203A04        M[$pskey.request_in_progress] = r0 + Null;
0x0009A7        DDF00293                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x0009A8        013009D8                 r1 = Null + 2520;
0x0009A9        01402710                 r2 = Null + 10000;
0x0009AA        01500997                 r3 = Null + 2455;
0x0009AB        E1F0028B                 call $timer.schedule_event_in;
0x0009AC        DDF0028E                 jump $pop_rLink_and_rts;

 <$message.send_short>
0x0009AD        F3D00000                 push rLink;
0x0009AE        E1F00263                 call $block_interrupts;
0x0009AF        09300A03                 r1 = Null + M[$message.queue_write_ptr];
0x0009B0        01230005                 r0 = r1 + 5;
0x0009B1        2102006E                 Null = r0 - 110;
0x0009B2        00200000                 if EQ r0 = Null + Null;
0x0009B3        FD0000FF 29023A02        Null = r0 - M[$message.queue_read_ptr];
0x0009B5        DD00000D                 if EQ jump $M.message.send_short.all_done;
0x0009B6        19200A03                 M[$message.queue_write_ptr] = r0 + Null;
0x0009B7        FD0000FF D543370E        M[r1 + -51442] = r2;
0x0009B9        FD0000FF D553370F        M[r1 + -51441] = r3;
0x0009BB        FD0000FF D5633710        M[r1 + -51440] = r4;
0x0009BD        FD0000FF D5733711        M[r1 + -51439] = r5;
0x0009BF        FD0000FF D5833712        M[r1 + -51438] = r6;
0x0009C1        E1F0FDE4                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x0009C2        E1F0023F                 call $interrupt.unblock;
0x0009C3        DDF00277                 jump $pop_rLink_and_rts;

 <$sbcdec.get1byte>
0x0009C4        01200008                 r0 = Null + 8;
0x0009C5        DDF00006                 jump $sbcdec.getbits;

 <$sbcdec.get4bits>
0x0009C6        01200004                 r0 = Null + 4;
0x0009C7        DDF00004                 jump $sbcdec.getbits;

 <$sbcdec.get2bits>
0x0009C8        01200002                 r0 = Null + 2;
0x0009C9        DDF00002                 jump $sbcdec.getbits;

 <$sbcdec.get1bit>
0x0009CA        E420002F                 r0 = Null + 1;

 <$sbcdec.getbits>
0x0009CB        D15B0031                 r3 = M[r9 + 49];
0x0009CC        D3520000                 r3 = M[r3 + r0];
0x0009CD        D14B003B                 r2 = M[r9 + 59];
0x0009CE        2042004F                 r2 = r0 - r2;
0x0009CF        DDC00007                 if GT jump $M.sbcdec.getbits.anotherword;
0x0009D0        03003000                 Null = Null + Null, r1 = M[I0,0];
0x0009D1        8F340000                 r1 = r1 LSHIFT r2;
0x0009D2        83350000                 r1 = r1 AND r3;
0x0009D3        2040004F                 r2 = Null - r2;
0x0009D4        D54B003B                 M[r9 + 59] = r2;
0x0009D5        DC0D000F                 rts;

 <$M.sbcdec.getbits.anotherword>
0x0009D6        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0009D7        8F340000                 r1 = r1 LSHIFT r2;
0x0009D8        83355000                 r1 = r1 AND r3, r3 = M[I0,0];
0x0009D9        21440010                 r2 = r2 - 16;
0x0009DA        8F540000                 r3 = r3 LSHIFT r2;
0x0009DB        03350000                 r1 = r1 + r3;
0x0009DC        2040004F                 r2 = Null - r2;
0x0009DD        D54B003B                 M[r9 + 59] = r2;
0x0009DE        DC0D000F                 rts;

 <$frame_sync.sco_encode>
0x0009DF        F3D00000                 push rLink;
0x0009E0        FD0000FF 09303A08        r1 = Null + M[$M.sco_timing.sco_data_ptr];
0x0009E2        D193001A                 r7 = M[r1 + 26];
0x0009E3        D1A30014                 r8 = M[r1 + 20];
0x0009E4        D123001D                 r0 = M[r1 + 29];
0x0009E5        E0020001                 if NE call r0;

 <$M.sco_encode.jp_repeat>
0x0009E6        FD0000FF 09903A08        r7 = Null + M[$M.sco_timing.sco_data_ptr];
0x0009E8        D129001A                 r0 = M[r7 + 26];
0x0009E9        E1F00210                 call $cbuffer.calc_amount_data;
0x0009EA        D139001B                 r1 = M[r7 + 27];
0x0009EB        2002003F                 Null = r0 - r1;
0x0009EC        DD40024E                 if NEG jump $pop_rLink_and_rts;
0x0009ED        D1290014                 r0 = M[r7 + 20];
0x0009EE        E1F001FB                 call $cbuffer.calc_amount_space;
0x0009EF        D139001C                 r1 = M[r7 + 28];
0x0009F0        2002003F                 Null = r0 - r1;
0x0009F1        DD400249                 if NEG jump $pop_rLink_and_rts;
0x0009F2        D129001E                 r0 = M[r7 + 30];
0x0009F3        E002000F                 call r0;
0x0009F4        DDF0FFF2                 jump $M.sco_encode.jp_repeat;

 <$wall_clock.disable>
0x0009F5        F3D00000                 push rLink;
0x0009F6        E1F0021B                 call $block_interrupts;
0x0009F7        01C00007                 r10 = Null + 7;
0x0009F8        FD0000FF 01203A06        r0 = Null + -50682;
0x0009FA        FD0000FF 09403A06        r2 = Null + M[$wall_clock.last_addr];
0x0009FC        E5F00007                 do $M.wall_clock.disable.loop;
0x0009FD        E404002F                 Null = r2 + 1;
0x0009FE        DD000005                 if EQ jump $M.wall_clock.disable.loop;
0x0009FF        2004003F                 Null = r2 - r1;
0x000A00        DD000004                 if EQ jump $M.wall_clock.disable.delete_this_entry;
0x000A01        0024000F                 r0 = r2 + Null;
0x000A02        D1440000                 r2 = M[r2 + 0];

 <$M.wall_clock.disable.loop>
0x000A03        DDF00003                 jump $M.wall_clock.disable.entry_removed;

 <$M.wall_clock.disable.delete_this_entry>
0x000A04        D1430000                 r2 = M[r1 + 0];
0x000A05        D5420000                 M[r0 + 0] = r2;

 <$M.wall_clock.disable.entry_removed>
0x000A06        D143000A                 r2 = M[r1 + 10];
0x000A07        E1F0009F                 call $timer.cancel_event;
0x000A08        E1F001F9                 call $interrupt.unblock;
0x000A09        DDF00231                 jump $pop_rLink_and_rts;

 <$frame_sync.update_streams_ind>
0x000A0A        F3D00000                 push rLink;
0x000A0B        51900001                 M1 = Null + 1;
0x000A0C        E1F00205                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x000A0D        D0B9000F                 r9 = M[r7 + Null];
0x000A0E        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x000A0F        D14B0006                 r2 = M[r9 + 6];
0x000A10        D12B0000                 r0 = M[r9 + 0];
0x000A11        D1320000                 r1 = M[r0 + 0];
0x000A12        D16B0003                 r4 = M[r9 + 3];
0x000A13        50D0003F                 L1 = Null + r1;
0x000A14        E004000F                 call r2;
0x000A15        5080006F                 M0 = Null + r4;
0x000A16        D042000F                 r2 = M[r0 + Null];
0x000A17        5010004F                 I1 = Null + r2;
0x000A18        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000A19        4440001F                 r2 = Null + I1;
0x000A1A        1824000F                 M[r0] = r2 + Null;
0x000A1B        E499002F                 r7 = r7 + 1;
0x000A1C        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x000A1D        E1F001E4                 call $interrupt.unblock;
0x000A1E        50D0000F                 L1 = Null + Null;
0x000A1F        DDF0021B                 jump $pop_rLink_and_rts;

 <$timer.service_routine>
0x000A20        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x000A21        09300A06                 r1 = Null + M[$timer.last_addr];
0x000A22        E403002F                 Null = r1 + 1;
0x000A23        DD000011                 if EQ jump $M.timer.service_routine.no_more_timers;
0x000A24        D1230001                 r0 = M[r1 + 1];
0x000A25        2942FE71                 r2 = r0 - M[0xfffe71];
0x000A26        21040000                 Null = r2 - 0;
0x000A27        DDC00008                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x000A28        D1D30002                 rLink = M[r1 + 2];
0x000A29        D1230003                 r0 = M[r1 + 3];
0x000A2A        D5030003                 M[r1 + 3] = Null;
0x000A2B        D1430000                 r2 = M[r1 + 0];
0x000A2C        19400A06                 M[$timer.last_addr] = r2 + Null;
0x000A2D        E00D000F                 call rLink;
0x000A2E        DDF0FFF3                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x000A2F        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000A30        1920FE21                 M[0xfffe21] = r0 + Null;
0x000A31        E450002F                 r3 = Null + 1;
0x000A32        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x000A33        DDF00207                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x000A34        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000A35        DDF00205                 jump $pop_rLink_and_rts;

 <$frame_sync.analyze_stream_ind>
0x000A36        D5CB0008                 M[r9 + 8] = r10;
0x000A37        D14B000A                 r2 = M[r9 + 10];
0x000A38        200400CF                 Null = r2 - r10;
0x000A39        004C0005                 if POS r2 = r10 + Null;
0x000A3A        D15B000B                 r3 = M[r9 + 11];
0x000A3B        200500CF                 Null = r3 - r10;
0x000A3C        005C0004                 if NEG r3 = r10 + Null;
0x000A3D        D1CB0007                 r10 = M[r9 + 7];
0x000A3E        67C90000                 r10 = r10 - M1;
0x000A3F        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x000A40        D54B000A                 M[r9 + 10] = r2;
0x000A41        D55B000B                 M[r9 + 11] = r3;
0x000A42        D5CB0007                 M[r9 + 7] = r10;
0x000A43        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x000A44        D50B000B                 M[r9 + 11] = Null;
0x000A45        D56B000A                 M[r9 + 10] = r4;
0x000A46        D1CB0004                 r10 = M[r9 + 4];
0x000A47        23540000                 r3 = r3 - r2;
0x000A48        035C0000                 r3 = r3 + r10;
0x000A49        00500004                 if NEG r3 = Null + Null;
0x000A4A        D55B0009                 M[r9 + 9] = r3;
0x000A4B        01C00078                 r10 = Null + 120;
0x000A4C        D5CB0007                 M[r9 + 7] = r10;
0x000A4D        DC0D000F                 rts;

 <$sbc.calc_scale_factors>
0x000A4E        D16B0018                 r4 = M[r9 + 24];
0x000A4F        5010006F                 I1 = Null + r4;
0x000A50        D16B0014                 r4 = M[r9 + 20];
0x000A51        5000006F                 I0 = Null + r4;
0x000A52        D16B001F                 r4 = M[r9 + 31];
0x000A53        D17B0021                 r5 = M[r9 + 33];
0x000A54        D18B001D                 r6 = M[r9 + 29];
0x000A55        9B670000                 r4 = r4 * r5 (int);
0x000A56        5080006F                 M0 = Null + r4;
0x000A57        9826008F                 r0 = r4 * r6 (int);
0x000A58        75920001                 M1 = 1 - r0;
0x000A59        01400010                 r2 = Null + 16;
0x000A5A        E488003F                 r6 = r6 - 1;
0x000A5B        00C8000F                 r10 = r6 + Null;
0x000A5C        51A00001                 M2 = Null + 1;

 <$M.sbc.calc_scale_factors.chan_subband_loop>
0x000A5D        0034200F                 r1 = r2 + Null, r0 = M[I0,M0];
0x000A5E        E5F00002                 do $M.sbc.calc_scale_factors.block_loop;
0x000A5F        DA322000                 r1 = BLKSIGNDET r0, r0 = M[I0,M0];

 <$M.sbc.calc_scale_factors.block_loop>
0x000A60        DB320000                 r1 = BLKSIGNDET r0;
0x000A61        2034213F                 r1 = r2 - r1, r0 = M[I0,M1];
0x000A62        00C8B60F                 r10 = r6 + Null, M[I1,M2] = r1;
0x000A63        E466003F                 r4 = r4 - 1;
0x000A64        DD10FFF9                 if NE jump $M.sbc.calc_scale_factors.chan_subband_loop;
0x000A65        DC0D000F                 rts;

 <$reset_iir_resampler>
0x000A66        0200C800                 Null = Null + Null, M[I2,M0] = r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A67        02005C00                 Null = Null + Null, r3 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A68        02002C00                 Null = Null + Null, r0 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A69        0200C800                 Null = Null + Null, M[I2,M0] = r2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A6A        0200E800                 Null = Null + Null, M[I2,M0] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A6B        5000006F                 I0 = Null + r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A6C        00C5000F                 r10 = r3 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A6D        03650000                 r4 = r4 + r3;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A6E        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A6F        03620000                 r4 = r4 + r0;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A70        E5F00002                 do MB6glZIH5Sapay5ynsJj0TsF8LY53+/z4ry0ORqo0Lc=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A71        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <MB6glZIH5Sapay5ynsJj0TsF8LY53+/z4ry0ORqo0Lc=>
0x000A72        59330004                 I3 = I3 + 4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A73        00C2000F                 r10 = r0 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A74        DC0D0000                 if EQ rts;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A75        59330002                 I3 = I3 + 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A76        F2D03C00                 push rLink, r1 = M[I3,M0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A77        21330002                 r1 = r1 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A78        E003000F                 call r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A79        5B330000                 I3 = I3 + r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A7A        E5F00002                 do 03vUYV5czIhPHTLKF96SQC9J3H+LEgbvP+nQF+jFgCY=;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000A7B        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <03vUYV5czIhPHTLKF96SQC9J3H+LEgbvP+nQF+jFgCY=>
0x000A7C        DDF001BE                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_streams_ind>
0x000A7D        F3D00000                 push rLink;
0x000A7E        E1F00193                 call $block_interrupts;
0x000A7F        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x000A80        D0B9000F                 r9 = M[r7 + Null];
0x000A81        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x000A82        D15B0005                 r3 = M[r9 + 5];
0x000A83        D12B0000                 r0 = M[r9 + 0];
0x000A84        D1320000                 r1 = M[r0 + 0];
0x000A85        D1820001                 r6 = M[r0 + 1];
0x000A86        D1A20002                 r8 = M[r0 + 2];
0x000A87        50D0003F                 L1 = Null + r1;
0x000A88        D16B0003                 r4 = M[r9 + 3];
0x000A89        D56B0002                 M[r9 + 2] = r4;
0x000A8A        E005000F                 call r3;
0x000A8B        D58B0001                 M[r9 + 1] = r6;
0x000A8C        E499002F                 r7 = r7 + 1;
0x000A8D        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x000A8E        E1F00173                 call $interrupt.unblock;
0x000A8F        50D0000F                 L1 = Null + Null;
0x000A90        DDF001AA                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x000A91        F3D00000                 push rLink;
0x000A92        D1820002                 r6 = M[r0 + 2];
0x000A93        D1A20001                 r8 = M[r0 + 1];
0x000A94        20C800AF                 r10 = r6 - r8;
0x000A95        00CC0034                 if NEG r10 = r10 + r1;
0x000A96        E1F0FFA0                 call $frame_sync.analyze_stream_ind;
0x000A97        D15B0008                 r3 = M[r9 + 8];
0x000A98        D14B0009                 r2 = M[r9 + 9];
0x000A99        23540000                 r3 = r3 - r2;
0x000A9A        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x000A9B        D14B0004                 r2 = M[r9 + 4];
0x000A9C        9144007F                 r2 = r2 ASHIFT -1;
0x000A9D        03540000                 r3 = r3 + r2;
0x000A9E        2006005F                 Null = r4 - r3;
0x000A9F        00560004                 if NEG r3 = r4 + Null;
0x000AA0        D14B000C                 r2 = M[r9 + 12];
0x000AA1        23450000                 r2 = r2 - r3;
0x000AA2        D54B000C                 M[r9 + 12] = r2;
0x000AA3        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x000AA4        01220002                 r0 = r0 + 2;
0x000AA5        DDF00195                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x000AA6        F3D00000                 push rLink;
0x000AA7        E1F0016A                 call $block_interrupts;
0x000AA8        01C00032                 r10 = Null + 50;
0x000AA9        01600A06                 r4 = Null + 2566;
0x000AAA        09200A06                 r0 = Null + M[$timer.last_addr];
0x000AAB        E5F00008                 do $M.timer.cancel_event.loop;
0x000AAC        E402002F                 Null = r0 + 1;
0x000AAD        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x000AAE        D1720003                 r5 = M[r0 + 3];
0x000AAF        2004007F                 Null = r2 - r5;
0x000AB0        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x000AB1        0062000F                 r4 = r0 + Null;
0x000AB2        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x000AB3        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x000AB4        D1320000                 r1 = M[r0 + 0];
0x000AB5        D5360000                 M[r4 + 0] = r1;
0x000AB6        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x000AB7        E1F0014A                 call $interrupt.unblock;
0x000AB8        DDF00182                 jump $pop_rLink_and_rts;

 <$sbcenc.putbits_external>
0x000AB9        D1B70004                 r9 = M[r5 + 4];

 <$sbcenc.putbits>
0x000ABA        D14B0010                 r2 = M[r9 + 16];
0x000ABB        23420000                 r2 = r2 - r0;
0x000ABC        DDD00007                 if LE jump $M.sbcenc.putbits.anotherword;
0x000ABD        8C53004F                 r3 = r1 LSHIFT r2;
0x000ABE        D54B0010                 M[r9 + 16] = r2;
0x000ABF        D14B000F                 r2 = M[r9 + 15];
0x000AC0        03540000                 r3 = r3 + r2;
0x000AC1        D55B000F                 M[r9 + 15] = r3;
0x000AC2        DC0D000F                 rts;

 <$M.sbcenc.putbits.anotherword>
0x000AC3        F3200000                 push r0;
0x000AC4        8C53004F                 r3 = r1 LSHIFT r2;
0x000AC5        D12B000F                 r0 = M[r9 + 15];
0x000AC6        03520000                 r3 = r3 + r0;
0x000AC7        8155FFFF                 r3 = r3 AND 0xffff;
0x000AC8        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x000AC9        01440010                 r2 = r2 + 16;
0x000ACA        8C53004F                 r3 = r1 LSHIFT r2;
0x000ACB        D55B000F                 M[r9 + 15] = r3;
0x000ACC        D54B0010                 M[r9 + 16] = r2;
0x000ACD        F3240000                 pop r0;
0x000ACE        DC0D000F                 rts;

 <$wbsenc.wbs_pre_proc_func>
0x000ACF        F3D00000                 push rLink;
0x000AD0        D16B0013                 r4 = M[r9 + 19];
0x000AD1        81460002                 r2 = r4 AND 0x2;
0x000AD2        8D540002                 r3 = r2 LSHIFT 2;
0x000AD3        8D440001                 r2 = r2 LSHIFT 1;
0x000AD4        87540000                 r3 = r3 OR r2;
0x000AD5        81460001                 r2 = r4 AND 0x1;
0x000AD6        8D340001                 r1 = r2 LSHIFT 1;
0x000AD7        87340000                 r1 = r1 OR r2;
0x000AD8        8443005F                 r2 = r1 OR r3;
0x000AD9        8D440004                 r2 = r2 LSHIFT 4;
0x000ADA        01300108                 r1 = Null + 264;
0x000ADB        87340000                 r1 = r1 OR r2;
0x000ADC        01200010                 r0 = Null + 16;
0x000ADD        E1F0FFDD                 call $sbcenc.putbits;
0x000ADE        E466002F                 r4 = r4 + 1;
0x000ADF        81660003                 r4 = r4 AND 0x3;
0x000AE0        D56B0013                 M[r9 + 19] = r4;
0x000AE1        DDF00159                 jump $pop_rLink_and_rts;

 <$wbsenc.set_up_frame_encode>
0x000AE2        E420002F                 r0 = Null + 1;
0x000AE3        FD0000FF 19203A0B        M[$wbs_frame_encode.can_idle] = r0 + Null;
0x000AE5        199001C5                 M[$wbs_frame_encode.cbuf_in_ptr] = r7 + Null;
0x000AE6        19A001C6                 M[$wbs_frame_encode.cbuf_out_ptr] = r8 + Null;
0x000AE7        D50B001C                 M[r9 + 28] = Null;
0x000AE8        0130000F                 r1 = Null + 15;
0x000AE9        D53B001D                 M[r9 + 29] = r1;
0x000AEA        D50B001E                 M[r9 + 30] = Null;
0x000AEB        E430002F                 r1 = Null + 1;
0x000AEC        D53B001F                 M[r9 + 31] = r1;
0x000AED        D50B0020                 M[r9 + 32] = Null;
0x000AEE        01300008                 r1 = Null + 8;
0x000AEF        D53B0021                 M[r9 + 33] = r1;
0x000AF0        0130001A                 r1 = Null + 26;
0x000AF1        D53B0022                 M[r9 + 34] = r1;
0x000AF2        E430002F                 r1 = Null + 1;
0x000AF3        D53B0025                 M[r9 + 37] = r1;
0x000AF4        DC0D000F                 rts;

 <$wall_clock.enable>
0x000AF5        F3D00000                 push rLink;
0x000AF6        E1F0011B                 call $block_interrupts;
0x000AF7        FD0000FF 09203A06        r0 = Null + M[$wall_clock.last_addr];
0x000AF9        D5230000                 M[r1 + 0] = r0;
0x000AFA        FD0000FF 19303A06        M[$wall_clock.last_addr] = r1 + Null;
0x000AFC        01330007                 r1 = r1 + 7;
0x000AFD        01400000                 r2 = Null + 0;
0x000AFE        01500B52                 r3 = Null + 2898;
0x000AFF        E1F00137                 call $timer.schedule_event_in;
0x000B00        E1F00101                 call $interrupt.unblock;
0x000B01        DDF00139                 jump $pop_rLink_and_rts;

 <$frame_sync.task_scheduler_isr>
0x000B02        D19A0000                 r7 = M[r8 + 0];
0x000B03        D1CA0002                 r10 = M[r8 + 2];
0x000B04        510A000A                 I0 = r8 + 10;
0x000B05        FD000040 01300000        r1 = Null + 4194304;
0x000B07        D14A0008                 r2 = M[r8 + 8];
0x000B08        E5F00005                 do $M.frame_sync.task_scheduler_isr.lp_sched;
0x000B09        03002200                 Null = Null + Null, r0 = M[I0,2];
0x000B0A        2002009F                 Null = r0 - r7;
0x000B0B        84440030                 if EQ r2 = r2 OR r1;
0x000B0C        8D33007F                 r1 = r1 LSHIFT -1;

 <$M.frame_sync.task_scheduler_isr.lp_sched>
0x000B0D        D54A0008                 M[r8 + 8] = r2;
0x000B0E        E429002F                 r0 = r7 + 1;
0x000B0F        D13A0001                 r1 = M[r8 + 1];
0x000B10        2002003F                 Null = r0 - r1;
0x000B11        00200005                 if POS r0 = Null + Null;
0x000B12        D52A0000                 M[r8 + 0] = r0;
0x000B13        DC0D000F                 rts;

 <$sbcdec.read_audio_samples>
0x000B14        F3D00000                 push rLink;
0x000B15        D17B0014                 r5 = M[r9 + 20];
0x000B16        5010007F                 I1 = Null + r5;
0x000B17        D16B001D                 r4 = M[r9 + 29];

 <$M.sbcdec.read_audio_samples.blk_loop>
0x000B18        D17B001F                 r5 = M[r9 + 31];
0x000B19        D1CB001B                 r10 = M[r9 + 27];
0x000B1A        502000CF                 I2 = Null + r10;

 <$M.sbcdec.read_audio_samples.ch_loop>
0x000B1B        D1CB0021                 r10 = M[r9 + 33];
0x000B1C        E5F00005                 do $M.sbcdec.read_audio_samples.sb_loop;
0x000B1D        23332900                 r1 = r1 - r1, r0 = M[I2,1];
0x000B1E        0002000F                 Null = r0 + Null;
0x000B1F        E110FEAC                 if NE call $sbcdec.getbits;
0x000B20        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbcdec.read_audio_samples.sb_loop>
0x000B21        E466003F                 r4 = r4 - 1;
0x000B22        DD10FFF6                 if NE jump $M.sbcdec.read_audio_samples.blk_loop;
0x000B23        DDF00117                 jump $pop_rLink_and_rts;

 <$sbcenc.write_audio_samples>
0x000B24        F3D00000                 push rLink;
0x000B25        D16B001D                 r4 = M[r9 + 29];
0x000B26        D17B0014                 r5 = M[r9 + 20];
0x000B27        5040007F                 I4 = Null + r5;
0x000B28        D17B001F                 r5 = M[r9 + 31];
0x000B29        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcenc.write_audio_samples.block_loop>
0x000B2A        98C8007F                 r10 = r6 * r5 (int);
0x000B2B        D12B001B                 r0 = M[r9 + 27];
0x000B2C        5020002F                 I2 = Null + r0;
0x000B2D        E5F00004                 do $M.sbcenc.write_audio_samples.chan_subband_loop;
0x000B2E        03002931                 Null = Null + Null, r0 = M[I2,1], r1 = M[I4,1];
0x000B2F        0002000F                 Null = r0 + Null;
0x000B30        E110FF8A                 if NE call $sbcenc.putbits;

 <$M.sbcenc.write_audio_samples.chan_subband_loop>
0x000B31        E466003F                 r4 = r4 - 1;
0x000B32        DD10FFF8                 if NE jump $M.sbcenc.write_audio_samples.block_loop;
0x000B33        DDF00107                 jump $pop_rLink_and_rts;

 <eU5PNvwblvA9dV4tAE5XanPExVJ9onEMg9OGSf7gy5w=>
0x000B34        F3D00000                 push rLink;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B35        D12A0001                 r0 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B36        E1F0F7F0                 call $cbops_multirate.GetTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B37        D14A0009                 r2 = M[r8 + 9];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B38        9464002F                 r4 = r2 * r0 (frac);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B39        2062006F                 r4 = r0 - r4;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B3A        21660002                 r4 = r4 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B3B        00600004                 if NEG r4 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B3C        21320002                 r1 = r0 - 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B3D        00300004                 if NEG r1 = Null + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B3E        2006003F                 Null = r4 - r1;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B3F        00360004                 if NEG r1 = r4 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B40        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B41        E1F0F7ED                 call $cbops_multirate.SetMinimumTransferAmount;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000B42        DDF000F8                 jump $pop_rLink_and_rts;

 <$flash.copy_to_dm>
0x000B43        F3D00000                 push rLink;
0x000B44        0062000F                 r4 = r0 + Null;
0x000B45        0073000F                 r5 = r1 + Null;

 <$M.flash.copy_to_dm.page_loop>
0x000B46        0026000F                 r0 = r4 + Null;
0x000B47        0037000F                 r1 = r5 + Null;
0x000B48        E1F000C1                 call $flash.map_page_into_dm;
0x000B49        00C3000F                 r10 = r1 + Null;
0x000B4A        5010002F                 I1 = Null + r0;
0x000B4B        E5F00003                 do $M.flash.copy_to_dm.loop;
0x000B4C        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000B4D        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm.loop>
0x000B4E        03630000                 r4 = r4 + r1;
0x000B4F        23730000                 r5 = r5 - r1;
0x000B50        DD10FFF6                 if NE jump $M.flash.copy_to_dm.page_loop;
0x000B51        DDF000E9                 jump $pop_rLink_and_rts;

 <$wall_clock.timer_handler>
0x000B52        F3D00000                 push rLink;
0x000B53        21830007                 r6 = r1 - 7;
0x000B54        03300000                 r1 = r1 + Null;
0x000B55        FD000001 014086A0        r2 = Null + 100000;
0x000B57        01500B52                 r3 = Null + 2898;
0x000B58        E1F000DE                 call $timer.schedule_event_in;
0x000B59        8540801B                 r2 = Null OR 0x801b;
0x000B5A        D1580001                 r3 = M[r6 + 1];
0x000B5B        D1680002                 r4 = M[r6 + 2];
0x000B5C        D1780003                 r5 = M[r6 + 3];
0x000B5D        D1880004                 r6 = M[r6 + 4];
0x000B5E        E1F0FE4F                 call $message.send_short;
0x000B5F        DDF000DB                 jump $pop_rLink_and_rts;

 <$cbuffer.set_write_address.its_a_port>
0x000B60        F3D00000                 push rLink;
0x000B61        8122001F                 r0 = r0 AND 0x1f;
0x000B62        2122000C                 r0 = r0 - 12;
0x000B63        0900FE33                 Null = Null + M[0xfffe33];
0x000B64        FD0000FF 090039FF        Null = Null + M[$cbuffer.auto_mcu_message];
0x000B66        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x000B67        D1320969                 r1 = M[r0 + 2409];
0x000B68        2103F000                 Null = r1 - -4096;
0x000B69        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x000B6A        85408003                 r2 = Null OR 0x8003;
0x000B6B        ED520001                 r3 = 0x1 ASHIFT r0;
0x000B6C        E1F0FE41                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x000B6D        DDF000CD                 jump $pop_rLink_and_rts;

 <$sbcdec.read_scale_factors>
0x000B6E        F3D00000                 push rLink;
0x000B6F        D18B001F                 r6 = M[r9 + 31];
0x000B70        D19B0021                 r7 = M[r9 + 33];
0x000B71        9B890000                 r6 = r6 * r7 (int);
0x000B72        D12B0018                 r0 = M[r9 + 24];
0x000B73        5010002F                 I1 = Null + r0;
0x000B74        51900001                 M1 = Null + 1;
0x000B75        01200004                 r0 = Null + 4;

 <$M.sbcdec.read_scale_factors.loop>
0x000B76        E1F0FE55                 call $sbcdec.getbits;
0x000B77        E1F00038                 call $sbc.crc_calc;
0x000B78        6689B500                 r6 = r6 - M1, M[I1,M1] = r1;
0x000B79        DD10FFFD                 if NE jump $M.sbcdec.read_scale_factors.loop;
0x000B7A        DDF000C0                 jump $pop_rLink_and_rts;

 <$cbuffer.set_read_address.its_a_port>
0x000B7B        F3D00000                 push rLink;
0x000B7C        8152001F                 r3 = r0 AND 0x1f;
0x000B7D        0900FE33                 Null = Null + M[0xfffe33];
0x000B7E        FD0000FF 090039FF        Null = Null + M[$cbuffer.auto_mcu_message];
0x000B80        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x000B81        D135095D                 r1 = M[r3 + 2397];
0x000B82        2103F000                 Null = r1 - -4096;
0x000B83        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x000B84        85408002                 r2 = Null OR 0x8002;
0x000B85        ED550001                 r3 = 0x1 ASHIFT r3;
0x000B86        E1F0FE27                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x000B87        DDF000B3                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_read_insert_ind>
0x000B88        20C000CF                 r10 = Null - r10;
0x000B89        D14B0004                 r2 = M[r9 + 4];
0x000B8A        9144007F                 r2 = r2 ASHIFT -1;
0x000B8B        03C40000                 r10 = r10 + r2;
0x000B8C        D14B000C                 r2 = M[r9 + 12];
0x000B8D        034C0000                 r2 = r2 + r10;
0x000B8E        D54B000C                 M[r9 + 12] = r2;
0x000B8F        5010008F                 I1 = Null + r6;
0x000B90        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x000B91        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x000B92        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x000B93        03004500                 Null = Null + Null, r2 = M[I1,1];
0x000B94        4480001F                 r6 = Null + I1;
0x000B95        D5820001                 M[r0 + 1] = r6;
0x000B96        DC0D000F                 rts;

 <$rm_bluetooth_address_handler>
0x000B97        F3D00000                 push rLink;
0x000B98        8D330078                 r1 = r1 LSHIFT -8;
0x000B99        193009B5                 M[0x9b5] = r1 + Null;
0x000B9A        194009B6                 M[0x9b6] = r2 + Null;
0x000B9B        195009B7                 M[0x9b7] = r3 + Null;
0x000B9C        196009B8                 M[0x9b8] = r4 + Null;
0x000B9D        013009B4                 r1 = Null + 2484;
0x000B9E        D1030000                 Null = M[r1 + 0];
0x000B9F        E100FF56                 if EQ call $wall_clock.enable;
0x000BA0        DDF0009A                 jump $pop_rLink_and_rts;

 <$sco_params_failed_handler>
0x000BA1        DC0D000F                 rts;

 <$frame_sync.update_input_streams_ind>
0x000BA2        D15B0008                 r3 = M[r9 + 8];
0x000BA3        D14B0009                 r2 = M[r9 + 9];
0x000BA4        23540000                 r3 = r3 - r2;
0x000BA5        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x000BA6        D14B0004                 r2 = M[r9 + 4];
0x000BA7        9144007F                 r2 = r2 ASHIFT -1;
0x000BA8        03540000                 r3 = r3 + r2;
0x000BA9        D14B000C                 r2 = M[r9 + 12];
0x000BAA        23450000                 r2 = r2 - r3;
0x000BAB        D54B000C                 M[r9 + 12] = r2;
0x000BAC        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x000BAD        E422002F                 r0 = r0 + 1;
0x000BAE        DC0D000F                 rts;

 <$sbc.crc_calc>
0x000BAF        D14B0024                 r2 = M[r9 + 36];
0x000BB0        0170001D                 r5 = Null + 29;
0x000BB1        65520008                 r3 = 8 - r0;
0x000BB2        00C2000F                 r10 = r0 + Null;
0x000BB3        8C53005F                 r3 = r1 LSHIFT r3;
0x000BB4        E5F00006                 do $M.sbc.crc_calc.crc_loop;
0x000BB5        8865004F                 r4 = r3 XOR r2;
0x000BB6        8D440001                 r2 = r2 LSHIFT 1;
0x000BB7        81660080                 r4 = r4 AND 0x80;
0x000BB8        88440071                 if NE r2 = r2 XOR r5;
0x000BB9        8D550001                 r3 = r3 LSHIFT 1;

 <$M.sbc.crc_calc.crc_loop>
0x000BBA        D54B0024                 M[r9 + 36] = r2;
0x000BBB        DC0D000F                 rts;

 <$sbcenc.write_scale_factors>
0x000BBC        F3D00000                 push rLink;
0x000BBD        D16B001F                 r4 = M[r9 + 31];
0x000BBE        D17B0021                 r5 = M[r9 + 33];
0x000BBF        D12B0018                 r0 = M[r9 + 24];
0x000BC0        5010002F                 I1 = Null + r0;
0x000BC1        98C6007F                 r10 = r4 * r5 (int);
0x000BC2        01200004                 r0 = Null + 4;
0x000BC3        E5F00003                 do $M.sbcenc.write_scale_factors.loop;
0x000BC4        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000BC5        E1F0FEF5                 call $sbcenc.putbits;

 <$M.sbcenc.write_scale_factors.loop>
0x000BC6        DDF00074                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_output_stream_ind>
0x000BC7        501000AF                 I1 = Null + r8;
0x000BC8        238A0000                 r6 = r6 - r8;
0x000BC9        0088003D                 if LE r6 = r6 + r1;
0x000BCA        67890000                 r6 = r6 - M1;
0x000BCB        70A8006F                 M2 = r6 - r4;
0x000BCC        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x000BCD        444000AF                 r2 = Null + M2;
0x000BCE        D54B000C                 M[r9 + 12] = r2;
0x000BCF        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x000BD0        4480001F                 r6 = Null + I1;
0x000BD1        D5820002                 M[r0 + 2] = r6;
0x000BD2        DC0D000F                 rts;

 <$cbops.copy_op.amount_to_use>
0x000BD3        D12A0000                 r0 = M[r8 + 0];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BD4        D13A0001                 r1 = M[r8 + 1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BD5        01990002                 r7 = r7 + 2;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BD6        99220003                 r0 = r0 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BD7        03290000                 r0 = r0 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BD8        99330003                 r1 = r1 * 3 (int);

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BD9        03390000                 r1 = r1 + r7;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BDA        D042000F                 r2 = M[r0 + Null];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BDB        2804003F                 Null = r2 - M[r1];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BDC        D0430005                 if POS r2 = M[r1 + Null];

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BDD        1824000F                 M[r0] = r2 + Null;

 <gnPnOw/1/6LF5J1pQiiXgbv04SNxr6qGs0j2iKTJyNI=>
0x000BDE        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x000BDF        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x000BE0        D076000F                 r5 = M[r4 + Null];
0x000BE1        DD000059                 if EQ jump $pop_rLink_and_rts;
0x000BE2        D1960001                 r7 = M[r4 + 1];
0x000BE3        D1A60002                 r8 = M[r4 + 2];
0x000BE4        01660003                 r4 = r4 + 3;
0x000BE5        F3600000                 push r4;
0x000BE6        E007000F                 call r5;
0x000BE7        F3640000                 pop r4;
0x000BE8        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$cbuffer.calc_amount_space>
0x000BE9        D802000F                 Null = SIGNDET r0;
0x000BEA        DD00FD2D                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x000BEB        D1420000                 r2 = M[r0 + 0];
0x000BEC        D1320002                 r1 = M[r0 + 2];
0x000BED        D1220001                 r0 = M[r0 + 1];
0x000BEE        23230000                 r0 = r0 - r1;
0x000BEF        0022004D                 if LE r0 = r0 + r2;
0x000BF0        E422003F                 r0 = r0 - 1;
0x000BF1        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x000BF2        F3D00000                 push rLink;
0x000BF3        23A80000                 r8 = r8 - r6;
0x000BF4        00AA0034                 if NEG r8 = r8 + r1;
0x000BF5        20CA006F                 r10 = r8 - r4;
0x000BF6        E140FF92                 if NEG call $frame_sync.distribute_read_insert_ind;
0x000BF7        E1F0FE3F                 call $frame_sync.analyze_stream_ind;
0x000BF8        DDF00042                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data>
0x000BF9        D802000F                 Null = SIGNDET r0;
0x000BFA        DD00FD41                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x000BFB        D1420000                 r2 = M[r0 + 0];
0x000BFC        D1320002                 r1 = M[r0 + 2];
0x000BFD        D1220001                 r0 = M[r0 + 1];
0x000BFE        2023002F                 r0 = r1 - r0;
0x000BFF        00220044                 if NEG r0 = r0 + r2;
0x000C00        DC0D000F                 rts;

 <$interrupt.unblock>
0x000C01        09200A01                 r0 = Null + M[$interrupt.block_count];
0x000C02        E10002C5                 if EQ call $error;
0x000C03        E422003F                 r0 = r0 - 1;
0x000C04        19200A01                 M[$interrupt.block_count] = r0 + Null;
0x000C05        DC0D0001                 if NE rts;
0x000C06        E420002F                 r0 = Null + 1;
0x000C07        1920FE12                 M[0xfffe12] = r0 + Null;
0x000C08        DC0D000F                 rts;

 <$flash.map_page_into_dm>
0x000C09        9152007F                 r3 = r0 ASHIFT -1;
0x000C0A        1945FE5D                 M[0xfffe5d] = r2 + r3;
0x000C0B        81520001                 r3 = r0 AND 0x1;
0x000C0C        65251000                 r0 = 4096 - r3;
0x000C0D        2023002F                 r0 = r1 - r0;
0x000C0E        20330025                 if POS r1 = r1 - r0;
0x000C0F        0125D000                 r0 = r3 + -12288;
0x000C10        DC0D000F                 rts;

 <$block_interrupts>
0x000C11        09200A01                 r0 = Null + M[$interrupt.block_count];
0x000C12        E422002F                 r0 = r0 + 1;
0x000C13        19200A01                 M[$interrupt.block_count] = r0 + Null;
0x000C14        1900FE12                 M[0xfffe12] = Null + Null;
0x000C15        03000000                 Null = Null + Null;
0x000C16        03000000                 Null = Null + Null;
0x000C17        DC0D000F                 rts;

 <$message.send_queue_space>
0x000C18        FD0000FF 09203A02        r0 = Null + M[$message.queue_read_ptr];
0x000C1A        29220A03                 r0 = r0 - M[$message.queue_write_ptr];
0x000C1B        E422003F                 r0 = r0 - 1;
0x000C1C        DC0D0005                 if POS rts;
0x000C1D        0122006E                 r0 = r0 + 110;
0x000C1E        DC0D000F                 rts;

 <$_cbuffer_get_read_address>
0x000C1F        D802000F                 Null = SIGNDET r0;
0x000C20        DD00FCAE                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x000C21        D1320000                 r1 = M[r0 + 0];
0x000C22        D1220001                 r0 = M[r0 + 1];
0x000C23        DC0D000F                 rts;

 <$_cbuffer_get_write_address>
0x000C24        D802000F                 Null = SIGNDET r0;
0x000C25        DD00FC81                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x000C26        D1320000                 r1 = M[r0 + 0];
0x000C27        D1220002                 r0 = M[r0 + 2];
0x000C28        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x000C29        D1520002                 r3 = M[r0 + 2];
0x000C2A        D1420000                 r2 = M[r0 + 0];
0x000C2B        D1220001                 r0 = M[r0 + 1];
0x000C2C        D1340000                 r1 = M[r2 + 0];
0x000C2D        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x000C2E        D802000F                 Null = SIGNDET r0;
0x000C2F        DD00FF4C                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x000C30        D5320001                 M[r0 + 1] = r1;
0x000C31        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x000C32        D802000F                 Null = SIGNDET r0;
0x000C33        DD00FF2D                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x000C34        D5320002                 M[r0 + 2] = r1;
0x000C35        DC0D000F                 rts;

 <$timer.schedule_event_in>
0x000C36        0944FE71                 r2 = r2 + M[0xfffe71];
0x000C37        DDF0FCBE                 jump $timer.schedule_event_at;

 <$frmbuffer.set_frame_size>
0x000C38        D5520002                 M[r0 + 2] = r3;
0x000C39        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x000C3A        F3D40000                 pop rLink;
0x000C3B        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x000C3C        DC0D000F                 rts;

 <$sco_decoder.wbs.process>
0x000C3D        F3D00000                 push rLink;
0x000C3E        D53B0044                 M[r9 + 68] = r1;
0x000C3F        D12B003F                 r0 = M[r9 + 63];
0x000C40        DD000041                 if EQ jump $M.sco_decoder.wbs.process.no_output;
0x000C41        FD0000FF 1940339F        M[$scratch.s0] = r2 + Null;
0x000C43        D12B0041                 r0 = M[r9 + 65];
0x000C44        2002004F                 Null = r0 - r2;
0x000C45        00240004                 if NEG r0 = r2 + Null;
0x000C46        D52B0041                 M[r9 + 65] = r0;
0x000C47        21040003                 Null = r2 - 3;
0x000C48        DD000042                 if EQ jump $M.sco_decoder.wbs.process.lostsync;

 <$M.sco_decoder.wbs.process.buffer_decode_loop>
0x000C49        51900001                 M1 = Null + 1;
0x000C4A        0140003C                 r2 = Null + 60;
0x000C4B        D12B003E                 r0 = M[r9 + 62];
0x000C4C        5040002F                 I4 = Null + r0;
0x000C4D        D12B0040                 r0 = M[r9 + 64];
0x000C4E        D16B0042                 r4 = M[r9 + 66];
0x000C4F        E1F000E8                 call $sco_decoder.wbs.copy_frame;
0x000C50        D52B0040                 M[r9 + 64] = r0;
0x000C51        D56B0042                 M[r9 + 66] = r4;
0x000C52        D13B0041                 r1 = M[r9 + 65];
0x000C53        DD10000F                 if NE jump $M.sco_decoder.wbs.process.skip_sync_check;
0x000C54        D13B0040                 r1 = M[r9 + 64];
0x000C55        21030004                 Null = r1 - 4;
0x000C56        DD40000C                 if NEG jump $M.sco_decoder.wbs.process.skip_sync_check;
0x000C57        E440003F                 r2 = Null - 1;
0x000C58        D13B003E                 r1 = M[r9 + 62];
0x000C59        D1530000                 r3 = M[r1 + 0];
0x000C5A        D1330001                 r1 = M[r1 + 1];
0x000C5B        8155FF0F                 r3 = r3 AND 0xff0f;
0x000C5C        21050108                 Null = r3 - 264;
0x000C5D        DD10002D                 if NE jump $M.sco_decoder.wbs.process.lostsync;
0x000C5E        8133FF00                 r1 = r1 AND 0xff00;
0x000C5F        FD000000 2103AD00        Null = r1 - 44288;
0x000C61        DD100029                 if NE jump $M.sco_decoder.wbs.process.lostsync;

 <$M.sco_decoder.wbs.process.skip_sync_check>
0x000C62        2102003C                 Null = r0 - 60;
0x000C63        DD100016                 if NE jump $M.sco_decoder.wbs.process.decode_done;
0x000C64        D50B0040                 M[r9 + 64] = Null;
0x000C65        F3010000                 push I0;
0x000C66        F3C10000                 push L0;
0x000C67        F3700000                 push r5;
0x000C68        F3A00000                 push r8;
0x000C69        F3900000                 push r7;
0x000C6A        D12B003E                 r0 = M[r9 + 62];
0x000C6B        5000002F                 I0 = Null + r0;
0x000C6C        51C00000                 L0 = Null + 0;
0x000C6D        D1290003                 r0 = M[r7 + 3];
0x000C6E        E1F0006D                 call $sco_decoder.wbs.decode;
0x000C6F        F3940000                 pop r7;
0x000C70        F3A40000                 pop r8;
0x000C71        F3740000                 pop r5;
0x000C72        F3C50000                 pop L0;
0x000C73        F3050000                 pop I0;
0x000C74        0002000F                 Null = r0 + Null;
0x000C75        DD00FFD4                 if EQ jump $M.sco_decoder.wbs.process.buffer_decode_loop;
0x000C76        01200002                 r0 = Null + 2;
0x000C77        D52B0041                 M[r9 + 65] = r0;
0x000C78        DDF0FFD1                 jump $M.sco_decoder.wbs.process.buffer_decode_loop;

 <$M.sco_decoder.wbs.process.decode_done>
0x000C79        D1290008                 r0 = M[r7 + 8];
0x000C7A        E402003F                 Null = r0 - 1;
0x000C7B        DD000006                 if EQ jump $M.sco_decoder.wbs.process.no_output;
0x000C7C        D17B0041                 r5 = M[r9 + 65];
0x000C7D        FD0000FF 0920339F        r0 = Null + M[$scratch.s0];
0x000C7F        D52B0041                 M[r9 + 65] = r0;
0x000C80        DDF00011                 jump $M.sco_decoder.wbs.process.exit_with_output;

 <$M.sco_decoder.wbs.process.no_output>
0x000C81        E470003F                 r5 = Null - 1;
0x000C82        D14B0044                 r2 = M[r9 + 68];
0x000C83        D13B0043                 r1 = M[r9 + 67];
0x000C84        2024003F                 r0 = r2 - r1;
0x000C85        21020018                 Null = r0 - 24;
0x000C86        DD500002                 if POS jump $M.sco_decoder.wbs.process.output_fake_frame;
0x000C87        DDF0000C                 jump $M.sco_decoder.wbs.process.exit;

 <$M.sco_decoder.wbs.process.output_fake_frame>
0x000C88        0170FFFE                 r5 = Null + -2;
0x000C89        DDF00008                 jump $M.sco_decoder.wbs.process.exit_with_output;

 <$M.sco_decoder.wbs.process.lostsync>
0x000C8A        D50B003F                 M[r9 + 63] = Null;
0x000C8B        D50B0041                 M[r9 + 65] = Null;
0x000C8C        D50B0040                 M[r9 + 64] = Null;
0x000C8D        0074000F                 r5 = r2 + Null;
0x000C8E        E407002F                 Null = r5 + 1;
0x000C8F        DD00FFF2                 if EQ jump $M.sco_decoder.wbs.process.no_output;
0x000C90        DDF00003                 jump $M.sco_decoder.wbs.process.exit;

 <$M.sco_decoder.wbs.process.exit_with_output>
0x000C91        D13B0044                 r1 = M[r9 + 68];
0x000C92        D53B0043                 M[r9 + 67] = r1;

 <$M.sco_decoder.wbs.process.exit>
0x000C93        23070000                 Null = Null - r5;
0x000C94        DDA0FFA6                 if GE jump $pop_rLink_and_rts;
0x000C95        F3700000                 push r5;
0x000C96        E1F0021E                 call $sbcdec.silence_decoder;
0x000C97        F3740000                 pop r5;
0x000C98        DDF0FFA2                 jump $pop_rLink_and_rts;

 <$main>
0x000C99        E1F00201                 call $stack.initialise;
0x000C9A        E1F001F3                 call $interrupt.initialise;
0x000C9B        E1F00236                 call $message.initialise;
0x000C9C        E1F00209                 call $cbuffer.initialise;
0x000C9D        E1F001D9                 call $pskey.initialise;
0x000C9E        E1F001E4                 call $wall_clock.initialise;
0x000C9F        01A0090E                 r8 = Null + 2318;
0x000CA0        E1F00185                 call $sco_timing.initialize;
0x000CA1        09700917                 r5 = Null + M[0x917];
0x000CA2        F3700000                 push r5;
0x000CA3        E477003F                 r5 = r5 - 1;
0x000CA4        E1F0010C                 call $sbcenc.init_static_encoder;
0x000CA5        F3740000                 pop r5;
0x000CA6        0177FFFE                 r5 = r5 + -2;
0x000CA7        E1F000DD                 call $sbcdec.init_static_decoder;
0x000CA8        0190090E                 r7 = Null + 2318;
0x000CA9        E1F00197                 call $frame_sync.sco_initialize;
0x000CAA        FD000000 01408000        r2 = Null + 32768;
0x000CAC        E1F0FD01                 call $message.send_short;
0x000CAD        FD0000FF 013037F8        r1 = Null + -51208;
0x000CAF        01401026                 r2 = Null + 4134;
0x000CB0        01500DEB                 r3 = Null + 3563;
0x000CB1        E1F001BA                 call $message.register_handler;
0x000CB2        FD0000FF 0130377C        r1 = Null + -51332;
0x000CB4        01400271                 r2 = Null + 625;
0x000CB5        01500D9D                 r3 = Null + 3485;
0x000CB6        E1F0FF80                 call $timer.schedule_event_in;

 <$M.main.main_loop>
0x000CB7        01A00998                 r8 = Null + 2456;
0x000CB8        E1F0FA52                 call $frame_sync.task_scheduler_run;
0x000CB9        DDF0FFFE                 jump $M.main.main_loop;

 <$main_housekeeping>
0x000CBA        F3D00000                 push rLink;
0x000CBB        DDF0FF7F                 jump $pop_rLink_and_rts;

 <$main_receive>
0x000CBC        F3D00000                 push rLink;
0x000CBD        090009FD                 Null = Null + M[$one_mic_example.reinit];
0x000CBE        E1100161                 if NE call $one_mic_example_reinitialize;
0x000CBF        0190090E                 r7 = Null + 2318;
0x000CC0        E1F0F76E                 call ALrYtClmXhG4b8GdfG6yhcsEkwc5+93FLGi1D2oh5B0=;
0x000CC1        FD0000FF 092039FC        r0 = Null + M[$one_mic_example.sys_mode];
0x000CC3        D16209FA                 r4 = M[r0 + 2554];
0x000CC4        E1F0FF1B                 call $frame_sync.run_function_table;
0x000CC5        DDF0FF75                 jump $pop_rLink_and_rts;

 <$main_send>
0x000CC6        F3D00000                 push rLink;
0x000CC7        0920FE71                 r0 = Null + M[0xfffe71];
0x000CC8        F3200000                 push r0;
0x000CC9        1900FE93                 M[0xfffe93] = Null + Null;
0x000CCA        090009FD                 Null = Null + M[$one_mic_example.reinit];
0x000CCB        E1100154                 if NE call $one_mic_example_reinitialize;
0x000CCC        FD0000FF 092039FC        r0 = Null + M[$one_mic_example.sys_mode];
0x000CCE        FD0000FF D16239F9        r4 = M[r0 + -50695];
0x000CD0        E1F0FF0F                 call $frame_sync.run_function_table;
0x000CD1        0190090E                 r7 = Null + 2318;
0x000CD2        D1290009                 r0 = M[r7 + 9];
0x000CD3        D1B20003                 r9 = M[r0 + 3];
0x000CD4        E1F0FD0B                 call $frame_sync.sco_encode;
0x000CD5        F3240000                 pop r0;
0x000CD6        2922FE71                 r0 = r0 - M[0xfffe71];
0x000CD7        0930099E                 r1 = Null + M[0x99e];
0x000CD8        23320000                 r1 = r1 - r0;
0x000CD9        1930099E                 M[0x99e] = r1 + Null;
0x000CDA        DDF0FF60                 jump $pop_rLink_and_rts;

 <$sco_decoder.wbs.decode>
0x000CDB        F3D00000                 push rLink;
0x000CDC        192009FC                 M[$scratch.s2] = r0 + Null;
0x000CDD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000CDE        01200010                 r0 = Null + 16;
0x000CDF        D52B003B                 M[r9 + 59] = r0;
0x000CE0        0120000F                 r0 = Null + 15;
0x000CE1        D52B0024                 M[r9 + 36] = r0;
0x000CE2        E1F0FCE2                 call $sbcdec.get1byte;
0x000CE3        E1F0FCE1                 call $sbcdec.get1byte;
0x000CE4        E1F0FECB                 call $sbc.crc_calc;
0x000CE5        E1F0FCDF                 call $sbcdec.get1byte;
0x000CE6        E1F0FEC9                 call $sbc.crc_calc;
0x000CE7        E1F0FCDD                 call $sbcdec.get1byte;
0x000CE8        D53B0023                 M[r9 + 35] = r1;
0x000CE9        D50B001C                 M[r9 + 28] = Null;
0x000CEA        0130000F                 r1 = Null + 15;
0x000CEB        D53B001D                 M[r9 + 29] = r1;
0x000CEC        D50B001E                 M[r9 + 30] = Null;
0x000CED        E430002F                 r1 = Null + 1;
0x000CEE        D53B001F                 M[r9 + 31] = r1;
0x000CEF        D50B0020                 M[r9 + 32] = Null;
0x000CF0        01300008                 r1 = Null + 8;
0x000CF1        D53B0021                 M[r9 + 33] = r1;
0x000CF2        0130001A                 r1 = Null + 26;
0x000CF3        D53B0022                 M[r9 + 34] = r1;
0x000CF4        01200039                 r0 = Null + 57;
0x000CF5        D52B0039                 M[r9 + 57] = r0;
0x000CF6        E1F0FE78                 call $sbcdec.read_scale_factors;
0x000CF7        01700002                 r5 = Null + 2;
0x000CF8        D12B0023                 r0 = M[r9 + 35];
0x000CF9        D13B0024                 r1 = M[r9 + 36];
0x000CFA        23230000                 r0 = r0 - r1;
0x000CFB        812200FF                 r0 = r0 AND 0xff;
0x000CFC        DD100011                 if NE jump $M.sco_decoder.wbs.decode.decode_failed;
0x000CFD        E1F0F424                 call ALrYtClmXhG4b8GdfG6yhcsEkwc5+93FLGi1D2oh5B0=;
0x000CFE        E1F0FE16                 call $sbcdec.read_audio_samples;
0x000CFF        D12B003B                 r0 = M[r9 + 59];
0x000D00        21020010                 Null = r0 - 16;
0x000D01        DD000002                 if EQ jump $M.sco_decoder.wbs.decode.skip_padding;
0x000D02        E1F0FCC9                 call $sbcdec.getbits;

 <$M.sco_decoder.wbs.decode.skip_padding>
0x000D03        E1F0FB00                 call $sbcdec.sample_reconstruction;
0x000D04        092009FC                 r0 = Null + M[$scratch.s2];
0x000D05        E1F0FF1F                 call $_cbuffer_get_write_address;
0x000D06        5010002F                 I1 = Null + r0;
0x000D07        50D0003F                 L1 = Null + r1;
0x000D08        01700000                 r5 = Null + 0;
0x000D09        E1F0F9BF                 call $sbcdec.synthesis_subband_filter;
0x000D0A        51D00000                 L1 = Null + 0;
0x000D0B        01200000                 r0 = Null + 0;
0x000D0C        DDF0FF2E                 jump $pop_rLink_and_rts;

 <$M.sco_decoder.wbs.decode.decode_failed>
0x000D0D        0027000F                 r0 = r5 + Null;
0x000D0E        DDF0FF2C                 jump $pop_rLink_and_rts;

 <$sco_decoder.wbs.validate>
0x000D0F        F3D00000                 push rLink;
0x000D10        51900001                 M1 = Null + 1;
0x000D11        0082000F                 r6 = r0 + Null;
0x000D12        D50B0042                 M[r9 + 66] = Null;
0x000D13        D12B003F                 r0 = M[r9 + 63];
0x000D14        DD100017                 if NE jump $M.sco_decoder.wbs.validate.havesync;
0x000D15        51A0FFFB                 M2 = Null + -5;
0x000D16        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x000D17        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000D18        51A00003                 M2 = Null + 3;
0x000D19        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x000D1A        81070001                 Null = r5 AND 0x1;
0x000D1B        DD000006                 if EQ jump $M.sco_decoder.wbs.validate.insert_last_word;
0x000D1C        812200FF                 r0 = r0 AND 0xff;
0x000D1D        8D220008                 r0 = r0 LSHIFT 8;
0x000D1E        8D330078                 r1 = r1 LSHIFT -8;
0x000D1F        813300FF                 r1 = r1 AND 0xff;
0x000D20        87320000                 r1 = r1 OR r0;

 <$M.sco_decoder.wbs.validate.insert_last_word>
0x000D21        0300B000                 Null = Null + Null, M[I0,0] = r1;
0x000D22        01770002                 r5 = r5 + 2;
0x000D23        E1F00040                 call $sco_decoder.wbs.findsync;
0x000D24        0073000F                 r5 = r1 + Null;
0x000D25        5801000F                 I0 = I1 + Null;
0x000D26        D56B0042                 M[r9 + 66] = r4;
0x000D27        D54B003F                 M[r9 + 63] = r2;
0x000D28        DD100003                 if NE jump $M.sco_decoder.wbs.validate.havesync;
0x000D29        01300002                 r1 = Null + 2;
0x000D2A        DDF0FF10                 jump $pop_rLink_and_rts;

 <$M.sco_decoder.wbs.validate.havesync>
0x000D2B        01400078                 r2 = Null + 120;
0x000D2C        D12B0040                 r0 = M[r9 + 64];
0x000D2D        03270000                 r0 = r0 + r5;
0x000D2E        99220002                 r0 = r0 * 2 (int);
0x000D2F        E430002F                 r1 = Null + 1;
0x000D30        2002004F                 Null = r0 - r2;
0x000D31        00340005                 if POS r1 = r2 + Null;
0x000D32        E403003F                 Null = r1 - 1;
0x000D33        DD00FF07                 if EQ jump $pop_rLink_and_rts;
0x000D34        2008003F                 Null = r6 - r1;
0x000D35        00300004                 if NEG r1 = Null + Null;
0x000D36        DDF0FF04                 jump $pop_rLink_and_rts;

 <$sco_decoder.wbs.copy_frame>
0x000D37        FD0000FF 196039FB        M[$scratch.s1] = r4 + Null;
0x000D39        23420000                 r2 = r2 - r0;
0x000D3A        2007004F                 Null = r5 - r2;
0x000D3B        00470004                 if NEG r2 = r5 + Null;
0x000D3C        8D52007F                 r3 = r0 LSHIFT -1;
0x000D3D        5B450000                 I4 = I4 + r3;
0x000D3E        8DC4007F                 r10 = r2 LSHIFT -1;
0x000D3F        0002000F                 Null = r0 + Null;
0x000D40        DD00000B                 if EQ jump $M.sco_decoder.wbs.copy_frame.frame_empty;
0x000D41        81020001                 Null = r0 AND 0x1;
0x000D42        DD000016                 if EQ jump $M.sco_decoder.wbs.copy_frame.copy_aligned;
0x000D43        03005060                 Null = Null + Null, r3 = M[I0,0], r4 = M[I4,0];
0x000D44        8D550078                 r3 = r3 LSHIFT -8;
0x000D45        815500FF                 r3 = r3 AND 0xff;
0x000D46        8166FF00                 r4 = r4 AND 0xff00;
0x000D47        87650000                 r4 = r4 OR r3;
0x000D48        030000E1                 Null = Null + Null, M[I4,1] = r4;
0x000D49        01500000                 r3 = Null + 0;
0x000D4A        DDF00004                 jump $M.sco_decoder.wbs.copy_frame.copy_unaligned;

 <$M.sco_decoder.wbs.copy_frame.frame_empty>
0x000D4B        81060001                 Null = r4 AND 0x1;
0x000D4C        DD00000C                 if EQ jump $M.sco_decoder.wbs.copy_frame.copy_aligned;
0x000D4D        81540001                 r3 = r2 AND 0x1;

 <$M.sco_decoder.wbs.copy_frame.copy_unaligned>
0x000D4E        03C55100                 r10 = r10 + r3, r3 = M[I0,1];
0x000D4F        01800008                 r6 = Null + 8;
0x000D50        8F586000                 r3 = r3 LSHIFT r6, r4 = M[I0,0];
0x000D51        E5F00005                 do $M.sco_decoder.wbs.copy_frame.unaligned_copy_loop;
0x000D52        8D660078                 r4 = r4 LSHIFT -8;
0x000D53        8435516F                 r1 = r3 OR r4, r3 = M[I0,M1];
0x000D54        8133FFFF                 r1 = r1 AND 0xffff;
0x000D55        8F5860B1                 r3 = r3 LSHIFT r6, r4 = M[I0,0], M[I4,1] = r1;

 <$M.sco_decoder.wbs.copy_frame.unaligned_copy_loop>
0x000D56        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x000D57        DDF00005                 jump $M.sco_decoder.wbs.copy_frame.done;

 <$M.sco_decoder.wbs.copy_frame.copy_aligned>
0x000D58        03005100                 Null = Null + Null, r3 = M[I0,1];
0x000D59        E5F00002                 do $M.sco_decoder.wbs.copy_frame.copy_loop;
0x000D5A        030051D1                 Null = Null + Null, r3 = M[I0,1], M[I4,1] = r3;

 <$M.sco_decoder.wbs.copy_frame.copy_loop>
0x000D5B        03005300                 Null = Null + Null, r3 = M[I0,-1];

 <$M.sco_decoder.wbs.copy_frame.done>
0x000D5C        03240000                 r0 = r0 + r2;
0x000D5D        23740000                 r5 = r5 - r2;
0x000D5E        FD0000FF 096039FB        r4 = Null + M[$scratch.s1];
0x000D60        81040001                 Null = r2 AND 0x1;
0x000D61        68690061                 if NE r4 = M1 - r4;
0x000D62        DC0D000F                 rts;

 <$sco_decoder.wbs.findsync>
0x000D63        58DC000F                 L1 = L0 + Null;
0x000D64        5810000F                 I1 = I0 + Null;
0x000D65        8DC7007F                 r10 = r5 LSHIFT -1;
0x000D66        81070001                 Null = r5 AND 0x1;
0x000D67        64CC3590                 if EQ r10 = r10 - M1, r1 = M[I1,M1];
0x000D68        51A00108                 M2 = Null + 264;
0x000D69        51B00001                 M3 = Null + 1;
0x000D6A        E5F0000E                 do $M.sco_decoder.wbs.findsync.findsync_loop;
0x000D6B        4460559F                 r4 = Null + M1, r3 = M[I1,M1];
0x000D6C        814300FF                 r2 = r1 AND 0xff;
0x000D6D        81250FFF                 r0 = r3 AND 0xfff;
0x000D6E        210208AD                 Null = r0 - 2221;
0x000D6F        640400B0                 if EQ Null = r2 - M3;
0x000D70        DD00000B                 if EQ jump $M.sco_decoder.wbs.findsync.foundsync;
0x000D71        8143FF0F                 r2 = r1 AND 0xff0f;
0x000D72        8125FF00                 r0 = r3 AND 0xff00;
0x000D73        FD000000 2102AD00        Null = r0 - 44288;
0x000D75        646400A0                 if EQ r4 = r2 - M2;
0x000D76        DD000005                 if EQ jump $M.sco_decoder.wbs.findsync.foundsync;
0x000D77        0035000F                 r1 = r3 + Null;

 <$M.sco_decoder.wbs.findsync.findsync_loop>
0x000D78        51D00000                 L1 = Null + 0;
0x000D79        01400000                 r2 = Null + 0;
0x000D7A        DC0D000F                 rts;

 <$M.sco_decoder.wbs.findsync.foundsync>
0x000D7B        03003700                 Null = Null + Null, r1 = M[I1,-1];
0x000D7C        03003700                 Null = Null + Null, r1 = M[I1,-1];
0x000D7D        51D00000                 L1 = Null + 0;
0x000D7E        E4CC002F                 r10 = r10 + 1;
0x000D7F        8D3C0001                 r1 = r10 LSHIFT 1;
0x000D80        23360000                 r1 = r1 - r4;
0x000D81        81070001                 Null = r5 AND 0x1;
0x000D82        64330091                 if NE r1 = r1 - M1;
0x000D83        DC0D000F                 rts;

 <$sbcdec.init_static_decoder>
0x000D84        F3D00000                 push rLink;
0x000D85        FD0000FF 01B0395B        r9 = Null + -50853;
0x000D87        D5B70005                 M[r5 + 5] = r9;
0x000D88        E1F0009C                 call $sbc.init_static_common;
0x000D89        FD0000FF 01203290        r0 = Null + -52592;
0x000D8B        D52B002E                 M[r9 + 46] = r0;
0x000D8C        FD0000FF 012030E1        r0 = Null + -53023;
0x000D8E        D52B0030                 M[r9 + 48] = r0;
0x000D8F        FD0000FF 012030C0        r0 = Null + -53056;
0x000D91        D52B0031                 M[r9 + 49] = r0;
0x000D92        FD0000FF 01203000        r0 = Null + -53248;
0x000D94        D52B0032                 M[r9 + 50] = r0;
0x000D95        D50B003A                 M[r9 + 58] = Null;
0x000D96        01200010                 r0 = Null + 16;
0x000D97        D52B003B                 M[r9 + 59] = r0;
0x000D98        01200720                 r0 = Null + 1824;
0x000D99        D52B003E                 M[r9 + 62] = r0;
0x000D9A        E1F0007F                 call $sbcdec.reset_decoder;
0x000D9B        E1F00122                 call $sbcdec.init_tables;
0x000D9C        DDF0FE9E                 jump $pop_rLink_and_rts;

 <$audio_copy_handler>
0x000D9D        F3D00000                 push rLink;
0x000D9E        FD0000FF 01A039B9        r8 = Null + -50759;
0x000DA0        E1F0F414                 call $frame_sync.usb_in_mono_audio_copy;
0x000DA1        FD0000FF 01A039C2        r8 = Null + -50750;
0x000DA3        E1F0F51D                 call $cbops_multirate.copy;
0x000DA4        01A00717                 r8 = Null + 1815;
0x000DA5        E1F0F51B                 call $cbops_multirate.copy;
0x000DA6        01A003F8                 r8 = Null + 1016;
0x000DA7        E1F0F6EC                 call $frame_sync.usb_out_mono_copy;

 <$M.audio_copy_handler.irq_sco>
0x000DA8        01900998                 r7 = Null + 2456;
0x000DA9        FD0000FF 0130377C        r1 = Null + -51332;
0x000DAB        01500D9D                 r3 = Null + 3485;
0x000DAC        E1F0F73C                 call $sco_timing.SyncClock;
0x000DAD        01A00998                 r8 = Null + 2456;
0x000DAE        E1F0FD54                 call $frame_sync.task_scheduler_isr;
0x000DAF        DDF0FE8B                 jump $pop_rLink_and_rts;

 <$sbcenc.init_static_encoder>
0x000DB0        F3D00000                 push rLink;
0x000DB1        FD0000FF 01B0395B        r9 = Null + -50853;
0x000DB3        D5B70004                 M[r5 + 4] = r9;
0x000DB4        E1F00070                 call $sbc.init_static_common;
0x000DB5        FD0000FF 01203210        r0 = Null + -52720;
0x000DB7        D52B0001                 M[r9 + 1] = r0;
0x000DB8        FD0000FF 01203100        r0 = Null + -52992;
0x000DBA        D52B0003                 M[r9 + 3] = r0;
0x000DBB        0120033C                 r0 = Null + 828;
0x000DBC        D52B0005                 M[r9 + 5] = r0;
0x000DBD        FD0000FF 012030D1        r0 = Null + -53039;
0x000DBF        D52B0006                 M[r9 + 6] = r0;
0x000DC0        01200010                 r0 = Null + 16;
0x000DC1        D52B0010                 M[r9 + 16] = r0;
0x000DC2        E1F000E9                 call $sbcenc.reset_encoder;
0x000DC3        E1F000FF                 call $sbcenc.init_tables;
0x000DC4        DDF0FE76                 jump $pop_rLink_and_rts;

 <$sbcdec.private.init_tables>
0x000DC5        F3D00000                 push rLink;
0x000DC6        01300011                 r1 = Null + 17;
0x000DC7        FD0000FF 094033FC        r2 = Null + M[$flash.windowed_data16.address];
0x000DC9        D12B002E                 r0 = M[r9 + 46];
0x000DCA        5000002F                 I0 = Null + r0;
0x000DCB        01200000                 r0 = Null + 0;
0x000DCC        01300080                 r1 = Null + 128;
0x000DCD        E1F0F9A9                 call $flash.copy_to_dm_24;
0x000DCE        D12B0030                 r0 = M[r9 + 48];
0x000DCF        5000002F                 I0 = Null + r0;
0x000DD0        0120024A                 r0 = Null + 586;
0x000DD1        0130000F                 r1 = Null + 15;
0x000DD2        E1F0F9A4                 call $flash.copy_to_dm_24;
0x000DD3        D12B0031                 r0 = M[r9 + 49];
0x000DD4        5000002F                 I0 = Null + r0;
0x000DD5        01200218                 r0 = Null + 536;
0x000DD6        01300011                 r1 = Null + 17;
0x000DD7        E1F0F99F                 call $flash.copy_to_dm_24;
0x000DD8        DDF0FE62                 jump $pop_rLink_and_rts;

 <$stream_copy>
0x000DD9        F3D00000                 push rLink;
0x000DDA        D1290000                 r0 = M[r7 + 0];
0x000DDB        E1F0FE4E                 call $frmbuffer.get_buffer;
0x000DDC        5000002F                 I0 = Null + r0;
0x000DDD        50C0003F                 L0 = Null + r1;
0x000DDE        00C5000F                 r10 = r3 + Null;
0x000DDF        D1290001                 r0 = M[r7 + 1];
0x000DE0        E1F0FE58                 call $frmbuffer.set_frame_size;
0x000DE1        E1F0FE48                 call $frmbuffer.get_buffer;
0x000DE2        5040002F                 I4 = Null + r0;
0x000DE3        50E0003F                 L4 = Null + r1;
0x000DE4        F3D40000                 pop rLink;
0x000DE5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000DE6        E5F00002                 do $M.stream_copy.loop_passthru;
0x000DE7        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.stream_copy.loop_passthru>
0x000DE8        51C00000                 L0 = Null + 0;
0x000DE9        51E00000                 L4 = Null + 0;
0x000DEA        DC0D000F                 rts;

 <$persistant_warp_message_handler>
0x000DEB        F3D00000                 push rLink;
0x000DEC        01A00930                 r8 = Null + 2352;
0x000DED        813300FF                 r1 = r1 AND 0xff;
0x000DEE        D53A000C                 M[r8 + 12] = r1;
0x000DEF        8D440008                 r2 = r2 LSHIFT 8;
0x000DF0        813500FF                 r1 = r3 AND 0xff;
0x000DF1        87430000                 r2 = r2 OR r1;
0x000DF2        D54A0005                 M[r8 + 5] = r2;
0x000DF3        8D660008                 r4 = r4 LSHIFT 8;
0x000DF4        8D350078                 r1 = r3 LSHIFT -8;
0x000DF5        813300FF                 r1 = r1 AND 0xff;
0x000DF6        87630000                 r4 = r4 OR r1;
0x000DF7        D56A000D                 M[r8 + 13] = r4;
0x000DF8        2060006F                 r4 = Null - r4;
0x000DF9        D56A000E                 M[r8 + 14] = r4;
0x000DFA        D13A0003                 r1 = M[r8 + 3];
0x000DFB        E1F0F5BF                 call $cbops.rate_monitor_op.Initialize;
0x000DFC        DDF0FE3E                 jump $pop_rLink_and_rts;

 <$sbcenc.private.init_tables>
0x000DFD        F3D00000                 push rLink;
0x000DFE        FD0000FF 094033FC        r2 = Null + M[$flash.windowed_data16.address];
0x000E00        D12B0001                 r0 = M[r9 + 1];
0x000E01        5000002F                 I0 = Null + r0;
0x000E02        012000C0                 r0 = Null + 192;
0x000E03        01300080                 r1 = Null + 128;
0x000E04        E1F0F972                 call $flash.copy_to_dm_24;
0x000E05        D12B0006                 r0 = M[r9 + 6];
0x000E06        5000002F                 I0 = Null + r0;
0x000E07        01200232                 r0 = Null + 562;
0x000E08        01300010                 r1 = Null + 16;
0x000E09        E1F0F96D                 call $flash.copy_to_dm_24;
0x000E0A        DDF0FE30                 jump $pop_rLink_and_rts;

 <$sbc.private.init_tables_common>
0x000E0B        F3D00000                 push rLink;
0x000E0C        FD0000FF 094033FC        r2 = Null + M[$flash.windowed_data16.address];
0x000E0E        D12B0015                 r0 = M[r9 + 21];
0x000E0F        5000002F                 I0 = Null + r0;
0x000E10        01200180                 r0 = Null + 384;
0x000E11        01300050                 r1 = Null + 80;
0x000E12        E1F0F964                 call $flash.copy_to_dm_24;
0x000E13        D12B0017                 r0 = M[r9 + 23];
0x000E14        5000002F                 I0 = Null + r0;
0x000E15        012001F8                 r0 = Null + 504;
0x000E16        01300020                 r1 = Null + 32;
0x000E17        E1F0FD2C                 call $flash.copy_to_dm;
0x000E18        DDF0FE22                 jump $pop_rLink_and_rts;

 <$sbcdec.reset_decoder>
0x000E19        F3D00000                 push rLink;
0x000E1A        01200010                 r0 = Null + 16;
0x000E1B        D1B70005                 r9 = M[r5 + 5];
0x000E1C        D52B003B                 M[r9 + 59] = r0;
0x000E1D        E1F00097                 call $sbcdec.silence_decoder;
0x000E1E        DDF0FE1C                 jump $pop_rLink_and_rts;

 <$one_mic_example_reinitialize>
0x000E1F        F3D00000                 push rLink;
0x000E20        016001DC                 r4 = Null + 476;
0x000E21        E1F0FDBE                 call $frame_sync.run_function_table;
0x000E22        190009FD                 M[$one_mic_example.reinit] = Null + Null;
0x000E23        DDF0FE17                 jump $pop_rLink_and_rts;

 <$sbc.init_static_common>
0x000E24        DC0D000F                 rts;

 <$sco_timing.initialize>
0x000E25        F3D00000                 push rLink;
0x000E26        FD0000FF 19A03A08        M[$M.sco_timing.sco_data_ptr] = r8 + Null;
0x000E28        D50A0016                 M[r8 + 22] = Null;
0x000E29        FD0000FF 013039DC        r1 = Null + -50724;
0x000E2B        FD000000 01408019        r2 = Null + 32793;
0x000E2D        01500B97                 r3 = Null + 2967;
0x000E2E        E1F0003D                 call $message.register_handler;
0x000E2F        013009E0                 r1 = Null + 2528;
0x000E30        FD000000 01408015        r2 = Null + 32789;
0x000E32        01500741                 r3 = Null + 1857;
0x000E33        E1F00038                 call $message.register_handler;
0x000E34        FD0000FF 013039E0        r1 = Null + -50720;
0x000E36        FD000000 01408016        r2 = Null + 32790;
0x000E38        01500BA1                 r3 = Null + 2977;
0x000E39        E1F00032                 call $message.register_handler;
0x000E3A        01200858                 r0 = Null + 2136;
0x000E3B        FD0000FF 192039FD        M[$cbuffer.write_port_connect_address] = r0 + Null;
0x000E3D        0120086B                 r0 = Null + 2155;
0x000E3E        192009FE                 M[$cbuffer.write_port_disconnect_address] = r0 + Null;
0x000E3F        DDF0FDFB                 jump $pop_rLink_and_rts;

 <$frame_sync.sco_initialize>
0x000E40        F3D00000                 push rLink;
0x000E41        D509000F                 M[r7 + 15] = Null;
0x000E42        D5090010                 M[r7 + 16] = Null;
0x000E43        D509000D                 M[r7 + 13] = Null;
0x000E44        D1390006                 r1 = M[r7 + 6];
0x000E45        E410002F                 rMAC = Null + 1;
0x000E46        D9030000                 Div = rMAC / r1;
0x000E47        D9300001                 r1 = DivResult;
0x000E48        9133007F                 r1 = r1 ASHIFT -1;
0x000E49        D539000E                 M[r7 + 14] = r1;
0x000E4A        D1A90009                 r8 = M[r7 + 9];
0x000E4B        D13A0002                 r1 = M[r8 + 2];
0x000E4C        D1AA0003                 r8 = M[r8 + 3];
0x000E4D        00BA000F                 r9 = r8 + Null;
0x000E4E        E003000F                 call r1;
0x000E4F        D139000B                 r1 = M[r7 + 11];
0x000E50        DD00FDEA                 if EQ jump $pop_rLink_and_rts;
0x000E51        D1990011                 r7 = M[r7 + 17];
0x000E52        E003000F                 call r1;
0x000E53        DDF0FDE7                 jump $pop_rLink_and_rts;
...

 <$message.register_handler_with_mask>
0x000E68        8966FFFF                 r4 = r4 XOR 0xffff;
0x000E69        D5630003                 M[r1 + 3] = r4;
0x000E6A        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x000E6B        8520FFFF                 r0 = Null OR 0xffff;
0x000E6C        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x000E6D        F3D00000                 push rLink;
0x000E6E        E1F0FDA3                 call $block_interrupts;
0x000E6F        09200A02                 r0 = Null + M[$message.last_addr];
0x000E70        D5230000                 M[r1 + 0] = r0;
0x000E71        19300A02                 M[$message.last_addr] = r1 + Null;
0x000E72        D5430001                 M[r1 + 1] = r2;
0x000E73        D5530002                 M[r1 + 2] = r3;
0x000E74        E1F0FD8D                 call $interrupt.unblock;
0x000E75        DDF0FDC5                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x000E76        F3D00000                 push rLink;
0x000E77        013009D4                 r1 = Null + 2516;
0x000E78        FD000000 01408007        r2 = Null + 32775;
0x000E7A        0150097C                 r3 = Null + 2428;
0x000E7B        E1F0FFF0                 call $message.register_handler;
0x000E7C        FD0000FF 013039D4        r1 = Null + -50732;
0x000E7E        85408008                 r2 = Null OR 0x8008;
0x000E7F        0150097C                 r3 = Null + 2428;
0x000E80        E1F0FFEB                 call $message.register_handler;
0x000E81        DDF0FDB9                 jump $pop_rLink_and_rts;

 <$wall_clock.initialise>
0x000E82        F3D00000                 push rLink;
0x000E83        FD0000FF 013039D8        r1 = Null + -50728;
0x000E85        8540801C                 r2 = Null OR 0x801c;
0x000E86        015007D3                 r3 = Null + 2003;
0x000E87        E1F0FFE4                 call $message.register_handler;
0x000E88        013009DC                 r1 = Null + 2524;
0x000E89        8540801D                 r2 = Null OR 0x801d;
0x000E8A        01500C3C                 r3 = Null + 3132;
0x000E8B        E1F0FFE0                 call $message.register_handler;
0x000E8C        DDF0FDAE                 jump $pop_rLink_and_rts;

 <$interrupt.initialise>
0x000E8D        01200015                 r0 = Null + 21;
0x000E8E        1920FE14                 M[0xfffe14] = r0 + Null;
0x000E8F        01200311                 r0 = Null + 785;
0x000E90        1920FE15                 M[0xfffe15] = r0 + Null;
0x000E91        E420002F                 r0 = Null + 1;
0x000E92        1920FE11                 M[0xfffe11] = r0 + Null;
0x000E93        1920FE12                 M[0xfffe12] = r0 + Null;
0x000E94        1920FE13                 M[0xfffe13] = r0 + Null;
0x000E95        1900FE4E                 M[0xfffe4e] = Null + Null;
0x000E96        85EE0080                 rFlags = rFlags OR 0x80;
0x000E97        DC0D000F                 rts;
0x000E98        DDF0F168                 jump $reset;
0x000E99        DDF0F169                 jump $interrupt.handler;

 <$stack.initialise>
0x000E9A        FD0000FF 01B0320F        r9 = Null + -52721;
0x000E9C        19B0FE67                 M[0xfffe67] = r9 + Null;
0x000E9D        FD0000FF 01B03150        r9 = Null + -52912;
0x000E9F        19B0FE66                 M[0xfffe66] = r9 + Null;
0x000EA0        19B0FE68                 M[0xfffe68] = r9 + Null;
0x000EA1        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x000EA2        E420002F                 r0 = Null + 1;
0x000EA3        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x000EA4        DC0D000F                 rts;

 <$cbuffer.initialise>
0x000EA5        F3D00000                 push rLink;
0x000EA6        0130037C                 r1 = Null + 892;
0x000EA7        85408001                 r2 = Null OR 0x8001;
0x000EA8        01500688                 r3 = Null + 1672;
0x000EA9        E1F0FFC2                 call $message.register_handler;
0x000EAA        DDF0FD90                 jump $pop_rLink_and_rts;

 <$sbcenc.reset_encoder>
0x000EAB        D1B70004                 r9 = M[r5 + 4];
0x000EAC        D12B0003                 r0 = M[r9 + 3];
0x000EAD        D52B0011                 M[r9 + 17] = r0;
0x000EAE        5000002F                 I0 = Null + r0;
0x000EAF        01C00050                 r10 = Null + 80;
0x000EB0        01200000                 r0 = Null + 0;
0x000EB1        E5F00002                 do $M.sbcenc.reset_encoder.asf_init_loop1;
0x000EB2        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.sbcenc.reset_encoder.asf_init_loop1>
0x000EB3        DC0D000F                 rts;

 <$sbcdec.silence_decoder>
0x000EB4        D12B0032                 r0 = M[r9 + 50];
0x000EB5        D52B003C                 M[r9 + 60] = r0;
0x000EB6        D12B0032                 r0 = M[r9 + 50];
0x000EB7        5010002F                 I1 = Null + r0;
0x000EB8        01C000A0                 r10 = Null + 160;
0x000EB9        01200000                 r0 = Null + 0;
0x000EBA        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop1;
0x000EBB        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop1>
0x000EBC        DC0D000F                 rts;

 <$sbcdec.init_tables>
0x000EBD        F3D00000                 push rLink;
0x000EBE        D1B70005                 r9 = M[r5 + 5];
0x000EBF        E1F0FF06                 call $sbcdec.private.init_tables;
0x000EC0        E1F0FF4B                 call $sbc.private.init_tables_common;
0x000EC1        DDF0FD79                 jump $pop_rLink_and_rts;

 <$sbcenc.init_tables>
0x000EC2        F3D00000                 push rLink;
0x000EC3        D1B70004                 r9 = M[r5 + 4];
0x000EC4        E1F0FF39                 call $sbcenc.private.init_tables;
0x000EC5        E1F0FF46                 call $sbc.private.init_tables_common;
0x000EC6        DDF0FD74                 jump $pop_rLink_and_rts;

 <$error>
0x000EC7        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x000EC8        09B00A00                 r9 = Null + M[$error.handler];
0x000EC9        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x000ECA        E400001F                 break;
0x000ECB        DDF0FFFF                 jump $M.error.error_loop;

 <$sco_decoder.wbs.initialize>
0x000ECC        D50B003F                 M[r9 + 63] = Null;
0x000ECD        D50B0041                 M[r9 + 65] = Null;
0x000ECE        D50B0040                 M[r9 + 64] = Null;
0x000ECF        D50B0042                 M[r9 + 66] = Null;
0x000ED0        DC0D000F                 rts;

 <$message.initialise>
0x000ED1        0920E000                 r0 = Null + M[0xffe000];
0x000ED2        FD0000FF 19203A03        M[$message.last_seq_sent] = r0 + Null;
0x000ED4        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$sco_data.buffer_speech
	-------- [0x054C octets]

0x0001C4	$interrupt.start_time
	-------- [0x0003 octets]

0x0001C5	$wbs_frame_encode.cbuf_in_ptr
	-------- [0x0003 octets]

0x0001C6	$wbs_frame_encode.cbuf_out_ptr
	-------- [0x0003 octets]

0x0001CE	$M.system_config.data.rcv_pass_thru_obj
        0009A7 FF39A1 

0x0001D0	$usb_in_rm.sr_hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0001DC	$M.system_config.data.reinitialize_table
        000E40 00090E 000000 000000 

0x0001E0	$usb_out_rm.sr_hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0001EC	$sbc.audio_sample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0002EC	$sbc.win_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00033C	$sbcenc.analysis_y
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00034C	$sbc.scale_factor
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00035C	$sbc.bitneed
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00036C	$sbc.bits
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00037C	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0x000380	$cbops.scratch.mem1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003F8	$usb_out.copy_struc
        0009E8 80000F FFFFF8 000010 
        000000 

0x0003FD	$usb_in.cbuffer_struc
        000020 0005E0 0005E0 

0x000400	$usb_in_rm.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0005E0	$usb_in.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000600	$sco_data.mem1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x000717	$usb_out_rm.copy_struc
        000975 000987 0007AE 000001 
        FF39EA 000001 0009E8 000001 
        FF39E4 

0x000720	$M.wbs.decoder.frame_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000756	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0007AE	$usb_out_rm.copy_op
0x0007AE	$usb_out_rm.copy_op.mtu_next
        000987 

0x0007AF	$usb_out_rm.copy_op.main_next
        FFFFFF 

0x0007B0	$usb_out_rm.copy_op.func
        0009F7 

0x0007B1	$usb_out_rm.copy_op.param
        000002 000001 000000 FFFFF8 
        000008 000380 000078 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0007FB	$sco_data.sco_decoder
        000D0F 000C3D 000ECC 000000 
        7FFFFF 

0x000800	$sco_data.mem3
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00090E	$sco_data.object
        900001 BC2001 0009EB FF39ED 
        002000 002000 000000 000000 
        000000 0007FB 000040 000E54 
        000000 000000 000000 000000 
        000000 FF35E0 BC200C 000000 
        0009EE 00001E 000000 000000 
        000000 000000 FF39F0 000078 
        00001E 000AE2 000585 

0x00092D	$usb_in_rm.sw_rate_op.mtu_next
0x00092D	$usb_in_rm.sw_rate_op
        FF390E 

0x00092E	$usb_in_rm.sw_rate_op.main_next
        FF338E 

0x00092F	$usb_in_rm.sw_rate_op.func
        FF39F6 

0x000930	$usb_in_rm.sw_rate_op.param
        000002 000640 00000A 003E80 
        00000A 400000 00000B 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x000945	$cbuffer.read_port_buffer_size
0x000945	$cbuffer.port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000951	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00095D	$cbuffer.read_port_limit_addr
0x00095D	$cbuffer.port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000969	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000975	$cbops.scratch.BufferTable
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000987	$usb_out_rm.sw_copy_op.mtu_next
0x000987	$usb_out_rm.sw_copy_op
        FFFFFF 

0x000988	$usb_out_rm.sw_copy_op.main_next
        0007AE 

0x000989	$usb_out_rm.sw_copy_op.func
        0009F4 

0x00098A	$usb_out_rm.sw_copy_op.param
        000000 000002 000000 000000 
        FF3310 0001E0 0001E0 00093D 
        000000 000000 000000 000000 
        000000 000000 

0x000998	$M.App.scheduler.tasks
        000000 00000C 000003 000000 
        000000 000000 000000 000000 
        000000 000CC6 00000A 000CBC 
        000000 000CBA 000001 

0x0009A7	$M.system_config.data.rcv_stream_map_sco_in
        FF39ED 000000 000000 000078 
        000000 000BF2 000BA2 000000 
        000000 000000 000000 000000 
        000000 

0x0009B4	$M.sco_timing.wallclock_obj
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0009C0	$M.system_config.data.snd_funcs
        000A7D FF39F3 000000 000DD9 
        FF30FE 000000 000A0A FF39F3 
        000000 000000 

0x0009CA	$M.system_config.data.rcv_funcs
        000A7D 0009F1 000000 000DD9 
        0001CE 000000 000A0A 0009F1 
        000000 000000 

0x0009D4	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0x0009D8	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0x0009DC	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0x0009E0	$M.sco_timing.sco_param.message_struc
        000000 000000 000000 000000 

0x0009E4	$M.frame_sync.usb_in_mono_audio_copy.usb_in_state_fn
        0001C3 0001D6 0001D6 0001FE 

0x0009E8	$usb_out.cbuffer_struc
        000020 FF33A0 FF33A0 

0x0009EB	$sco_data.port_in.cbuffer_struc
        000117 000600 000600 

0x0009EE	$sco_data.port_out.cbuffer_struc
        00010E 000800 000800 

0x0009F1	$M.system_config.data.rcv_process_streams
        0009A7 FF39A1 000000 

0x0009F4	$cbops.rate_adjustment_and_shift
        000000 000B34 00023A 

0x0009F7	$cbops_iir_resamplev2
        000000 000831 000601 

0x0009FA	$M.system_config.data.receive_mode_table
        0009CA 000000 

0x0009FC	$scratch.s2
        000000 

0x0009FD	$one_mic_example.reinit
        000001 

0x0009FE	$cbuffer.write_port_disconnect_address
        000000 

0x0009FF	$cbuffer.read_port_disconnect_address
        000000 

0x000A00	$error.handler
        000000 

0x000A01	$interrupt.block_count
        000000 

0x000A02	$message.last_addr
        FFFFFF 

0x000A03	$message.queue_write_ptr
        000000 

0x000A04	$message.long_message_size
        000000 

0x000A05	$pskey.last_addr
        FFFFFF 

0x000A06	$timer.last_addr
        FFFFFF 

0x000A07	$sco_last_packet_size
        000000 

0x000A08	$next_packet_value
        000000 

0x000A09	$M.sco_timing.sco_rcv_trigger
        000000 

0x000A0A	$M.frame_sync.usb_out_mono_copy.last_limit
        FFFFFF 

0x000A0B	$M.frame_sync.usb_out_mono_copy.delay_buffer_read
        000001 


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sbcdec.synthesis_vch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30A0	$sbc.loudness_offset_m8_ram
0xFF30A0	$sbc.loudness_offset_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30C0	$sbcdec.bitmask_lookup_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF30D1	$sbcenc.level_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30E1	$sbcdec.levelrecip_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30F1	$M.system_config.data.snd_stream_map_adc
        FF39E7 000000 000000 000078 
        000020 000BF2 000BA2 000000 
        000000 000000 000000 000000 
        000000 

0xFF30FE	$M.system_config.data.snd_pass_thru_obj
        FF30F1 FF35F3 

0xFF3100	$sbcenc.analysis_xch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3150	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3210	$sbcenc.analysis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3290	$sbcdec.synthesis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3310	$sra_coeffs
        77886E 76B443 750EB9 729D5E 
        6F6866 6B7A8E 66E0EC 61AAB9 
        5BE912 55AEB0 4F0F9C 4820DE 
        40F827 39AB7B 3250D9 2AFDE5 
        23C798 1CC1F0 15FFA5 0F91EA 
        098834 03F003 FED4C1 FA3F9E 
        F63781 F2C100 EFDE5A ED8F8D 
        EBD263 EAA293 E9F9EB E9D079 
        EA1CC2 EAD3F9 EBEA40 ED52E4 
        EF00A2 F0E5E4 F2F503 F52088 
        F75B60 F99918 FBCE0A FDEF88 
        FFF403 01D324 0385E3 050696 
        0650F6 076222 083891 08D40B 
        093591 095F45 09544B 0918AB 
        08B129 082324 077469 06AB14 
        05CD5F 04E18A 03EDAC 02F79D 
        0204D5 011A53 003C8C FF6F57 
        FEB5E5 FE12BA FD87A8 FD15D1 
        FCBDB0 FC7F1F FC5965 FC4B43 
        FC5308 FC6EA2 FC9BB4 FCD7A6 
        FD1FBF FD7133 FDC93A FE2522 
        FE825B FEDE87 FF3786 FF8B7B 
        FFD8DA 001E64 005B2E 008E9E 
        00B867 00D889 00EF44 00FD15 
        0102AB 0100DE 00F8A5 00EB0C 
        00D928 00C411 00ACD8 00947E 
        007BEE 0063F8 004D4E 00387E 
        0025F5 0015FD 0008BA FFFE36 
        FFF65B FFF0FA FFEDD3 FFEC94 
        FFECE4 FFEE64 FFF0B3 FFF37A 
        FFF665 FFF92F FFFBA2 FFFD97 
        FFFEF8 FFFFC2 

0xFF338E	$usb_in_rm.sw_copy_op.mtu_next
0xFF338E	$usb_in_rm.sw_copy_op
        00092D 

0xFF338F	$usb_in_rm.sw_copy_op.main_next
        FFFFFF 

0xFF3390	$usb_in_rm.sw_copy_op.func
        0009F4 

0xFF3391	$usb_in_rm.sw_copy_op.param
        000002 000001 000000 000000 
        FF3310 0001D0 0001D0 00093E 
        000000 000000 000000 000000 
        000000 000000 

0xFF339F	$scratch.s0
        000000 

0xFF33A0	$usb_out.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF33C0	$sco_data.buffer_ola
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF33D8	$cbuffer.read_port_offset_addr
0xFF33D8	$cbuffer.port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF33E4	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF33F0	$flash.code.address
	-------- [0x000C octets]

0xFF33F4	$flash.data16.address
	-------- [0x000C octets]

0xFF33F8	$flash.data24.address
	-------- [0x000C octets]

0xFF33FC	$flash.windowed_data16.address
	-------- [0x000C octets]

0xFF3400	$usb_out_rm.mem
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF35E0	$sco_data.plc_obj
        000000 000000 FF33C0 FF39ED 
        0001C7 666666 7FFFFF 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF35F3	$M.system_config.data.snd_stream_map_sco_out
        FF39F0 000000 000000 000078 
        000000 000BC7 000A91 000000 
        000000 000000 000000 000000 
        000000 

0xFF3600	$sco_data.mem2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF370E	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF377C	$audio_copy_timer_struc
        000000 000000 000000 000000 

0xFF3780	$cbops.scratch.mem2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF37F8	$persistant_warp_message_struc
        000000 000000 000000 000000 

0xFF37FC	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0xFF3800	$sco_data.mem4
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF390E	$usb_in_rm.copy_op
0xFF390E	$usb_in_rm.copy_op.mtu_next
        FFFFFF 

0xFF390F	$usb_in_rm.copy_op.main_next
        00092D 

0xFF3910	$usb_in_rm.copy_op.func
        0009F7 

0xFF3911	$usb_in_rm.copy_op.param
        000000 000002 000000 FFFFF8 
        000008 000380 000078 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF395B	$sbc.sbc_common_data_array
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        0001EC 0002EC 000000 FF30A0 
        00034C 000000 00035C 00036C 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF39A1	$M.system_config.data.rcv_stream_map_dac
        FF39EA 000000 000000 000078 
        000020 000BC7 000A91 000000 
        000000 000000 000000 000000 
        000000 

0xFF39AE	QCRBNbYNBJjgGLwIldHWLl8sYVMDF/RRfmLZ+vS9Yno=
        7FFFFF 400000 2AAAAB 200000 
        19999A 155555 124925 100000 
        0E38E4 0CCCCD 0BA2E9 

0xFF39B9	$usb_in.copy_struc
        800000 0003FD 000020 000008 
        000000 000000 000000 000000 
        000000 

0xFF39C2	$usb_in_rm.copy_struc
        000975 FF390E FF338E 000001 
        0003FD 000001 FF39E7 000001 
        FF39E4 

0xFF39CB	$interrupt.isr_call_table
        000A20 000EC7 000645 000EC7 
        000EC7 000EC7 000EC7 000EC7 
        000EC7 

0xFF39D4	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0xFF39D8	$wall_clock.message_struc
        000000 000000 000000 000000 

0xFF39DC	$M.sco_timing.bt_addr.message_struc
        000000 000000 000000 000000 

0xFF39E0	$M.sco_timing.sco_param_failed.message_struc
        000000 000000 000000 000000 

0xFF39E4	$cbops.scratch.cbuffer_struc2
        000078 FF3780 FF3780 

0xFF39E7	$usb_in_rm.cbuffer_struc
        0001E0 000400 000400 

0xFF39EA	$usb_out_rm.cbuffer_struc
        0001E0 FF3400 FF3400 

0xFF39ED	$sco_data.sco_in.cbuffer_struc
        00010E FF3600 FF3600 

0xFF39F0	$sco_data.encoder.cbuffer_struc
        00010E FF3800 FF3800 

0xFF39F3	$M.system_config.data.snd_process_streams
        FF30F1 FF35F3 000000 

0xFF39F6	$cbops.rate_monitor_op
        000000 000340 00034B 

0xFF39F9	$M.system_config.data.send_mode_table
        0009C0 000000 

0xFF39FB	$scratch.s1
        000000 

0xFF39FC	$one_mic_example.sys_mode
        000000 

0xFF39FD	$cbuffer.write_port_connect_address
        000000 

0xFF39FE	$cbuffer.read_port_connect_address
        000000 

0xFF39FF	$cbuffer.auto_mcu_message
        000001 000000 

0xFF3A01	$interrupt.total_time
        000000 

0xFF3A02	$message.queue_read_ptr
        000000 

0xFF3A03	$message.last_seq_sent
        000000 

0xFF3A04	$pskey.request_in_progress
        000000 

0xFF3A05	$timer.id
        000001 

0xFF3A06	$wall_clock.last_addr
        FFFFFF 

0xFF3A07	$sco_port_data
        000000 

0xFF3A08	$M.sco_timing.sco_data_ptr
        000000 

0xFF3A09	$M.sco_timing.rcv_proc_trigger
        000000 

0xFF3A0A	$M.frame_sync.usb_out_mono_copy.ZeroBuf
        000000 

0xFF3A0B	$wbs_frame_encode.can_idle
        000000 


------------------------------------------------------------------------
Region: flash.windowed_data16
------------------------------------------------------------------------
0x000000	$sbcdec.synthesis_coefs_m8
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 005A82 007AA5 
        007D86 00A57D 00865A 00827A 
        00471C 00ED82 0075A1 0018F8 
        00B86A 006D99 009592 0067E7 
        000748 007D8A 005FB8 00E313 
        0030FB 00C589 00BE51 007641 
        00AFCF 00043B 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        0018F8 00B8B8 00E313 006A6D 
        009982 0075A1 007D8A 005F95 
        009267 00471C 00EDE7 000748 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        00E707 004847 001CED 009592 
        00677D 008A5F 008275 00A16A 
        006D99 00B8E3 001318 00F8B8 
        00CF04 003B76 0041AF 0089BE 
        005130 00FBC5 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        00B8E3 00137D 008A5F 00E707 
        004895 009267 006A6D 009918 
        00F8B8 008275 00A147 001CED 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 00A57D 00865A 
        00827A 005A82 007AA5 007D86 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        008000 000080 000000 008000 
        000080 000000 008000 000080 
        000000 008000 000080 000000 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 

0x0000C0	$sbcenc.analysis_coefs_m8
        005A82 007A6A 006D99 007641 
        00AF7D 008A5F 007FFF 00FF7D 
        008A5F 007641 00AF6A 006D99 
        005A82 007A47 001CED 0030FB 
        00C518 00F8B8 000000 0000E7 
        000748 00CF04 003BB8 00E313 
        00A57D 0086E7 000748 0030FB 
        00C56A 006D99 007FFF 00FF6A 
        006D99 0030FB 00C5E7 000748 
        00A57D 008682 0075A1 0089BE 
        0051B8 00E313 000000 000047 
        001CED 007641 00AF7D 008A5F 
        00A57D 008682 0075A1 00CF04 
        003B47 001CED 007FFF 00FF47 
        001CED 00CF04 003B82 0075A1 
        00A57D 008618 00F8B8 007641 
        00AF6A 006D99 000000 000095 
        009267 0089BE 0051E7 000748 
        005A82 007AB8 00E313 0089BE 
        005118 00F8B8 007FFF 00FF18 
        00F8B8 0089BE 0051B8 00E313 
        005A82 007A6A 006D99 00CF04 
        003B82 0075A1 000000 00007D 
        008A5F 0030FB 00C595 009267 
        005A82 007A47 001CED 0089BE 
        0051E7 000748 007FFF 00FFE7 
        000748 0089BE 005147 001CED 
        005A82 007A95 009267 00CF04 
        003B7D 008A5F 000000 000082 
        0075A1 0030FB 00C56A 006D99 
        00A57D 00867D 008A5F 00CF04 
        003BB8 00E313 007FFF 00FFB8 
        00E313 00CF04 003B7D 008A5F 
        00A57D 0086E7 000748 007641 
        00AF95 009267 000000 00006A 
        006D99 0089BE 005118 00F8B8 
        00A57D 008618 00F8B8 0030FB 
        00C595 009267 007FFF 00FF95 
        009267 0030FB 00C518 00F8B8 
        00A57D 00867D 008A5F 0089BE 
        005147 001CED 000000 0000B8 
        00E313 007641 00AF82 0075A1 
        005A82 007A95 009267 007641 
        00AF82 0075A1 007FFF 00FF82 
        0075A1 007641 00AF95 009267 
        005A82 007AB8 00E313 0030FB 
        00C5E7 000748 000000 000018 
        00F8B8 00CF04 003B47 001CED 

0x000180	$sbc.win_coefs_m8
        000000 000000 001486 00002C 
        00FE00 0048B2 00006B 00FE00 
        00956A 0000C1 008400 00E9CC 
        000107 00B201 0013BD 000105 
        006E00 00D3E3 000076 003FFF 
        00E890 00FF27 00C4FE 00359E 
        0002E5 00CD04 001C6E 00055A 
        00CF06 0086CE 000780 008908 
        0024A4 00084E 001907 00D7D1 
        00069F 00B404 0088FB 00017F 
        0044FD 007BAE 00F881 000DF2 
        00A1BA 00EBFE 0058E4 00C4A2 
        0022D0 00C22A 007CFA 0031F5 
        006738 00EEC6 003F1C 008844 
        003B3C 004810 00D84A 00708A 
        004B3D 00B24A 00708A 004810 
        00D844 003B3C 003F1C 008838 
        00EEC6 0031F5 00672A 007CFA 
        00DD2F 003EE4 00C4A2 00EBFE 
        0058F2 00A1BA 00F881 000DFD 
        007BAE 00017F 004404 0088FB 
        00069F 00B407 00D7D1 00084E 
        001908 0024A4 000780 008906 
        0086CE 00055A 00CF04 001C6E 
        00FD1A 0033FE 00359E 00FF27 
        00C4FF 00E890 000076 003F00 
        00D3E3 000105 006E01 0013BD 
        000107 00B200 00E9CC 0000C1 
        008400 00956A 00006B 00FE00 
        0048B2 00002C 00FE00 001486 

0x0001F8	$sbc.loudness_offset_m8
0x0001F8	$sbc.loudness_offset
        FFFFFE 000000 000000 000000 
        000000 000000 000000 000001 
        FFFFFD 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 

0x000218	$sbcdec.bitmask_lookup
        000000 000000 000001 000000 
        000300 000007 000000 000F00 
        00001F 000000 003F00 00007F 
        000000 00FF00 0001FF 000003 
        00FF00 0007FF 00000F 00FF00 
        001FFF 00003F 00FF00 007FFF 
        0000FF 00FF00 

0x000232	$sbcenc.level_coefs
        000000 008000 000180 000003 
        008000 000780 00000F 008000 
        001F80 00003F 008000 007F80 
        0000FF 008001 00FF80 0003FF 
        008007 00FF80 000FFF 00801F 
        00FF80 003FFF 00807F 00FF80 

0x00024A	$sbcdec.levelrecip_coefs
        00AAAA 00AB92 004925 008888 
        008984 002108 008208 002181 
        000204 008080 008180 004020 
        008020 000880 001002 008008 
        000180 000400 008002 000080 
        000100 008000 008000 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 2572 of 32768 words used, 30196 words available in 1 blocks
  DM2_REGION: 2572 of 32768 words used, 30196 words available in 1 blocks
  flash.windowed_data16: 609 of 16777216 words used, 16776607 words available in 1 blocks
TOTAL: 5753 of 16842752 words used, 16836999 words available in 3 blocks

CODE:
  PM_REGION: 3797 of 11264 words used, 7467 words available in 1 blocks
TOTAL: 3797 of 11264 words used, 7467 words available in 1 blocks

